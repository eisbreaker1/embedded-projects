
MAX30100_Beat_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  08008650  08008650  00018650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f5c  08008f5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f64  08008f64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001dc  08009148  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08009148  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012214  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253e  00000000  00000000  00032420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00034960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000359b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180ba  00000000  00000000  00036940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131fa  00000000  00000000  0004e9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bd9  00000000  00000000  00061bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f47cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005764  00000000  00000000  000f4820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008638 	.word	0x08008638

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008638 	.word	0x08008638

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	70fb      	strb	r3, [r7, #3]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f80:	f300 8100 	bgt.w	8001184 <GFX_draw_char+0x228>
 8000f84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f88:	2b3f      	cmp	r3, #63	; 0x3f
 8000f8a:	f300 80fb 	bgt.w	8001184 <GFX_draw_char+0x228>
 8000f8e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000f92:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	440b      	add	r3, r1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f340 80ef 	ble.w	8001184 <GFX_draw_char+0x228>
 8000fa6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000faa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4413      	add	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f340 80e6 	ble.w	8001184 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e0aa      	b.n	8001114 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000fbe:	78fa      	ldrb	r2, [r7, #3]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	441a      	add	r2, r3
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a6f      	ldr	r2, [pc, #444]	; (800118c <GFX_draw_char+0x230>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	73bb      	strb	r3, [r7, #14]
 8000fd6:	e092      	b.n	80010fe <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d040      	beq.n	8001064 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d116      	bne.n	8001018 <GFX_draw_char+0xbc>
 8000fea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d112      	bne.n	8001018 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b218      	sxth	r0, r3
 8001000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001004:	b29a      	uxth	r2, r3
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	b21b      	sxth	r3, r3
 800100e:	883a      	ldrh	r2, [r7, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f000 fc49 	bl	80018a8 <SSD1306_draw_pixel>
 8001016:	e069      	b.n	80010ec <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	b29a      	uxth	r2, r3
 800101e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001022:	b29b      	uxth	r3, r3
 8001024:	fb12 f303 	smulbb	r3, r2, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4413      	add	r3, r2
 800102e:	b29b      	uxth	r3, r3
 8001030:	b218      	sxth	r0, r3
 8001032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800103c:	b29b      	uxth	r3, r3
 800103e:	fb12 f303 	smulbb	r3, r2, r3
 8001042:	b29a      	uxth	r2, r3
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	b29b      	uxth	r3, r3
 800104a:	b219      	sxth	r1, r3
 800104c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001050:	b21a      	sxth	r2, r3
 8001052:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001056:	b21c      	sxth	r4, r3
 8001058:	883b      	ldrh	r3, [r7, #0]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4623      	mov	r3, r4
 800105e:	f000 f8d0 	bl	8001202 <GFX_draw_fill_rect>
 8001062:	e043      	b.n	80010ec <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 8001064:	8c3a      	ldrh	r2, [r7, #32]
 8001066:	883b      	ldrh	r3, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d03f      	beq.n	80010ec <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 800106c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001070:	2b01      	cmp	r3, #1
 8001072:	d116      	bne.n	80010a2 <GFX_draw_char+0x146>
 8001074:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001078:	2b01      	cmp	r3, #1
 800107a:	d112      	bne.n	80010a2 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	b29a      	uxth	r2, r3
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	4413      	add	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	b218      	sxth	r0, r3
 800108a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800108e:	b29a      	uxth	r2, r3
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21b      	sxth	r3, r3
 8001098:	8c3a      	ldrh	r2, [r7, #32]
 800109a:	4619      	mov	r1, r3
 800109c:	f000 fc04 	bl	80018a8 <SSD1306_draw_pixel>
 80010a0:	e024      	b.n	80010ec <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	fb12 f303 	smulbb	r3, r2, r3
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b218      	sxth	r0, r3
 80010bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	fb12 f303 	smulbb	r3, r2, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b219      	sxth	r1, r3
 80010d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010da:	b21a      	sxth	r2, r3
 80010dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010e0:	b21c      	sxth	r4, r3
 80010e2:	8c3b      	ldrh	r3, [r7, #32]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4623      	mov	r3, r4
 80010e8:	f000 f88b 	bl	8001202 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 80010ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73bb      	strb	r3, [r7, #14]
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	737b      	strb	r3, [r7, #13]
 80010fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f6bf af68 	bge.w	8000fd8 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8001108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3301      	adds	r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	2b04      	cmp	r3, #4
 800111a:	f77f af50 	ble.w	8000fbe <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800111e:	8c3a      	ldrh	r2, [r7, #32]
 8001120:	883b      	ldrh	r3, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d02f      	beq.n	8001186 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8001126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10e      	bne.n	800114c <GFX_draw_char+0x1f0>
 800112e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10a      	bne.n	800114c <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	3305      	adds	r3, #5
 800113a:	b29b      	uxth	r3, r3
 800113c:	b218      	sxth	r0, r3
 800113e:	8c3b      	ldrh	r3, [r7, #32]
 8001140:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001144:	2208      	movs	r2, #8
 8001146:	f000 fd29 	bl	8001b9c <SSD1306_draw_fast_vline>
 800114a:	e01c      	b.n	8001186 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800114c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001150:	b29b      	uxth	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4413      	add	r3, r2
 8001158:	b29a      	uxth	r2, r3
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b218      	sxth	r0, r3
 8001162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001166:	b21a      	sxth	r2, r3
 8001168:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800116c:	b29b      	uxth	r3, r3
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21c      	sxth	r4, r3
 8001174:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001178:	8c3b      	ldrh	r3, [r7, #32]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4623      	mov	r3, r4
 800117e:	f000 f840 	bl	8001202 <GFX_draw_fill_rect>
 8001182:	e000      	b.n	8001186 <GFX_draw_char+0x22a>
		return;
 8001184:	bf00      	nop
		}
	}
}
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	0800865c 	.word	0x0800865c

08001190 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af04      	add	r7, sp, #16
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	461a      	mov	r2, r3
 800119a:	4603      	mov	r3, r0
 800119c:	81fb      	strh	r3, [r7, #14]
 800119e:	460b      	mov	r3, r1
 80011a0:	81bb      	strh	r3, [r7, #12]
 80011a2:	4613      	mov	r3, r2
 80011a4:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80011aa:	e021      	b.n	80011f0 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	4413      	add	r3, r2
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b218      	sxth	r0, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	88fc      	ldrh	r4, [r7, #6]
 80011be:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80011c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4623      	mov	r3, r4
 80011d4:	f7ff fec2 	bl	8000f5c <GFX_draw_char>
		offset += (5 + 2) * size_x;
 80011d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011dc:	461a      	mov	r2, r3
 80011de:	00d2      	lsls	r2, r2, #3
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	4413      	add	r3, r2
 80011e8:	75fb      	strb	r3, [r7, #23]
		c++;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
	while(*c)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1d9      	bne.n	80011ac <GFX_draw_string+0x1c>
	}
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}

08001202 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	4604      	mov	r4, r0
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4623      	mov	r3, r4
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	4603      	mov	r3, r0
 8001216:	80bb      	strh	r3, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	e00e      	b.n	8001244 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8001226:	8c3b      	ldrh	r3, [r7, #32]
 8001228:	f9b7 2000 	ldrsh.w	r2, [r7]
 800122c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001230:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001234:	f000 fcb2 	bl	8001b9c <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8001238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001248:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800124c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001250:	440b      	add	r3, r1
 8001252:	429a      	cmp	r2, r3
 8001254:	dbe7      	blt.n	8001226 <GFX_draw_fill_rect+0x24>
	}
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <ReadDataFromFIFO>:
extern uint16_t bpmIndex;
extern UART_HandleTypeDef huart2;


LEDBuf ReadDataFromFIFO(uint8_t* Buf)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
	LEDBuf Led;
	HAL_I2C_Mem_Read(&hi2c1, MAX30100_READ_ADDR, FIFO_DATA_REG , 1, Buf, 4, 50);
 8001268:	2332      	movs	r3, #50	; 0x32
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2304      	movs	r3, #4
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	2205      	movs	r2, #5
 8001278:	21af      	movs	r1, #175	; 0xaf
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <ReadDataFromFIFO+0x6c>)
 800127c:	f002 f9a2 	bl	80035c4 <HAL_I2C_Mem_Read>
	Led.IrVal = (Buf[0]<<8)|(Buf[1]<<0);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	813b      	strh	r3, [r7, #8]
	Led.RVal = (Buf[2]<<8)|(Buf[3]<<0);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3302      	adds	r3, #2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3303      	adds	r3, #3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	817b      	strh	r3, [r7, #10]
	return Led;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	89ba      	ldrh	r2, [r7, #12]
 80012ba:	f362 030f 	bfi	r3, r2, #0, #16
 80012be:	89fa      	ldrh	r2, [r7, #14]
 80012c0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000218 	.word	0x20000218

080012d0 <StoreIrData>:

void StoreIrData(LEDBuf Led)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	IrLED.PrevVal = IrLED.CurrentVal;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <StoreIrData+0x24>)
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <StoreIrData+0x24>)
 80012de:	805a      	strh	r2, [r3, #2]
	IrLED.CurrentVal = Led.IrVal;
 80012e0:	88ba      	ldrh	r2, [r7, #4]
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <StoreIrData+0x24>)
 80012e4:	801a      	strh	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2000034c 	.word	0x2000034c

080012f8 <DCRemoval>:
	RedLED.PrevVal = RedLED.CurrentVal;
	RedLED.CurrentVal = Led.RVal;
}

float DCRemoval(LEDValue* RawLed, dcFilter* Filter, float alpha)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
	Filter->w = RawLed->CurrentVal + alpha * Filter->prev_w;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	edd3 6a01 	vldr	s13, [r3, #4]
 8001318:	edd7 7a01 	vldr	s15, [r7, #4]
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	edc3 7a00 	vstr	s15, [r3]
	Filter->result = Filter->w - Filter->prev_w;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	edd3 7a01 	vldr	s15, [r3, #4]
 8001336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	edc3 7a02 	vstr	s15, [r3, #8]
	Filter->prev_w = Filter->w;
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	605a      	str	r2, [r3, #4]
	return Filter->result;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	ee07 3a90 	vmov	s15, r3
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <meanDiff>:

float meanDiff(float LEDval, mean_diff_filter_t* Filter)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a01 	vstr	s0, [r7, #4]
 800136a:	6038      	str	r0, [r7, #0]
	float avg = 0;
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]

	Filter->sum -= Filter->values[Filter->index];
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	Filter->values[Filter->index] = LEDval;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
	Filter->sum += Filter->values[Filter->index];
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	Filter->index += 1;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013c8:	3301      	adds	r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Filter->index = Filter->index % FILTER_SIZE;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <meanDiff+0xdc>)
 80013da:	fba3 1302 	umull	r1, r3, r3, r2
 80013de:	0919      	lsrs	r1, r3, #4
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	if(Filter->count < FILTER_SIZE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80013f8:	2b13      	cmp	r3, #19
 80013fa:	d807      	bhi.n	800140c <meanDiff+0xac>
		Filter->count += 1;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	avg = Filter->sum / Filter->count;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001424:	edc7 7a03 	vstr	s15, [r7, #12]
	return avg;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	ee07 3a90 	vmov	s15, r3
}
 800142e:	eeb0 0a67 	vmov.f32	s0, s15
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	cccccccd 	.word	0xcccccccd

08001440 <ButterworthFilter>:

float ButterworthFilter(float LEDval, butterworth_filter_t* Filter)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a01 	vstr	s0, [r7, #4]
 800144a:	6038      	str	r0, [r7, #0]
	Filter->v[0] = Filter->v[1];
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	601a      	str	r2, [r3, #0]

	//Fs = 100Hz and Fc = 10Hz
	Filter->v[1] = (2.452372752527856026e-1 * LEDval) + (0.50952544949442879485 * Filter->v[0]);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff f87f 	bl	8000558 <__aeabi_f2d>
 800145a:	a31b      	add	r3, pc, #108	; (adr r3, 80014c8 <ButterworthFilter+0x88>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8d2 	bl	8000608 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f871 	bl	8000558 <__aeabi_f2d>
 8001476:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <ButterworthFilter+0x90>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f8c4 	bl	8000608 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7fe ff08 	bl	800029c <__adddf3>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb90 	bl	8000bb8 <__aeabi_d2f>
 8001498:	4602      	mov	r2, r0
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	605a      	str	r2, [r3, #4]

	//Fs = 100Hz and Fc = 4Hz
	//Filter->v[1] = (1.367287359973195227e-1 * LEDval) + (0.72654252800536101020 * Filter->v[0]); //Very precise butterworth filter

	Filter->result = Filter->v[0] + Filter->v[1];
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	ed93 7a00 	vldr	s14, [r3]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	edc3 7a02 	vstr	s15, [r3, #8]
	return Filter->result;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	ee07 3a90 	vmov	s15, r3
}
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bdb0      	pop	{r4, r5, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	5e7c4548 	.word	0x5e7c4548
 80014cc:	3fcf63ef 	.word	0x3fcf63ef
 80014d0:	50c1dd5c 	.word	0x50c1dd5c
 80014d4:	3fe04e08 	.word	0x3fe04e08

080014d8 <ReadOperation>:


void ReadOperation(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	uint8_t Buf[2];
	LEDBuf Led;
	Led = ReadDataFromFIFO(Buf);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff febd 	bl	8001260 <ReadDataFromFIFO>
 80014e6:	4603      	mov	r3, r0
 80014e8:	603b      	str	r3, [r7, #0]
	StoreIrData(Led);
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f7ff fef0 	bl	80012d0 <StoreIrData>
	//StoreRedData(Led);
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <BeatDetection>:

uint16_t BeatDetection(float curSensorValue)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint32_t currentBeatValue = 0;
	static uint32_t lastBeat = 0;
	static int valuesBPMCount = 0;
	static int valuesBPMSum = 0;

	if(curSensorValue > PULSE_MAX_THRESHOLD)
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800168c <BeatDetection+0x194>
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	dd0e      	ble.n	8001532 <BeatDetection+0x3a>
	{
		Beat_State = IDLE_State;
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <BeatDetection+0x198>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
		prevSensorValue = 0;
 800151a:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <BeatDetection+0x19c>)
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
		lastBeat = 0;
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <BeatDetection+0x1a0>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
		currentBeatValue = 0;
 8001528:	4b5c      	ldr	r3, [pc, #368]	; (800169c <BeatDetection+0x1a4>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e0a7      	b.n	8001682 <BeatDetection+0x18a>
	}

	switch (Beat_State)
 8001532:	4b57      	ldr	r3, [pc, #348]	; (8001690 <BeatDetection+0x198>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	f000 8091 	beq.w	800165e <BeatDetection+0x166>
 800153c:	2b02      	cmp	r3, #2
 800153e:	f300 809c 	bgt.w	800167a <BeatDetection+0x182>
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <BeatDetection+0x54>
 8001546:	2b01      	cmp	r3, #1
 8001548:	d00e      	beq.n	8001568 <BeatDetection+0x70>
 800154a:	e096      	b.n	800167a <BeatDetection+0x182>
	{
	case IDLE_State:
		if(curSensorValue > PULSE_MIN_THRESHOLD)
 800154c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001550:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80016a0 <BeatDetection+0x1a8>
 8001554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155c:	dc00      	bgt.n	8001560 <BeatDetection+0x68>
		{
			Beat_State = PEAK_FOUND;
		}
		break;
 800155e:	e08c      	b.n	800167a <BeatDetection+0x182>
			Beat_State = PEAK_FOUND;
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <BeatDetection+0x198>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
		break;
 8001566:	e088      	b.n	800167a <BeatDetection+0x182>
	case PEAK_FOUND:
	{
			currentBeatValue = timestamp();
 8001568:	f000 f8a6 	bl	80016b8 <timestamp>
 800156c:	4603      	mov	r3, r0
 800156e:	4a4b      	ldr	r2, [pc, #300]	; (800169c <BeatDetection+0x1a4>)
 8001570:	6013      	str	r3, [r2, #0]
			uint32_t Duration = currentBeatValue - lastBeat;
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <BeatDetection+0x1a4>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <BeatDetection+0x1a0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	60fb      	str	r3, [r7, #12]
			if (Duration < 200)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2bc7      	cmp	r3, #199	; 0xc7
 8001582:	d803      	bhi.n	800158c <BeatDetection+0x94>
			{
				Beat_State = IDLE_State;
 8001584:	4b42      	ldr	r3, [pc, #264]	; (8001690 <BeatDetection+0x198>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
				break;
 800158a:	e076      	b.n	800167a <BeatDetection+0x182>
			}
			lastBeat = currentBeatValue;
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <BeatDetection+0x1a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <BeatDetection+0x1a0>)
 8001592:	6013      	str	r3, [r2, #0]

			if(valuesBPMCount < BPM_SAMPLE_SIZE)
 8001594:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <BeatDetection+0x1ac>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	dc04      	bgt.n	80015a6 <BeatDetection+0xae>
			{
				valuesBPMCount++;
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <BeatDetection+0x1ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <BeatDetection+0x1ac>)
 80015a4:	6013      	str	r3, [r2, #0]
			}

			float RawBPM = 0;
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
			if(Duration>0)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00a      	beq.n	80015c8 <BeatDetection+0xd0>
			{
				RawBPM = 60000.0 / (float)Duration;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015bc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80016a8 <BeatDetection+0x1b0>
 80015c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c4:	edc7 7a05 	vstr	s15, [r7, #20]
			}
			bpmTable[bpmIndex] = RawBPM;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <BeatDetection+0x1b4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	4a38      	ldr	r2, [pc, #224]	; (80016b0 <BeatDetection+0x1b8>)
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
			bpmIndex++;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <BeatDetection+0x1b4>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <BeatDetection+0x1b4>)
 80015e0:	801a      	strh	r2, [r3, #0]
			bpmIndex %=valuesBPMCount;
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <BeatDetection+0x1b4>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <BeatDetection+0x1ac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fb92 f1f3 	sdiv	r1, r2, r3
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <BeatDetection+0x1b4>)
 80015fa:	801a      	strh	r2, [r3, #0]
			valuesBPMSum = 0;
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <BeatDetection+0x1bc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
			for(int i=0; i<valuesBPMCount; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	e016      	b.n	8001636 <BeatDetection+0x13e>
			{
				valuesBPMSum += bpmTable[i];
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <BeatDetection+0x1bc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <BeatDetection+0x1b8>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001628:	ee17 2a90 	vmov	r2, s15
 800162c:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <BeatDetection+0x1bc>)
 800162e:	601a      	str	r2, [r3, #0]
			for(int i=0; i<valuesBPMCount; i++)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	3301      	adds	r3, #1
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <BeatDetection+0x1ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbe3      	blt.n	8001608 <BeatDetection+0x110>
			}
			lastBeat = currentBeatValue;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <BeatDetection+0x1a4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <BeatDetection+0x1a0>)
 8001646:	6013      	str	r3, [r2, #0]

			Beat_State = PULSE_TRACE_DOWN;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <BeatDetection+0x198>)
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]

			//return valuesBPMSum/valuesBPMCount;
			return valuesBPMSum/valuesBPMCount;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <BeatDetection+0x1bc>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <BeatDetection+0x1ac>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fb92 f3f3 	sdiv	r3, r2, r3
 800165a:	b29b      	uxth	r3, r3
 800165c:	e011      	b.n	8001682 <BeatDetection+0x18a>

		break;
	}
	case PULSE_TRACE_DOWN:
	{
		if(curSensorValue<=PULSE_FALL_THRESHOLD)
 800165e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001662:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d900      	bls.n	8001672 <BeatDetection+0x17a>
		{
			Beat_State = IDLE_State;
		}
		break;
 8001670:	e002      	b.n	8001678 <BeatDetection+0x180>
			Beat_State = IDLE_State;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <BeatDetection+0x198>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
		break;
 8001678:	bf00      	nop
	}
	}
	prevSensorValue = curSensorValue;
 800167a:	4a06      	ldr	r2, [pc, #24]	; (8001694 <BeatDetection+0x19c>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]

	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	453b8000 	.word	0x453b8000
 8001690:	200001f8 	.word	0x200001f8
 8001694:	200001fc 	.word	0x200001fc
 8001698:	20000200 	.word	0x20000200
 800169c:	20000204 	.word	0x20000204
 80016a0:	420c0000 	.word	0x420c0000
 80016a4:	20000208 	.word	0x20000208
 80016a8:	476a6000 	.word	0x476a6000
 80016ac:	20000378 	.word	0x20000378
 80016b0:	20000350 	.word	0x20000350
 80016b4:	2000020c 	.word	0x2000020c

080016b8 <timestamp>:


uint32_t timestamp()
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	return (uint32_t)__HAL_TIM_GET_COUNTER(&htim2);
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <timestamp+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	200002c0 	.word	0x200002c0

080016d0 <MAX30100_Init>:

void MAX30100_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af04      	add	r7, sp, #16
	uint8_t Settings = (2<<0);
 80016d6:	2302      	movs	r3, #2
 80016d8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAX30100_ADDR, MODE_CFG_REG, 1, &Settings, 1, 50);
 80016da:	2332      	movs	r3, #50	; 0x32
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	2206      	movs	r2, #6
 80016ea:	21ae      	movs	r1, #174	; 0xae
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <MAX30100_Init+0x64>)
 80016ee:	f001 fe6f 	bl	80033d0 <HAL_I2C_Mem_Write>

	Settings = (1<<2)|(3<<0);
 80016f2:	2307      	movs	r3, #7
 80016f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAX30100_ADDR, SPO2_CFG_REG, 1, &Settings, 1, 50);
 80016f6:	2332      	movs	r3, #50	; 0x32
 80016f8:	9302      	str	r3, [sp, #8]
 80016fa:	2301      	movs	r3, #1
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	2207      	movs	r2, #7
 8001706:	21ae      	movs	r1, #174	; 0xae
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <MAX30100_Init+0x64>)
 800170a:	f001 fe61 	bl	80033d0 <HAL_I2C_Mem_Write>

	//Settings = (1<<5)|(1<<7);
	//HAL_I2C_Mem_Write(&hi2c1, MAX30100_ADDR, ITR_EN_REG, 1, &Settings, 1, 50);

	Settings =(6<<0);//|(6<<4);
 800170e:	2306      	movs	r3, #6
 8001710:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MAX30100_ADDR, LED_CFG_REG, 1, &Settings, 1, 50);
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	2209      	movs	r2, #9
 8001722:	21ae      	movs	r1, #174	; 0xae
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <MAX30100_Init+0x64>)
 8001726:	f001 fe53 	bl	80033d0 <HAL_I2C_Mem_Write>


}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000218 	.word	0x20000218

08001738 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	b29a      	uxth	r2, r3
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	88bb      	ldrh	r3, [r7, #4]
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	2178      	movs	r1, #120	; 0x78
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <platform_write+0x34>)
 800175e:	f001 fe37 	bl	80033d0 <HAL_I2C_Mem_Write>
	return 0;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000026c 	.word	0x2000026c

08001770 <SSD1306_send_com>:
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
	return 0;
}

static void SSD1306_send_com(uint8_t c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ffd9 	bl	8001738 <platform_write>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <SSD1306_Init>:

bool SSD1306_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8001796:	2302      	movs	r3, #2
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	238f      	movs	r3, #143	; 0x8f
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	2302      	movs	r3, #2
 80017a0:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 80017a2:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <SSD1306_Init+0x114>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <SSD1306_Init+0x36>
 80017aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ae:	f004 f857 	bl	8005860 <malloc>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <SSD1306_Init+0x114>)
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <SSD1306_Init+0x114>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <SSD1306_Init+0x36>
  {
    return false;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e06a      	b.n	800189c <SSD1306_Init+0x10c>
  }

  SSD1306_display_clear();
 80017c6:	f000 f949 	bl	8001a5c <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 80017ca:	20ae      	movs	r0, #174	; 0xae
 80017cc:	f7ff ffd0 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 80017d0:	20d5      	movs	r0, #213	; 0xd5
 80017d2:	f7ff ffcd 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80017d6:	20e0      	movs	r0, #224	; 0xe0
 80017d8:	f7ff ffca 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80017dc:	20a8      	movs	r0, #168	; 0xa8
 80017de:	f7ff ffc7 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80017e2:	203f      	movs	r0, #63	; 0x3f
 80017e4:	f7ff ffc4 	bl	8001770 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80017e8:	20d3      	movs	r0, #211	; 0xd3
 80017ea:	f7ff ffc1 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff ffbe 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80017f4:	2040      	movs	r0, #64	; 0x40
 80017f6:	f7ff ffbb 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80017fa:	208d      	movs	r0, #141	; 0x8d
 80017fc:	f7ff ffb8 	bl	8001770 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <SSD1306_Init+0x7a>
 8001806:	2310      	movs	r3, #16
 8001808:	e000      	b.n	800180c <SSD1306_Init+0x7c>
 800180a:	2314      	movs	r3, #20
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ffaf 	bl	8001770 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 8001812:	2020      	movs	r0, #32
 8001814:	f7ff ffac 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff ffa9 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 800181e:	20b0      	movs	r0, #176	; 0xb0
 8001820:	f7ff ffa6 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 8001824:	20c8      	movs	r0, #200	; 0xc8
 8001826:	f7ff ffa3 	bl	8001770 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 800182a:	2312      	movs	r3, #18
 800182c:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 800182e:	797b      	ldrb	r3, [r7, #5]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <SSD1306_Init+0xa8>
 8001834:	239f      	movs	r3, #159	; 0x9f
 8001836:	e000      	b.n	800183a <SSD1306_Init+0xaa>
 8001838:	23cf      	movs	r3, #207	; 0xcf
 800183a:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 800183c:	20da      	movs	r0, #218	; 0xda
 800183e:	f7ff ff97 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff93 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 800184a:	2081      	movs	r0, #129	; 0x81
 800184c:	f7ff ff90 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff8c 	bl	8001770 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8001858:	20d9      	movs	r0, #217	; 0xd9
 800185a:	f7ff ff89 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <SSD1306_Init+0xd8>
 8001864:	2322      	movs	r3, #34	; 0x22
 8001866:	e000      	b.n	800186a <SSD1306_Init+0xda>
 8001868:	23f1      	movs	r3, #241	; 0xf1
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff80 	bl	8001770 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8001870:	20db      	movs	r0, #219	; 0xdb
 8001872:	f7ff ff7d 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8001876:	2040      	movs	r0, #64	; 0x40
 8001878:	f7ff ff7a 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 800187c:	20a4      	movs	r0, #164	; 0xa4
 800187e:	f7ff ff77 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8001882:	20a6      	movs	r0, #166	; 0xa6
 8001884:	f7ff ff74 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8001888:	202e      	movs	r0, #46	; 0x2e
 800188a:	f7ff ff71 	bl	8001770 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800188e:	20af      	movs	r0, #175	; 0xaf
 8001890:	f7ff ff6e 	bl	8001770 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8001894:	2002      	movs	r0, #2
 8001896:	f000 fb2b 	bl	8001ef0 <SSD1306_set_rotation>
  return true;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000210 	.word	0x20000210

080018a8 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	460b      	mov	r3, r1
 80018b4:	80bb      	strh	r3, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 80018ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f2c0 80c4 	blt.w	8001a4c <SSD1306_draw_pixel+0x1a4>
 80018c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c8:	2b7f      	cmp	r3, #127	; 0x7f
 80018ca:	f300 80bf 	bgt.w	8001a4c <SSD1306_draw_pixel+0x1a4>
 80018ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f2c0 80ba 	blt.w	8001a4c <SSD1306_draw_pixel+0x1a4>
 80018d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018dc:	2b3f      	cmp	r3, #63	; 0x3f
 80018de:	f300 80b5 	bgt.w	8001a4c <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80018e2:	f000 fb15 	bl	8001f10 <SSD1306_get_rotation>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d023      	beq.n	8001934 <SSD1306_draw_pixel+0x8c>
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	dc33      	bgt.n	8001958 <SSD1306_draw_pixel+0xb0>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d002      	beq.n	80018fa <SSD1306_draw_pixel+0x52>
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d012      	beq.n	800191e <SSD1306_draw_pixel+0x76>
 80018f8:	e02e      	b.n	8001958 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	4053      	eors	r3, r2
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	88ba      	ldrh	r2, [r7, #4]
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4053      	eors	r3, r2
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	4053      	eors	r3, r2
 8001910:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001918:	b29b      	uxth	r3, r3
 800191a:	80fb      	strh	r3, [r7, #6]
				break;
 800191c:	e01c      	b.n	8001958 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001924:	b29b      	uxth	r3, r3
 8001926:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8001928:	88bb      	ldrh	r3, [r7, #4]
 800192a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800192e:	b29b      	uxth	r3, r3
 8001930:	80bb      	strh	r3, [r7, #4]
				break;
 8001932:	e011      	b.n	8001958 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	4053      	eors	r3, r2
 800193a:	80fb      	strh	r3, [r7, #6]
 800193c:	88ba      	ldrh	r2, [r7, #4]
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	4053      	eors	r3, r2
 8001942:	80bb      	strh	r3, [r7, #4]
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	88bb      	ldrh	r3, [r7, #4]
 8001948:	4053      	eors	r3, r2
 800194a:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001952:	b29b      	uxth	r3, r3
 8001954:	80bb      	strh	r3, [r7, #4]
				break;
 8001956:	bf00      	nop
		}

		switch (color)
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d051      	beq.n	8001a02 <SSD1306_draw_pixel+0x15a>
 800195e:	2b02      	cmp	r3, #2
 8001960:	dc75      	bgt.n	8001a4e <SSD1306_draw_pixel+0x1a6>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d026      	beq.n	80019b4 <SSD1306_draw_pixel+0x10c>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d171      	bne.n	8001a4e <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <SSD1306_draw_pixel+0x1b0>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001972:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da00      	bge.n	800197c <SSD1306_draw_pixel+0xd4>
 800197a:	3307      	adds	r3, #7
 800197c:	10db      	asrs	r3, r3, #3
 800197e:	b218      	sxth	r0, r3
 8001980:	4603      	mov	r3, r0
 8001982:	01db      	lsls	r3, r3, #7
 8001984:	440b      	add	r3, r1
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b25a      	sxtb	r2, r3
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	2101      	movs	r1, #1
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	b25b      	sxtb	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b25c      	sxtb	r4, r3
 800199e:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <SSD1306_draw_pixel+0x1b0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80019a6:	4602      	mov	r2, r0
 80019a8:	01d2      	lsls	r2, r2, #7
 80019aa:	440a      	add	r2, r1
 80019ac:	4413      	add	r3, r2
 80019ae:	b2e2      	uxtb	r2, r4
 80019b0:	701a      	strb	r2, [r3, #0]
				break;
 80019b2:	e04c      	b.n	8001a4e <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <SSD1306_draw_pixel+0x1b0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80019bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da00      	bge.n	80019c6 <SSD1306_draw_pixel+0x11e>
 80019c4:	3307      	adds	r3, #7
 80019c6:	10db      	asrs	r3, r3, #3
 80019c8:	b218      	sxth	r0, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	01db      	lsls	r3, r3, #7
 80019ce:	440b      	add	r3, r1
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25a      	sxtb	r2, r3
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	b25c      	sxtb	r4, r3
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <SSD1306_draw_pixel+0x1b0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80019f4:	4602      	mov	r2, r0
 80019f6:	01d2      	lsls	r2, r2, #7
 80019f8:	440a      	add	r2, r1
 80019fa:	4413      	add	r3, r2
 80019fc:	b2e2      	uxtb	r2, r4
 80019fe:	701a      	strb	r2, [r3, #0]
				break;
 8001a00:	e025      	b.n	8001a4e <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <SSD1306_draw_pixel+0x1b0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001a0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da00      	bge.n	8001a14 <SSD1306_draw_pixel+0x16c>
 8001a12:	3307      	adds	r3, #7
 8001a14:	10db      	asrs	r3, r3, #3
 8001a16:	b218      	sxth	r0, r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	440b      	add	r3, r1
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	4053      	eors	r3, r2
 8001a34:	b25c      	sxtb	r4, r3
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <SSD1306_draw_pixel+0x1b0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001a3e:	4602      	mov	r2, r0
 8001a40:	01d2      	lsls	r2, r2, #7
 8001a42:	440a      	add	r2, r1
 8001a44:	4413      	add	r3, r2
 8001a46:	b2e2      	uxtb	r2, r4
 8001a48:	701a      	strb	r2, [r3, #0]
				break;
 8001a4a:	e000      	b.n	8001a4e <SSD1306_draw_pixel+0x1a6>
		}
	}
 8001a4c:	bf00      	nop
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000210 	.word	0x20000210

08001a5c <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SSD1306_display_clear+0x18>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 ff00 	bl	8005870 <memset>
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000210 	.word	0x20000210

08001a78 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001a78:	b490      	push	{r4, r7}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	80fb      	strh	r3, [r7, #6]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80bb      	strh	r3, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8001a96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db75      	blt.n	8001b8a <SSD1306_draw_fast_hline_internal+0x112>
 8001a9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aa2:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa4:	dc71      	bgt.n	8001b8a <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	da06      	bge.n	8001abc <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	807b      	strh	r3, [r7, #2]
			x = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8001abc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2b80      	cmp	r3, #128	; 0x80
 8001ac8:	dd04      	ble.n	8001ad4 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8001ad4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd56      	ble.n	8001b8a <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <SSD1306_draw_fast_hline_internal+0x120>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da00      	bge.n	8001aea <SSD1306_draw_fast_hline_internal+0x72>
 8001ae8:	3307      	adds	r3, #7
 8001aea:	10db      	asrs	r3, r3, #3
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	01d9      	lsls	r1, r3, #7
 8001af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af4:	440b      	add	r3, r1
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	2201      	movs	r2, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8001b08:	883b      	ldrh	r3, [r7, #0]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d034      	beq.n	8001b78 <SSD1306_draw_fast_hline_internal+0x100>
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	dc3c      	bgt.n	8001b8c <SSD1306_draw_fast_hline_internal+0x114>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d013      	beq.n	8001b3e <SSD1306_draw_fast_hline_internal+0xc6>
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d138      	bne.n	8001b8c <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 8001b1a:	e007      	b.n	8001b2c <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60fa      	str	r2, [r7, #12]
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	7afa      	ldrb	r2, [r7, #11]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	3a01      	subs	r2, #1
 8001b34:	b292      	uxth	r2, r2
 8001b36:	807a      	strh	r2, [r7, #2]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ef      	bne.n	8001b1c <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8001b3c:	e026      	b.n	8001b8c <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8001b44:	e007      	b.n	8001b56 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	60fa      	str	r2, [r7, #12]
 8001b4c:	7819      	ldrb	r1, [r3, #0]
 8001b4e:	7afa      	ldrb	r2, [r7, #11]
 8001b50:	400a      	ands	r2, r1
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001b56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	807a      	strh	r2, [r7, #2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ef      	bne.n	8001b46 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8001b66:	e011      	b.n	8001b8c <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60fa      	str	r2, [r7, #12]
 8001b6e:	7819      	ldrb	r1, [r3, #0]
 8001b70:	7afa      	ldrb	r2, [r7, #11]
 8001b72:	404a      	eors	r2, r1
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001b78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	b292      	uxth	r2, r2
 8001b82:	807a      	strh	r2, [r7, #2]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ef      	bne.n	8001b68 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8001b88:	e000      	b.n	8001b8c <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8001b8a:	bf00      	nop
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc90      	pop	{r4, r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000210 	.word	0x20000210

08001b9c <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	80fb      	strh	r3, [r7, #6]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80bb      	strh	r3, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8001bbe:	f000 f9a7 	bl	8001f10 <SSD1306_get_rotation>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d033      	beq.n	8001c30 <SSD1306_draw_fast_vline+0x94>
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	dc45      	bgt.n	8001c58 <SSD1306_draw_fast_vline+0xbc>
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d002      	beq.n	8001bd6 <SSD1306_draw_fast_vline+0x3a>
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d01b      	beq.n	8001c0c <SSD1306_draw_fast_vline+0x70>
 8001bd4:	e040      	b.n	8001c58 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	4053      	eors	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
 8001be2:	88ba      	ldrh	r2, [r7, #4]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4053      	eors	r3, r2
 8001be8:	80bb      	strh	r3, [r7, #4]
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	88bb      	ldrh	r3, [r7, #4]
 8001bee:	4053      	eors	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	80fb      	strh	r3, [r7, #6]
  			break;
 8001c0a:	e025      	b.n	8001c58 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8001c20:	88ba      	ldrh	r2, [r7, #4]
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001c2e:	e013      	b.n	8001c58 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	4053      	eors	r3, r2
 8001c3a:	80fb      	strh	r3, [r7, #6]
 8001c3c:	88ba      	ldrh	r2, [r7, #4]
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4053      	eors	r3, r2
 8001c42:	80bb      	strh	r3, [r7, #4]
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	88bb      	ldrh	r3, [r7, #4]
 8001c48:	4053      	eors	r3, r2
 8001c4a:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8001c4c:	88bb      	ldrh	r3, [r7, #4]
 8001c4e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001c56:	bf00      	nop
	}

	if (bSwap)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8001c5e:	883b      	ldrh	r3, [r7, #0]
 8001c60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c64:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c68:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001c6c:	f7ff ff04 	bl	8001a78 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8001c70:	e008      	b.n	8001c84 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c7c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001c80:	f000 f804 	bl	8001c8c <SSD1306_draw_fast_vline_internal>
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}

08001c8c <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8001c8c:	b490      	push	{r4, r7}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80bb      	strh	r3, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	807b      	strh	r3, [r7, #2]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8001caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f2c0 80da 	blt.w	8001e68 <SSD1306_draw_fast_vline_internal+0x1dc>
 8001cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cba:	f300 80d5 	bgt.w	8001e68 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 8001cbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da06      	bge.n	8001cd4 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	88bb      	ldrh	r3, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8001cd4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cdc:	4413      	add	r3, r2
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	dd04      	ble.n	8001cec <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8001cec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f340 80b9 	ble.w	8001e68 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	737b      	strb	r3, [r7, #13]
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	7b7a      	ldrb	r2, [r7, #13]
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	01d1      	lsls	r1, r2, #7
 8001d0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d0e:	440a      	add	r2, r1
 8001d10:	4413      	add	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8001d14:	7b7b      	ldrb	r3, [r7, #13]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d040      	beq.n	8001da4 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	f1c3 0308 	rsb	r3, r3, #8
 8001d28:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8001d32:	7dfa      	ldrb	r2, [r7, #23]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20b      	bcs.n	8001d52 <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	22ff      	movs	r2, #255	; 0xff
 8001d42:	fa42 f303 	asr.w	r3, r2, r3
 8001d46:	b25a      	sxtb	r2, r3
 8001d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8001d52:	883b      	ldrh	r3, [r7, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d01a      	beq.n	8001d8e <SSD1306_draw_fast_vline_internal+0x102>
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	dc20      	bgt.n	8001d9e <SSD1306_draw_fast_vline_internal+0x112>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <SSD1306_draw_fast_vline_internal+0xe8>
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d11c      	bne.n	8001d9e <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	7bbb      	ldrb	r3, [r7, #14]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	701a      	strb	r2, [r3, #0]
						break;
 8001d72:	e014      	b.n	8001d9e <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b25a      	sxtb	r2, r3
 8001d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	b25b      	sxtb	r3, r3
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	701a      	strb	r2, [r3, #0]
						break;
 8001d8c:	e007      	b.n	8001d9e <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	4053      	eors	r3, r2
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	701a      	strb	r2, [r3, #0]
						break;
 8001d9c:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	3380      	adds	r3, #128	; 0x80
 8001da2:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8001da4:	7dfa      	ldrb	r2, [r7, #23]
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d35d      	bcc.n	8001e68 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8001dac:	7dfa      	ldrb	r2, [r7, #23]
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d925      	bls.n	8001e06 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8001dba:	883b      	ldrh	r3, [r7, #0]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d10f      	bne.n	8001de0 <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3380      	adds	r3, #128	; 0x80
 8001dd0:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	3b08      	subs	r3, #8
 8001dd6:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b07      	cmp	r3, #7
 8001ddc:	d8f0      	bhi.n	8001dc0 <SSD1306_draw_fast_vline_internal+0x134>
 8001dde:	e012      	b.n	8001e06 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8001de0:	883b      	ldrh	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SSD1306_draw_fast_vline_internal+0x15e>
 8001de6:	23ff      	movs	r3, #255	; 0xff
 8001de8:	e000      	b.n	8001dec <SSD1306_draw_fast_vline_internal+0x160>
 8001dea:	2300      	movs	r3, #0
 8001dec:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	7b3a      	ldrb	r2, [r7, #12]
 8001df2:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	3380      	adds	r3, #128	; 0x80
 8001df8:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	3b08      	subs	r3, #8
 8001dfe:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b07      	cmp	r3, #7
 8001e04:	d8f3      	bhi.n	8001dee <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02d      	beq.n	8001e68 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <SSD1306_draw_fast_vline_internal+0x1f0>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8001e1c:	883b      	ldrh	r3, [r7, #0]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d01a      	beq.n	8001e58 <SSD1306_draw_fast_vline_internal+0x1cc>
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	dc21      	bgt.n	8001e6a <SSD1306_draw_fast_vline_internal+0x1de>
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <SSD1306_draw_fast_vline_internal+0x1b2>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d11d      	bne.n	8001e6a <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	701a      	strb	r2, [r3, #0]
							break;
 8001e3c:	e015      	b.n	8001e6a <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b25a      	sxtb	r2, r3
 8001e44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	701a      	strb	r2, [r3, #0]
							break;
 8001e56:	e008      	b.n	8001e6a <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	4053      	eors	r3, r2
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	701a      	strb	r2, [r3, #0]
							break;
 8001e66:	e000      	b.n	8001e6a <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8001e68:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc90      	pop	{r4, r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000210 	.word	0x20000210
 8001e78:	08008b5c 	.word	0x08008b5c
 8001e7c:	08008b64 	.word	0x08008b64

08001e80 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8001e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8a:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001e8c:	2022      	movs	r0, #34	; 0x22
 8001e8e:	f7ff fc6f 	bl	8001770 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fc6c 	bl	8001770 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001e98:	20ff      	movs	r0, #255	; 0xff
 8001e9a:	f7ff fc69 	bl	8001770 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001e9e:	2021      	movs	r0, #33	; 0x21
 8001ea0:	f7ff fc66 	bl	8001770 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fc63 	bl	8001770 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001eaa:	207f      	movs	r0, #127	; 0x7f
 8001eac:	f7ff fc60 	bl	8001770 <SSD1306_send_com>

	platform_write(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SSD1306_display_repaint+0x48>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2040      	movs	r0, #64	; 0x40
 8001eba:	f7ff fc3d 	bl	8001738 <platform_write>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000210 	.word	0x20000210

08001ecc <SSD1306_display_invert>:
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
            white, SSD1306_WHITE (value 1) will draw black.
*/
void SSD1306_display_invert(bool i)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
	SSD1306_send_com(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SSD1306_display_invert+0x14>
 8001edc:	23a7      	movs	r3, #167	; 0xa7
 8001ede:	e000      	b.n	8001ee2 <SSD1306_display_invert+0x16>
 8001ee0:	23a6      	movs	r3, #166	; 0xa6
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fc44 	bl	8001770 <SSD1306_send_com>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <SSD1306_set_rotation+0x1c>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	7013      	strb	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000214 	.word	0x20000214

08001f10 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	return rotation;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <SSD1306_get_rotation+0x14>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000214 	.word	0x20000214

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0a2      	sub	sp, #136	; 0x88
 8001f2c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	dcFilter RedFilter = {0, 0, 0};
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	673b      	str	r3, [r7, #112]	; 0x70
	mean_diff_filter_t IrMeanFilter = {
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	225c      	movs	r2, #92	; 0x5c
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fc91 	bl	8005870 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4e:	f000 fda7 	bl	8002aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f52:	f000 f889 	bl	8002068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f56:	f000 f9c5 	bl	80022e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f5a:	f000 f94b 	bl	80021f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001f5e:	f000 f997 	bl	8002290 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001f62:	f000 f919 	bl	8002198 <MX_I2C3_Init>
  MX_I2C1_Init();
 8001f66:	f000 f8e9 	bl	800213c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MAX30100_Init();
 8001f6a:	f7ff fbb1 	bl	80016d0 <MAX30100_Init>
  HAL_TIM_Base_Start(&htim2);
 8001f6e:	4835      	ldr	r0, [pc, #212]	; (8002044 <main+0x11c>)
 8001f70:	f002 fd92 	bl	8004a98 <HAL_TIM_Base_Start>
  MX_USART2_UART_Init();
 8001f74:	f000 f98c 	bl	8002290 <MX_USART2_UART_Init>
  SSD1306_Init();
 8001f78:	f7ff fc0a 	bl	8001790 <SSD1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ReadOperation();
 8001f7c:	f7ff faac 	bl	80014d8 <ReadOperation>
	  //FilteredIrLED = DCRemoval(IrLED, IRFilter, 0.95);
	  DCFilteredRedLED = DCRemoval(&IrLED, &RedFilter, 0.95);
 8001f80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f84:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002048 <main+0x120>
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4830      	ldr	r0, [pc, #192]	; (800204c <main+0x124>)
 8001f8c:	f7ff f9b4 	bl	80012f8 <DCRemoval>
 8001f90:	eef0 7a40 	vmov.f32	s15, s0
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <main+0x128>)
 8001f96:	edc3 7a00 	vstr	s15, [r3]
	  MeanFilteredRedLED = meanDiff(DCFilteredRedLED, &IrMeanFilter);
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <main+0x128>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	f7ff f9d9 	bl	8001360 <meanDiff>
 8001fae:	eef0 7a40 	vmov.f32	s15, s0
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <main+0x12c>)
 8001fb4:	edc3 7a00 	vstr	s15, [r3]
	  ButterworthFilteredIrLED = (int16_t)-ButterworthFilter(MeanFilteredRedLED, &IrButterworthFilter);
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <main+0x12c>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	f7ff fa3b 	bl	8001440 <ButterworthFilter>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	eef1 7a67 	vneg.f32	s15, s15
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	ee17 3a90 	vmov	r3, s15
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <main+0x130>)
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
	  uint16_t BeatValue = BeatDetection(ButterworthFilteredIrLED);
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <main+0x130>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	f7ff fa80 	bl	80014f8 <BeatDetection>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  if (BeatValue>0)
 8001ffe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ba      	beq.n	8001f7c <main+0x54>
	  {
		  BeatValue2 = BeatValue;
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <main+0x134>)
 8002008:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800200c:	8013      	strh	r3, [r2, #0]
		  sprintf(data, "BPM:%d\r\n", BeatValue2);
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <main+0x134>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4912      	ldr	r1, [pc, #72]	; (8002060 <main+0x138>)
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <main+0x13c>)
 8002018:	f004 f98c 	bl	8006334 <siprintf>
		  SSD1306_display_clear();
 800201c:	f7ff fd1e 	bl	8001a5c <SSD1306_display_clear>
		  GFX_draw_string(0, 32, (unsigned char *) data, WHITE, BLACK, 1, 1);
 8002020:	2301      	movs	r3, #1
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2301      	movs	r3, #1
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2300      	movs	r3, #0
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2301      	movs	r3, #1
 800202e:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <main+0x13c>)
 8002030:	2120      	movs	r1, #32
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff f8ac 	bl	8001190 <GFX_draw_string>
		  SSD1306_display_invert(false);
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff ff47 	bl	8001ecc <SSD1306_display_invert>
		  SSD1306_display_repaint();
 800203e:	f7ff ff1f 	bl	8001e80 <SSD1306_display_repaint>
  {
 8002042:	e79b      	b.n	8001f7c <main+0x54>
 8002044:	200002c0 	.word	0x200002c0
 8002048:	3f733333 	.word	0x3f733333
 800204c:	2000034c 	.word	0x2000034c
 8002050:	2000037c 	.word	0x2000037c
 8002054:	20000380 	.word	0x20000380
 8002058:	20000384 	.word	0x20000384
 800205c:	20000388 	.word	0x20000388
 8002060:	08008650 	.word	0x08008650
 8002064:	2000038c 	.word	0x2000038c

08002068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b094      	sub	sp, #80	; 0x50
 800206c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206e:	f107 0320 	add.w	r3, r7, #32
 8002072:	2230      	movs	r2, #48	; 0x30
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fbfa 	bl	8005870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <SystemClock_Config+0xcc>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <SystemClock_Config+0xcc>)
 8002096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <SystemClock_Config+0xcc>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <SystemClock_Config+0xd0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a21      	ldr	r2, [pc, #132]	; (8002138 <SystemClock_Config+0xd0>)
 80020b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <SystemClock_Config+0xd0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020cc:	2310      	movs	r3, #16
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d0:	2302      	movs	r3, #2
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020d8:	2308      	movs	r3, #8
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020e0:	2304      	movs	r3, #4
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80020e4:	2308      	movs	r3, #8
 80020e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 ffeb 	bl	80040c8 <HAL_RCC_OscConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020f8:	f000 fa53 	bl	80025a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fc:	230f      	movs	r3, #15
 80020fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002100:	2302      	movs	r3, #2
 8002102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800210c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800210e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2103      	movs	r1, #3
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fa4c 	bl	80045b8 <HAL_RCC_ClockConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002126:	f000 fa3c 	bl	80025a2 <Error_Handler>
  }
}
 800212a:	bf00      	nop
 800212c:	3750      	adds	r7, #80	; 0x50
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40007000 	.word	0x40007000

0800213c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_I2C1_Init+0x50>)
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <MX_I2C1_Init+0x54>)
 8002144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_I2C1_Init+0x50>)
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <MX_I2C1_Init+0x58>)
 800214a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_I2C1_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_I2C1_Init+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_I2C1_Init+0x50>)
 800215a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <MX_I2C1_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_I2C1_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <MX_I2C1_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_I2C1_Init+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_I2C1_Init+0x50>)
 800217a:	f000 ffe5 	bl	8003148 <HAL_I2C_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002184:	f000 fa0d 	bl	80025a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000218 	.word	0x20000218
 8002190:	40005400 	.word	0x40005400
 8002194:	00061a80 	.word	0x00061a80

08002198 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_I2C3_Init+0x50>)
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <MX_I2C3_Init+0x54>)
 80021a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_I2C3_Init+0x58>)
 80021a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_I2C3_Init+0x50>)
 80021d6:	f000 ffb7 	bl	8003148 <HAL_I2C_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021e0:	f000 f9df 	bl	80025a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2000026c 	.word	0x2000026c
 80021ec:	40005c00 	.word	0x40005c00
 80021f0:	00061a80 	.word	0x00061a80

080021f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002208:	463b      	mov	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <MX_TIM2_Init+0x98>)
 8002212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_TIM2_Init+0x98>)
 800221a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800221e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_TIM2_Init+0x98>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <MX_TIM2_Init+0x98>)
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_TIM2_Init+0x98>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_TIM2_Init+0x98>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800223a:	4814      	ldr	r0, [pc, #80]	; (800228c <MX_TIM2_Init+0x98>)
 800223c:	f002 fbdc 	bl	80049f8 <HAL_TIM_Base_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002246:	f000 f9ac 	bl	80025a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	4619      	mov	r1, r3
 8002256:	480d      	ldr	r0, [pc, #52]	; (800228c <MX_TIM2_Init+0x98>)
 8002258:	f002 fd80 	bl	8004d5c <HAL_TIM_ConfigClockSource>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002262:	f000 f99e 	bl	80025a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <MX_TIM2_Init+0x98>)
 8002274:	f002 ff86 	bl	8005184 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800227e:	f000 f990 	bl	80025a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200002c0 	.word	0x200002c0

08002290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_USART2_UART_Init+0x50>)
 8002298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c8:	f002 ffde 	bl	8005288 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022d2:	f000 f966 	bl	80025a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000308 	.word	0x20000308
 80022e0:	40004400 	.word	0x40004400

080022e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	4b9d      	ldr	r3, [pc, #628]	; (8002574 <MX_GPIO_Init+0x290>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a9c      	ldr	r2, [pc, #624]	; (8002574 <MX_GPIO_Init+0x290>)
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b9a      	ldr	r3, [pc, #616]	; (8002574 <MX_GPIO_Init+0x290>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	4b96      	ldr	r3, [pc, #600]	; (8002574 <MX_GPIO_Init+0x290>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a95      	ldr	r2, [pc, #596]	; (8002574 <MX_GPIO_Init+0x290>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b93      	ldr	r3, [pc, #588]	; (8002574 <MX_GPIO_Init+0x290>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <MX_GPIO_Init+0x290>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a8e      	ldr	r2, [pc, #568]	; (8002574 <MX_GPIO_Init+0x290>)
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <MX_GPIO_Init+0x290>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <MX_GPIO_Init+0x290>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <MX_GPIO_Init+0x290>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <MX_GPIO_Init+0x290>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b81      	ldr	r3, [pc, #516]	; (8002574 <MX_GPIO_Init+0x290>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a80      	ldr	r2, [pc, #512]	; (8002574 <MX_GPIO_Init+0x290>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b7e      	ldr	r3, [pc, #504]	; (8002574 <MX_GPIO_Init+0x290>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	4b7a      	ldr	r3, [pc, #488]	; (8002574 <MX_GPIO_Init+0x290>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a79      	ldr	r2, [pc, #484]	; (8002574 <MX_GPIO_Init+0x290>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b77      	ldr	r3, [pc, #476]	; (8002574 <MX_GPIO_Init+0x290>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2108      	movs	r1, #8
 80023a6:	4874      	ldr	r0, [pc, #464]	; (8002578 <MX_GPIO_Init+0x294>)
 80023a8:	f000 fe82 	bl	80030b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2101      	movs	r1, #1
 80023b0:	4872      	ldr	r0, [pc, #456]	; (800257c <MX_GPIO_Init+0x298>)
 80023b2:	f000 fe7d 	bl	80030b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023b6:	2200      	movs	r2, #0
 80023b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80023bc:	4870      	ldr	r0, [pc, #448]	; (8002580 <MX_GPIO_Init+0x29c>)
 80023be:	f000 fe77 	bl	80030b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023c2:	2304      	movs	r3, #4
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	4619      	mov	r1, r3
 80023d4:	4868      	ldr	r0, [pc, #416]	; (8002578 <MX_GPIO_Init+0x294>)
 80023d6:	f000 fce7 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80023da:	2308      	movs	r3, #8
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2301      	movs	r3, #1
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4861      	ldr	r0, [pc, #388]	; (8002578 <MX_GPIO_Init+0x294>)
 80023f2:	f000 fcd9 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80023f6:	2332      	movs	r3, #50	; 0x32
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80023fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	485b      	ldr	r0, [pc, #364]	; (8002578 <MX_GPIO_Init+0x294>)
 800240c:	f000 fccc 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002410:	2301      	movs	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4855      	ldr	r0, [pc, #340]	; (800257c <MX_GPIO_Init+0x298>)
 8002428:	f000 fcbe 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800242c:	2308      	movs	r3, #8
 800242e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243c:	2305      	movs	r3, #5
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	484d      	ldr	r0, [pc, #308]	; (800257c <MX_GPIO_Init+0x298>)
 8002448:	f000 fcae 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800244c:	2310      	movs	r3, #16
 800244e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800245c:	2306      	movs	r3, #6
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4847      	ldr	r0, [pc, #284]	; (8002584 <MX_GPIO_Init+0x2a0>)
 8002468:	f000 fc9e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800246c:	23e0      	movs	r3, #224	; 0xe0
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800247c:	2305      	movs	r3, #5
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4619      	mov	r1, r3
 8002486:	483f      	ldr	r0, [pc, #252]	; (8002584 <MX_GPIO_Init+0x2a0>)
 8002488:	f000 fc8e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800248c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800249e:	2305      	movs	r3, #5
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4837      	ldr	r0, [pc, #220]	; (8002588 <MX_GPIO_Init+0x2a4>)
 80024aa:	f000 fc7d 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80024ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80024b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	4619      	mov	r1, r3
 80024c6:	482e      	ldr	r0, [pc, #184]	; (8002580 <MX_GPIO_Init+0x29c>)
 80024c8:	f000 fc6e 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80024cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80024d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024de:	2306      	movs	r3, #6
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 031c 	add.w	r3, r7, #28
 80024e6:	4619      	mov	r1, r3
 80024e8:	4824      	ldr	r0, [pc, #144]	; (800257c <MX_GPIO_Init+0x298>)
 80024ea:	f000 fc5d 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80024ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	4820      	ldr	r0, [pc, #128]	; (8002584 <MX_GPIO_Init+0x2a0>)
 8002504:	f000 fc50 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002508:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800250c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800251a:	230a      	movs	r3, #10
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	4619      	mov	r1, r3
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <MX_GPIO_Init+0x2a0>)
 8002526:	f000 fc3f 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800252a:	2320      	movs	r3, #32
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	4810      	ldr	r0, [pc, #64]	; (8002580 <MX_GPIO_Init+0x29c>)
 800253e:	f000 fc33 	bl	8002da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002542:	2340      	movs	r3, #64	; 0x40
 8002544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002546:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800254a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254c:	2301      	movs	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	480a      	ldr	r0, [pc, #40]	; (8002580 <MX_GPIO_Init+0x29c>)
 8002558:	f000 fc26 	bl	8002da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2100      	movs	r1, #0
 8002560:	2017      	movs	r0, #23
 8002562:	f000 fbea 	bl	8002d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002566:	2017      	movs	r0, #23
 8002568:	f000 fc03 	bl	8002d72 <HAL_NVIC_EnableIRQ>

}
 800256c:	bf00      	nop
 800256e:	3730      	adds	r7, #48	; 0x30
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	40021000 	.word	0x40021000
 800257c:	40020800 	.word	0x40020800
 8002580:	40020c00 	.word	0x40020c00
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400

0800258c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
	;
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a6:	b672      	cpsid	i
}
 80025a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025aa:	e7fe      	b.n	80025aa <Error_Handler+0x8>

080025ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_MspInit+0x4c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_MspInit+0x4c>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_MspInit+0x4c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025ea:	2007      	movs	r0, #7
 80025ec:	f000 fb9a 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a42      	ldr	r2, [pc, #264]	; (8002724 <HAL_I2C_MspInit+0x128>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d12d      	bne.n	800267a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a40      	ldr	r2, [pc, #256]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800263a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002640:	2312      	movs	r3, #18
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800264c:	2304      	movs	r3, #4
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	4835      	ldr	r0, [pc, #212]	; (800272c <HAL_I2C_MspInit+0x130>)
 8002658:	f000 fba6 	bl	8002da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a30      	ldr	r2, [pc, #192]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002678:	e050      	b.n	800271c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <HAL_I2C_MspInit+0x134>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d14b      	bne.n	800271c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a26      	ldr	r2, [pc, #152]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6313      	str	r3, [r2, #48]	; 0x30
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c2:	2312      	movs	r3, #18
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026ce:	2304      	movs	r3, #4
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d2:	f107 031c 	add.w	r3, r7, #28
 80026d6:	4619      	mov	r1, r3
 80026d8:	4816      	ldr	r0, [pc, #88]	; (8002734 <HAL_I2C_MspInit+0x138>)
 80026da:	f000 fb65 	bl	8002da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e4:	2312      	movs	r3, #18
 80026e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026f0:	2304      	movs	r3, #4
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	4619      	mov	r1, r3
 80026fa:	480f      	ldr	r0, [pc, #60]	; (8002738 <HAL_I2C_MspInit+0x13c>)
 80026fc:	f000 fb54 	bl	8002da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 800270a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_I2C_MspInit+0x12c>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
}
 800271c:	bf00      	nop
 800271e:	3730      	adds	r7, #48	; 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40005400 	.word	0x40005400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400
 8002730:	40005c00 	.word	0x40005c00
 8002734:	40020800 	.word	0x40020800
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d115      	bne.n	800277a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_TIM_Base_MspInit+0x48>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_TIM_Base_MspInit+0x48>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_TIM_Base_MspInit+0x48>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	201c      	movs	r0, #28
 8002770:	f000 fae3 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002774:	201c      	movs	r0, #28
 8002776:	f000 fafc 	bl	8002d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_UART_MspInit+0x84>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12b      	bne.n	8002802 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_UART_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027e2:	230c      	movs	r3, #12
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027f2:	2307      	movs	r3, #7
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <HAL_UART_MspInit+0x8c>)
 80027fe:	f000 fad3 	bl	8002da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40004400 	.word	0x40004400
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800281c:	e7fe      	b.n	800281c <NMI_Handler+0x4>

0800281e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <MemManage_Handler+0x4>

0800282a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282e:	e7fe      	b.n	800282e <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	e7fe      	b.n	8002834 <UsageFault_Handler+0x4>

08002836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f000 f96e 	bl	8002b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <EXTI9_5_IRQHandler+0x18>)
 8002876:	f000 fc34 	bl	80030e2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800287a:	2040      	movs	r0, #64	; 0x40
 800287c:	f000 fc4c 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40020c00 	.word	0x40020c00

08002888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <TIM2_IRQHandler+0x10>)
 800288e:	f002 f95d 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200002c0 	.word	0x200002c0

0800289c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_kill>:

int _kill(int pid, int sig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028b6:	f002 ffa9 	bl	800580c <__errno>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2216      	movs	r2, #22
 80028be:	601a      	str	r2, [r3, #0]
	return -1;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_exit>:

void _exit (int status)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ffe7 	bl	80028ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80028de:	e7fe      	b.n	80028de <_exit+0x12>

080028e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e00a      	b.n	8002908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028f2:	f3af 8000 	nop.w
 80028f6:	4601      	mov	r1, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	b2ca      	uxtb	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf0      	blt.n	80028f2 <_read+0x12>
	}

return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e009      	b.n	8002940 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	60ba      	str	r2, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	dbf1      	blt.n	800292c <_write+0x12>
	}
	return len;
 8002948:	687b      	ldr	r3, [r7, #4]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_close>:

int _close(int file)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	return -1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297a:	605a      	str	r2, [r3, #4]
	return 0;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_isatty>:

int _isatty(int file)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
	return 1;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
	return 0;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <_sbrk+0x5c>)
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <_sbrk+0x60>)
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <_sbrk+0x64>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <_sbrk+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ec:	f002 ff0e 	bl	800580c <__errno>
 80029f0:	4603      	mov	r3, r0
 80029f2:	220c      	movs	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e009      	b.n	8002a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <_sbrk+0x64>)
 8002a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20020000 	.word	0x20020000
 8002a1c:	00000400 	.word	0x00000400
 8002a20:	200003c0 	.word	0x200003c0
 8002a24:	200003d8 	.word	0x200003d8

08002a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <SystemInit+0x20>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <SystemInit+0x20>)
 8002a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a52:	490e      	ldr	r1, [pc, #56]	; (8002a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a54:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a68:	4c0b      	ldr	r4, [pc, #44]	; (8002a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a76:	f7ff ffd7 	bl	8002a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f002 fecd 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7ff fa53 	bl	8001f28 <main>
  bx  lr    
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a90:	08008f6c 	.word	0x08008f6c
  ldr r2, =_sbss
 8002a94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a98:	200003d8 	.word	0x200003d8

08002a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_Init+0x40>)
 8002aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_Init+0x40>)
 8002ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_Init+0x40>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 f92b 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f808 	bl	8002ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad4:	f7ff fd6a 	bl	80025ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_InitTick+0x54>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x58>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f943 	bl	8002d8e <HAL_SYSTICK_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00e      	b.n	8002b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d80a      	bhi.n	8002b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f000 f90b 	bl	8002d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b24:	4a06      	ldr	r2, [pc, #24]	; (8002b40 <HAL_InitTick+0x5c>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000008 	.word	0x20000008
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_IncTick+0x20>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x24>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_IncTick+0x24>)
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000008 	.word	0x20000008
 8002b68:	200003c4 	.word	0x200003c4

08002b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_GetTick+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	200003c4 	.word	0x200003c4

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <__NVIC_EnableIRQ+0x38>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf0:	d301      	bcc.n	8002cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <SysTick_Config+0x40>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f7ff ff8e 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <SysTick_Config+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <SysTick_Config+0x40>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010

08002d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff29 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4c:	f7ff ff3e 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff8e 	bl	8002c78 <NVIC_EncodePriority>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff5d 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff31 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ffa2 	bl	8002ce0 <SysTick_Config>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e159      	b.n	8003078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8148 	bne.w	8003072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80a2 	beq.w	8003072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_GPIO_Init+0x2e8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a49      	ldr	r2, [pc, #292]	; (8003098 <HAL_GPIO_Init+0x2f0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <HAL_GPIO_Init+0x202>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_GPIO_Init+0x2f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0x1fe>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_GPIO_Init+0x2f8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_GPIO_Init+0x1fa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_GPIO_Init+0x2fc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x1f6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <HAL_GPIO_Init+0x300>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_GPIO_Init+0x1f2>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e008      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e004      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x204>
 8002faa:	2300      	movs	r3, #0
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f002 0203 	and.w	r2, r2, #3
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fbc:	4935      	ldr	r1, [pc, #212]	; (8003094 <HAL_GPIO_Init+0x2ec>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <HAL_GPIO_Init+0x304>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_GPIO_Init+0x304>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <HAL_GPIO_Init+0x304>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_GPIO_Init+0x304>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_GPIO_Init+0x304>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	f67f aea2 	bls.w	8002dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40013800 	.word	0x40013800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
 80030bc:	4613      	mov	r3, r2
 80030be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c0:	787b      	ldrb	r3, [r7, #1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030cc:	e003      	b.n	80030d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ce:	887b      	ldrh	r3, [r7, #2]
 80030d0:	041a      	lsls	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	619a      	str	r2, [r3, #24]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030f4:	887a      	ldrh	r2, [r7, #2]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4013      	ands	r3, r2
 80030fa:	041a      	lsls	r2, r3, #16
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	43d9      	mvns	r1, r3
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	400b      	ands	r3, r1
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	619a      	str	r2, [r3, #24]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fa28 	bl	800258c <HAL_GPIO_EXTI_Callback>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e12b      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fa44 	bl	80025fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800319a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ac:	f001 fbfc 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a81      	ldr	r2, [pc, #516]	; (80033bc <HAL_I2C_Init+0x274>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d807      	bhi.n	80031cc <HAL_I2C_Init+0x84>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a80      	ldr	r2, [pc, #512]	; (80033c0 <HAL_I2C_Init+0x278>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e006      	b.n	80031da <HAL_I2C_Init+0x92>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a7d      	ldr	r2, [pc, #500]	; (80033c4 <HAL_I2C_Init+0x27c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	bf94      	ite	ls
 80031d4:	2301      	movls	r3, #1
 80031d6:	2300      	movhi	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0e7      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a78      	ldr	r2, [pc, #480]	; (80033c8 <HAL_I2C_Init+0x280>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0c9b      	lsrs	r3, r3, #18
 80031ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a6a      	ldr	r2, [pc, #424]	; (80033bc <HAL_I2C_Init+0x274>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d802      	bhi.n	800321c <HAL_I2C_Init+0xd4>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	e009      	b.n	8003230 <HAL_I2C_Init+0xe8>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a69      	ldr	r2, [pc, #420]	; (80033cc <HAL_I2C_Init+0x284>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	3301      	adds	r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	495c      	ldr	r1, [pc, #368]	; (80033bc <HAL_I2C_Init+0x274>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d819      	bhi.n	8003284 <HAL_I2C_Init+0x13c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e59      	subs	r1, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fbb1 f3f3 	udiv	r3, r1, r3
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003264:	400b      	ands	r3, r1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_I2C_Init+0x138>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e59      	subs	r1, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fbb1 f3f3 	udiv	r3, r1, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327e:	e051      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003280:	2304      	movs	r3, #4
 8003282:	e04f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <HAL_I2C_Init+0x168>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_I2C_Init+0x18e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x196>
 80032da:	2301      	movs	r3, #1
 80032dc:	e022      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_I2C_Init+0x1bc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e58      	subs	r0, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	440b      	add	r3, r1
 80032f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6809      	ldr	r1, [r1, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6911      	ldr	r1, [r2, #16]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	000186a0 	.word	0x000186a0
 80033c0:	001e847f 	.word	0x001e847f
 80033c4:	003d08ff 	.word	0x003d08ff
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	4608      	mov	r0, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	461a      	mov	r2, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	817b      	strh	r3, [r7, #10]
 80033e2:	460b      	mov	r3, r1
 80033e4:	813b      	strh	r3, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ea:	f7ff fbbf 	bl	8002b6c <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	f040 80d9 	bne.w	80035b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2319      	movs	r3, #25
 8003404:	2201      	movs	r2, #1
 8003406:	496d      	ldr	r1, [pc, #436]	; (80035bc <HAL_I2C_Mem_Write+0x1ec>)
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fc7f 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	e0cc      	b.n	80035b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_I2C_Mem_Write+0x56>
 8003422:	2302      	movs	r3, #2
 8003424:	e0c5      	b.n	80035b2 <HAL_I2C_Mem_Write+0x1e2>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d007      	beq.n	800344c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2221      	movs	r2, #33	; 0x21
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a3a      	ldr	r2, [r7, #32]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a4d      	ldr	r2, [pc, #308]	; (80035c0 <HAL_I2C_Mem_Write+0x1f0>)
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800348e:	88f8      	ldrh	r0, [r7, #6]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	4603      	mov	r3, r0
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fab6 	bl	8003a10 <I2C_RequestMemoryWrite>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d052      	beq.n	8003550 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e081      	b.n	80035b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fd00 	bl	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d107      	bne.n	80034d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e06b      	b.n	80035b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d11b      	bne.n	8003550 <HAL_I2C_Mem_Write+0x180>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d017      	beq.n	8003550 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1aa      	bne.n	80034ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fcec 	bl	8003f3a <I2C_WaitOnBTFFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2b04      	cmp	r3, #4
 800356e:	d107      	bne.n	8003580 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e016      	b.n	80035b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	00100002 	.word	0x00100002
 80035c0:	ffff0000 	.word	0xffff0000

080035c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	; 0x30
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	817b      	strh	r3, [r7, #10]
 80035d6:	460b      	mov	r3, r1
 80035d8:	813b      	strh	r3, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035de:	f7ff fac5 	bl	8002b6c <HAL_GetTick>
 80035e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	f040 8208 	bne.w	8003a02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2319      	movs	r3, #25
 80035f8:	2201      	movs	r2, #1
 80035fa:	497b      	ldr	r1, [pc, #492]	; (80037e8 <HAL_I2C_Mem_Read+0x224>)
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fb85 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	e1fb      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_I2C_Mem_Read+0x56>
 8003616:	2302      	movs	r3, #2
 8003618:	e1f4      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d007      	beq.n	8003640 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2222      	movs	r2, #34	; 0x22
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a5b      	ldr	r2, [pc, #364]	; (80037ec <HAL_I2C_Mem_Read+0x228>)
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003682:	88f8      	ldrh	r0, [r7, #6]
 8003684:	893a      	ldrh	r2, [r7, #8]
 8003686:	8979      	ldrh	r1, [r7, #10]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4603      	mov	r3, r0
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fa52 	bl	8003b3c <I2C_RequestMemoryRead>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e1b0      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d113      	bne.n	80036d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	623b      	str	r3, [r7, #32]
 80036be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e184      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d11b      	bne.n	8003712 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e164      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	2b02      	cmp	r3, #2
 8003718:	d11b      	bne.n	8003752 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003728:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	e144      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003768:	e138      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	2b03      	cmp	r3, #3
 8003770:	f200 80f1 	bhi.w	8003956 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	2b01      	cmp	r3, #1
 800377a:	d123      	bne.n	80037c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fc1b 	bl	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e139      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037c2:	e10b      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d14e      	bne.n	800386a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	2200      	movs	r2, #0
 80037d4:	4906      	ldr	r1, [pc, #24]	; (80037f0 <HAL_I2C_Mem_Read+0x22c>)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fa98 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e10e      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
 80037e6:	bf00      	nop
 80037e8:	00100002 	.word	0x00100002
 80037ec:	ffff0000 	.word	0xffff0000
 80037f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003868:	e0b8      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2200      	movs	r2, #0
 8003872:	4966      	ldr	r1, [pc, #408]	; (8003a0c <HAL_I2C_Mem_Read+0x448>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa49 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0bf      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	2200      	movs	r2, #0
 80038ce:	494f      	ldr	r1, [pc, #316]	; (8003a0c <HAL_I2C_Mem_Read+0x448>)
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fa1b 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e091      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003954:	e042      	b.n	80039dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fb2e 	bl	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e04c      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d118      	bne.n	80039dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f aec2 	bne.w	800376a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	; 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	00010004 	.word	0x00010004

08003a10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	817b      	strh	r3, [r7, #10]
 8003a22:	460b      	mov	r3, r1
 8003a24:	813b      	strh	r3, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f960 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a60:	d103      	bne.n	8003a6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e05f      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	492d      	ldr	r1, [pc, #180]	; (8003b38 <I2C_RequestMemoryWrite+0x128>)
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f998 	bl	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e04c      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa02 	bl	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e02b      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003adc:	893b      	ldrh	r3, [r7, #8]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	e021      	b.n	8003b2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ae8:	893b      	ldrh	r3, [r7, #8]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	6a39      	ldr	r1, [r7, #32]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f9dc 	bl	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d107      	bne.n	8003b1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e005      	b.n	8003b2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	00010002 	.word	0x00010002

08003b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f8c2 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00d      	beq.n	8003baa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d103      	bne.n	8003ba6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0aa      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	4952      	ldr	r1, [pc, #328]	; (8003d08 <I2C_RequestMemoryRead+0x1cc>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8fa 	bl	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e097      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f964 	bl	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e076      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c18:	893b      	ldrh	r3, [r7, #8]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]
 8003c22:	e021      	b.n	8003c68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c24:	893b      	ldrh	r3, [r7, #8]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f93e 	bl	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e050      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5e:	893b      	ldrh	r3, [r7, #8]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	6a39      	ldr	r1, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f923 	bl	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d107      	bne.n	8003c90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e035      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f82b 	bl	8003d0c <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cca:	d103      	bne.n	8003cd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e013      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cd8:	897b      	ldrh	r3, [r7, #10]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	6a3a      	ldr	r2, [r7, #32]
 8003cec:	4906      	ldr	r1, [pc, #24]	; (8003d08 <I2C_RequestMemoryRead+0x1cc>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f863 	bl	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	00010002 	.word	0x00010002

08003d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1c:	e025      	b.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d021      	beq.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe ff21 	bl	8002b6c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d116      	bne.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e023      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d10d      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	e00c      	b.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d0b6      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc8:	e051      	b.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	d123      	bne.n	8003e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e046      	b.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d021      	beq.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe fe9f 	bl	8002b6c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e020      	b.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10c      	bne.n	8003e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e00b      	b.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d18d      	bne.n	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec4:	e02d      	b.n	8003f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8ce 	bl	8004068 <I2C_IsAcknowledgeFailed>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e02d      	b.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d021      	beq.n	8003f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fe fe45 	bl	8002b6c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d116      	bne.n	8003f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e007      	b.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d1ca      	bne.n	8003ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f46:	e02d      	b.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f88d 	bl	8004068 <I2C_IsAcknowledgeFailed>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e02d      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d021      	beq.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fe fe04 	bl	8002b6c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d116      	bne.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e007      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d1ca      	bne.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc8:	e042      	b.n	8004050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d119      	bne.n	800400c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0210 	mvn.w	r2, #16
 8003fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e029      	b.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fe fdae 	bl	8002b6c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d1b5      	bne.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d11b      	bne.n	80040b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e267      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d075      	beq.n	80041d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e6:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d00c      	beq.n	800410c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f2:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d112      	bne.n	8004124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fe:	4b82      	ldr	r3, [pc, #520]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410a:	d10b      	bne.n	8004124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d05b      	beq.n	80041d0 <HAL_RCC_OscConfig+0x108>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d157      	bne.n	80041d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e242      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d106      	bne.n	800413c <HAL_RCC_OscConfig+0x74>
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a75      	ldr	r2, [pc, #468]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xb0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x98>
 8004146:	4b70      	ldr	r3, [pc, #448]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6f      	ldr	r2, [pc, #444]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6c      	ldr	r2, [pc, #432]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xb0>
 8004160:	4b69      	ldr	r3, [pc, #420]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a68      	ldr	r2, [pc, #416]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b66      	ldr	r3, [pc, #408]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a65      	ldr	r2, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fcf4 	bl	8002b6c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe fcf0 	bl	8002b6c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e207      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xc0>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe fce0 	bl	8002b6c <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fe fcdc 	bl	8002b6c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1f3      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	4b51      	ldr	r3, [pc, #324]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0xe8>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f6:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x152>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1c7      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4937      	ldr	r1, [pc, #220]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b34      	ldr	r3, [pc, #208]	; (800430c <HAL_RCC_OscConfig+0x244>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fe fc95 	bl	8002b6c <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004246:	f7fe fc91 	bl	8002b6c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1a8      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4925      	ldr	r1, [pc, #148]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCC_OscConfig+0x244>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe fc74 	bl	8002b6c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe fc70 	bl	8002b6c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e187      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d036      	beq.n	8004320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCC_OscConfig+0x248>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fe fc54 	bl	8002b6c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fe fc50 	bl	8002b6c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e167      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_OscConfig+0x240>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x200>
 80042e6:	e01b      	b.n	8004320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_OscConfig+0x248>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ee:	f7fe fc3d 	bl	8002b6c <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e00e      	b.n	8004314 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fe fc39 	bl	8002b6c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d907      	bls.n	8004314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e150      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
 8004308:	40023800 	.word	0x40023800
 800430c:	42470000 	.word	0x42470000
 8004310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	4b88      	ldr	r3, [pc, #544]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ea      	bne.n	80042f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8097 	beq.w	800445c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004332:	4b81      	ldr	r3, [pc, #516]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	4b7d      	ldr	r3, [pc, #500]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
 800434e:	4b7a      	ldr	r3, [pc, #488]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	4b77      	ldr	r3, [pc, #476]	; (800453c <HAL_RCC_OscConfig+0x474>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436a:	4b74      	ldr	r3, [pc, #464]	; (800453c <HAL_RCC_OscConfig+0x474>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a73      	ldr	r2, [pc, #460]	; (800453c <HAL_RCC_OscConfig+0x474>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004376:	f7fe fbf9 	bl	8002b6c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fe fbf5 	bl	8002b6c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e10c      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	4b6a      	ldr	r3, [pc, #424]	; (800453c <HAL_RCC_OscConfig+0x474>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x2ea>
 80043a4:	4b64      	ldr	r3, [pc, #400]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	4a63      	ldr	r2, [pc, #396]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	; 0x70
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x324>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x30c>
 80043ba:	4b5f      	ldr	r3, [pc, #380]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a5e      	ldr	r2, [pc, #376]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	4b5c      	ldr	r3, [pc, #368]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a5b      	ldr	r2, [pc, #364]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0x324>
 80043d4:	4b58      	ldr	r3, [pc, #352]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a57      	ldr	r2, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b55      	ldr	r3, [pc, #340]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a54      	ldr	r2, [pc, #336]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe fbba 	bl	8002b6c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fe fbb6 	bl	8002b6c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0cb      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	4b49      	ldr	r3, [pc, #292]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ee      	beq.n	80043fc <HAL_RCC_OscConfig+0x334>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004420:	f7fe fba4 	bl	8002b6c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fe fba0 	bl	8002b6c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0b5      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443e:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ee      	bne.n	8004428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a38      	ldr	r2, [pc, #224]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80a1 	beq.w	80045a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d05c      	beq.n	800452c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d141      	bne.n	80044fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCC_OscConfig+0x478>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe fb74 	bl	8002b6c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fb70 	bl	8002b6c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e087      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	491b      	ldr	r1, [pc, #108]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x478>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fe fb49 	bl	8002b6c <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044de:	f7fe fb45 	bl	8002b6c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e05c      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x416>
 80044fc:	e054      	b.n	80045a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCC_OscConfig+0x478>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fe fb32 	bl	8002b6c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe fb2e 	bl	8002b6c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e045      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCC_OscConfig+0x470>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x444>
 800452a:	e03d      	b.n	80045a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e038      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_RCC_OscConfig+0x4ec>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d028      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d121      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d11a      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457c:	4293      	cmp	r3, r2
 800457e:	d111      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0cc      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045cc:	4b68      	ldr	r3, [pc, #416]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d90c      	bls.n	80045f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b63      	ldr	r3, [pc, #396]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b8      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a58      	ldr	r2, [pc, #352]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800462e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004630:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	494d      	ldr	r1, [pc, #308]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d044      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d119      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e07f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d003      	beq.n	8004676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004672:	2b03      	cmp	r3, #3
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e06f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004686:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e067      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b37      	ldr	r3, [pc, #220]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4934      	ldr	r1, [pc, #208]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a8:	f7fe fa60 	bl	8002b6c <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fe fa5c 	bl	8002b6c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e04f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d20c      	bcs.n	8004700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e032      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4916      	ldr	r1, [pc, #88]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	490e      	ldr	r1, [pc, #56]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800473e:	f000 f821 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8004742:	4602      	mov	r2, r0
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	490a      	ldr	r1, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	5ccb      	ldrb	r3, [r1, r3]
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe f9c0 	bl	8002ae4 <HAL_InitTick>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023c00 	.word	0x40023c00
 8004774:	40023800 	.word	0x40023800
 8004778:	08008b6c 	.word	0x08008b6c
 800477c:	20000000 	.word	0x20000000
 8004780:	20000004 	.word	0x20000004

08004784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004788:	b094      	sub	sp, #80	; 0x50
 800478a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	647b      	str	r3, [r7, #68]	; 0x44
 8004790:	2300      	movs	r3, #0
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	2300      	movs	r3, #0
 8004796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800479c:	4b79      	ldr	r3, [pc, #484]	; (8004984 <HAL_RCC_GetSysClockFreq+0x200>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d00d      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x40>
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	f200 80e1 	bhi.w	8004970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x34>
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d003      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x3a>
 80047b6:	e0db      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b8:	4b73      	ldr	r3, [pc, #460]	; (8004988 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047bc:	e0db      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047be:	4b73      	ldr	r3, [pc, #460]	; (800498c <HAL_RCC_GetSysClockFreq+0x208>)
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c2:	e0d8      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c4:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ce:	4b6d      	ldr	r3, [pc, #436]	; (8004984 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047da:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCC_GetSysClockFreq+0x200>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	099b      	lsrs	r3, r3, #6
 80047e0:	2200      	movs	r2, #0
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30
 80047ee:	2300      	movs	r3, #0
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	f04f 0000 	mov.w	r0, #0
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	0159      	lsls	r1, r3, #5
 8004804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004808:	0150      	lsls	r0, r2, #5
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4621      	mov	r1, r4
 8004810:	1a51      	subs	r1, r2, r1
 8004812:	6139      	str	r1, [r7, #16]
 8004814:	4629      	mov	r1, r5
 8004816:	eb63 0301 	sbc.w	r3, r3, r1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004828:	4659      	mov	r1, fp
 800482a:	018b      	lsls	r3, r1, #6
 800482c:	4651      	mov	r1, sl
 800482e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004832:	4651      	mov	r1, sl
 8004834:	018a      	lsls	r2, r1, #6
 8004836:	4651      	mov	r1, sl
 8004838:	ebb2 0801 	subs.w	r8, r2, r1
 800483c:	4659      	mov	r1, fp
 800483e:	eb63 0901 	sbc.w	r9, r3, r1
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004856:	4690      	mov	r8, r2
 8004858:	4699      	mov	r9, r3
 800485a:	4623      	mov	r3, r4
 800485c:	eb18 0303 	adds.w	r3, r8, r3
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	462b      	mov	r3, r5
 8004864:	eb49 0303 	adc.w	r3, r9, r3
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004876:	4629      	mov	r1, r5
 8004878:	024b      	lsls	r3, r1, #9
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004880:	4621      	mov	r1, r4
 8004882:	024a      	lsls	r2, r1, #9
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488a:	2200      	movs	r2, #0
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
 800488e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004894:	f7fc f9e0 	bl	8000c58 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4613      	mov	r3, r2
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a0:	e058      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a2:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	2200      	movs	r2, #0
 80048aa:	4618      	mov	r0, r3
 80048ac:	4611      	mov	r1, r2
 80048ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	2300      	movs	r3, #0
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
 80048b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	f04f 0000 	mov.w	r0, #0
 80048c4:	f04f 0100 	mov.w	r1, #0
 80048c8:	0159      	lsls	r1, r3, #5
 80048ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ce:	0150      	lsls	r0, r2, #5
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4641      	mov	r1, r8
 80048d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80048da:	4649      	mov	r1, r9
 80048dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048f4:	ebb2 040a 	subs.w	r4, r2, sl
 80048f8:	eb63 050b 	sbc.w	r5, r3, fp
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	00eb      	lsls	r3, r5, #3
 8004906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490a:	00e2      	lsls	r2, r4, #3
 800490c:	4614      	mov	r4, r2
 800490e:	461d      	mov	r5, r3
 8004910:	4643      	mov	r3, r8
 8004912:	18e3      	adds	r3, r4, r3
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	464b      	mov	r3, r9
 8004918:	eb45 0303 	adc.w	r3, r5, r3
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800492a:	4629      	mov	r1, r5
 800492c:	028b      	lsls	r3, r1, #10
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004934:	4621      	mov	r1, r4
 8004936:	028a      	lsls	r2, r1, #10
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493e:	2200      	movs	r2, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	61fa      	str	r2, [r7, #28]
 8004944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004948:	f7fc f986 	bl	8000c58 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_GetSysClockFreq+0x200>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800496e:	e002      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetSysClockFreq+0x204>)
 8004972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004978:	4618      	mov	r0, r3
 800497a:	3750      	adds	r7, #80	; 0x50
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	00f42400 	.word	0x00f42400
 800498c:	007a1200 	.word	0x007a1200

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000000 	.word	0x20000000

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049ac:	f7ff fff0 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0a9b      	lsrs	r3, r3, #10
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08008b7c 	.word	0x08008b7c

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049d4:	f7ff ffdc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0b5b      	lsrs	r3, r3, #13
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	08008b7c 	.word	0x08008b7c

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e041      	b.n	8004a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fe8c 	bl	800273c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fa8a 	bl	8004f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e03c      	b.n	8004b2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <HAL_TIM_Base_Start+0xa0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIM_Base_Start+0x5c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aca:	d013      	beq.n	8004af4 <HAL_TIM_Base_Start+0x5c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <HAL_TIM_Base_Start+0xa4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIM_Base_Start+0x5c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a19      	ldr	r2, [pc, #100]	; (8004b40 <HAL_TIM_Base_Start+0xa8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIM_Base_Start+0x5c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <HAL_TIM_Base_Start+0xac>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIM_Base_Start+0x5c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <HAL_TIM_Base_Start+0xb0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d111      	bne.n	8004b18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d010      	beq.n	8004b28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	e007      	b.n	8004b28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000

08004b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0202 	mvn.w	r2, #2
 8004b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f9bf 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9b1 	bl	8004efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f9c2 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0204 	mvn.w	r2, #4
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f995 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f987 	bl	8004efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f998 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d122      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d11b      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0208 	mvn.w	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f96b 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f95d 	bl	8004efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f96e 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d122      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d11b      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f941 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004c90:	e005      	b.n	8004c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f933 	bl	8004efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f944 	bl	8004f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0201 	mvn.w	r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f90d 	bl	8004eea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fabc 	bl	8005274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f909 	bl	8004f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0220 	mvn.w	r2, #32
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa86 	bl	8005260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0b4      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0x186>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db0:	d03e      	beq.n	8004e30 <HAL_TIM_ConfigClockSource+0xd4>
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	f200 8087 	bhi.w	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dbe:	f000 8086 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x172>
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d87f      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b70      	cmp	r3, #112	; 0x70
 8004dca:	d01a      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0xa6>
 8004dcc:	2b70      	cmp	r3, #112	; 0x70
 8004dce:	d87b      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b60      	cmp	r3, #96	; 0x60
 8004dd2:	d050      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x11a>
 8004dd4:	2b60      	cmp	r3, #96	; 0x60
 8004dd6:	d877      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b50      	cmp	r3, #80	; 0x50
 8004dda:	d03c      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xfa>
 8004ddc:	2b50      	cmp	r3, #80	; 0x50
 8004dde:	d873      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d058      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x13a>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d86f      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b30      	cmp	r3, #48	; 0x30
 8004dea:	d064      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dec:	2b30      	cmp	r3, #48	; 0x30
 8004dee:	d86b      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d060      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d867      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05c      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d05a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	e062      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6899      	ldr	r1, [r3, #8]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f000 f997 	bl	8005144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	609a      	str	r2, [r3, #8]
      break;
 8004e2e:	e04f      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6899      	ldr	r1, [r3, #8]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f000 f980 	bl	8005144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e52:	609a      	str	r2, [r3, #8]
      break;
 8004e54:	e03c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 f8f4 	bl	8005050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2150      	movs	r1, #80	; 0x50
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f94d 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e74:	e02c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 f913 	bl	80050ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2160      	movs	r1, #96	; 0x60
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f93d 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e94:	e01c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 f8d4 	bl	8005050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2140      	movs	r1, #64	; 0x40
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f92d 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e00c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f000 f924 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e003      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ecc:	e000      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a34      	ldr	r2, [pc, #208]	; (8005034 <TIM_Base_SetConfig+0xe4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6e:	d00b      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a31      	ldr	r2, [pc, #196]	; (8005038 <TIM_Base_SetConfig+0xe8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a30      	ldr	r2, [pc, #192]	; (800503c <TIM_Base_SetConfig+0xec>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <TIM_Base_SetConfig+0xf0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <TIM_Base_SetConfig+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01b      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d017      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <TIM_Base_SetConfig+0xe8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a21      	ldr	r2, [pc, #132]	; (800503c <TIM_Base_SetConfig+0xec>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00f      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	; (8005040 <TIM_Base_SetConfig+0xf0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00b      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <TIM_Base_SetConfig+0xf4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <TIM_Base_SetConfig+0xf8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <TIM_Base_SetConfig+0xfc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d108      	bne.n	8004fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a08      	ldr	r2, [pc, #32]	; (8005034 <TIM_Base_SetConfig+0xe4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 030a 	bic.w	r3, r3, #10
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	f043 0307 	orr.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	021a      	lsls	r2, r3, #8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	431a      	orrs	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005198:	2302      	movs	r3, #2
 800519a:	e050      	b.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1c      	ldr	r2, [pc, #112]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d018      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d013      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a18      	ldr	r2, [pc, #96]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00e      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a16      	ldr	r2, [pc, #88]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d009      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a15      	ldr	r2, [pc, #84]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a13      	ldr	r2, [pc, #76]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10c      	bne.n	800522c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4313      	orrs	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40014000 	.word	0x40014000

08005260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e03f      	b.n	800531a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd fa6a 	bl	8002788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	; 0x24
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f829 	bl	8005324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005328:	b0c0      	sub	sp, #256	; 0x100
 800532a:	af00      	add	r7, sp, #0
 800532c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	68d9      	ldr	r1, [r3, #12]
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	ea40 0301 	orr.w	r3, r0, r1
 800534c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800537c:	f021 010c 	bic.w	r1, r1, #12
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800538a:	430b      	orrs	r3, r1
 800538c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539e:	6999      	ldr	r1, [r3, #24]
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	ea40 0301 	orr.w	r3, r0, r1
 80053aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b8f      	ldr	r3, [pc, #572]	; (80055f0 <UART_SetConfig+0x2cc>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d005      	beq.n	80053c4 <UART_SetConfig+0xa0>
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b8d      	ldr	r3, [pc, #564]	; (80055f4 <UART_SetConfig+0x2d0>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d104      	bne.n	80053ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c4:	f7ff fb04 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 80053c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053cc:	e003      	b.n	80053d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ce:	f7ff faeb 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 80053d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e0:	f040 810c 	bne.w	80055fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	1891      	adds	r1, r2, r2
 80053fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80053fe:	415b      	adcs	r3, r3
 8005400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005406:	4621      	mov	r1, r4
 8005408:	eb12 0801 	adds.w	r8, r2, r1
 800540c:	4629      	mov	r1, r5
 800540e:	eb43 0901 	adc.w	r9, r3, r1
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800541e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005426:	4690      	mov	r8, r2
 8005428:	4699      	mov	r9, r3
 800542a:	4623      	mov	r3, r4
 800542c:	eb18 0303 	adds.w	r3, r8, r3
 8005430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005434:	462b      	mov	r3, r5
 8005436:	eb49 0303 	adc.w	r3, r9, r3
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800544a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800544e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005452:	460b      	mov	r3, r1
 8005454:	18db      	adds	r3, r3, r3
 8005456:	653b      	str	r3, [r7, #80]	; 0x50
 8005458:	4613      	mov	r3, r2
 800545a:	eb42 0303 	adc.w	r3, r2, r3
 800545e:	657b      	str	r3, [r7, #84]	; 0x54
 8005460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005468:	f7fb fbf6 	bl	8000c58 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <UART_SetConfig+0x2d4>)
 8005472:	fba3 2302 	umull	r2, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	011c      	lsls	r4, r3, #4
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005484:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	64b9      	str	r1, [r7, #72]	; 0x48
 8005494:	415b      	adcs	r3, r3
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800549c:	4641      	mov	r1, r8
 800549e:	eb12 0a01 	adds.w	sl, r2, r1
 80054a2:	4649      	mov	r1, r9
 80054a4:	eb43 0b01 	adc.w	fp, r3, r1
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054bc:	4692      	mov	sl, r2
 80054be:	469b      	mov	fp, r3
 80054c0:	4643      	mov	r3, r8
 80054c2:	eb1a 0303 	adds.w	r3, sl, r3
 80054c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ca:	464b      	mov	r3, r9
 80054cc:	eb4b 0303 	adc.w	r3, fp, r3
 80054d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054e8:	460b      	mov	r3, r1
 80054ea:	18db      	adds	r3, r3, r3
 80054ec:	643b      	str	r3, [r7, #64]	; 0x40
 80054ee:	4613      	mov	r3, r2
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	647b      	str	r3, [r7, #68]	; 0x44
 80054f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054fe:	f7fb fbab 	bl	8000c58 <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4611      	mov	r1, r2
 8005508:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <UART_SetConfig+0x2d4>)
 800550a:	fba3 2301 	umull	r2, r3, r3, r1
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2264      	movs	r2, #100	; 0x64
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	1acb      	subs	r3, r1, r3
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800551e:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <UART_SetConfig+0x2d4>)
 8005520:	fba3 2302 	umull	r2, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800552c:	441c      	add	r4, r3
 800552e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005538:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800553c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	63b9      	str	r1, [r7, #56]	; 0x38
 8005548:	415b      	adcs	r3, r3
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6339      	str	r1, [r7, #48]	; 0x30
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005584:	464b      	mov	r3, r9
 8005586:	460a      	mov	r2, r1
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800559c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055a4:	460b      	mov	r3, r1
 80055a6:	18db      	adds	r3, r3, r3
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055aa:	4613      	mov	r3, r2
 80055ac:	eb42 0303 	adc.w	r3, r2, r3
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055ba:	f7fb fb4d 	bl	8000c58 <__aeabi_uldivmod>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <UART_SetConfig+0x2d4>)
 80055c4:	fba3 1302 	umull	r1, r3, r3, r2
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	2164      	movs	r1, #100	; 0x64
 80055cc:	fb01 f303 	mul.w	r3, r1, r3
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	3332      	adds	r3, #50	; 0x32
 80055d6:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <UART_SetConfig+0x2d4>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	f003 0207 	and.w	r2, r3, #7
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4422      	add	r2, r4
 80055ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ec:	e105      	b.n	80057fa <UART_SetConfig+0x4d6>
 80055ee:	bf00      	nop
 80055f0:	40011000 	.word	0x40011000
 80055f4:	40011400 	.word	0x40011400
 80055f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005600:	2200      	movs	r2, #0
 8005602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800560a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800560e:	4642      	mov	r2, r8
 8005610:	464b      	mov	r3, r9
 8005612:	1891      	adds	r1, r2, r2
 8005614:	6239      	str	r1, [r7, #32]
 8005616:	415b      	adcs	r3, r3
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
 800561a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800561e:	4641      	mov	r1, r8
 8005620:	1854      	adds	r4, r2, r1
 8005622:	4649      	mov	r1, r9
 8005624:	eb43 0501 	adc.w	r5, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	00eb      	lsls	r3, r5, #3
 8005632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005636:	00e2      	lsls	r2, r4, #3
 8005638:	4614      	mov	r4, r2
 800563a:	461d      	mov	r5, r3
 800563c:	4643      	mov	r3, r8
 800563e:	18e3      	adds	r3, r4, r3
 8005640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005644:	464b      	mov	r3, r9
 8005646:	eb45 0303 	adc.w	r3, r5, r3
 800564a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800566a:	4629      	mov	r1, r5
 800566c:	008b      	lsls	r3, r1, #2
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005674:	4621      	mov	r1, r4
 8005676:	008a      	lsls	r2, r1, #2
 8005678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800567c:	f7fb faec 	bl	8000c58 <__aeabi_uldivmod>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4b60      	ldr	r3, [pc, #384]	; (8005808 <UART_SetConfig+0x4e4>)
 8005686:	fba3 2302 	umull	r2, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	011c      	lsls	r4, r3, #4
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800569c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	1891      	adds	r1, r2, r2
 80056a6:	61b9      	str	r1, [r7, #24]
 80056a8:	415b      	adcs	r3, r3
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b0:	4641      	mov	r1, r8
 80056b2:	1851      	adds	r1, r2, r1
 80056b4:	6139      	str	r1, [r7, #16]
 80056b6:	4649      	mov	r1, r9
 80056b8:	414b      	adcs	r3, r1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056c8:	4659      	mov	r1, fp
 80056ca:	00cb      	lsls	r3, r1, #3
 80056cc:	4651      	mov	r1, sl
 80056ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d2:	4651      	mov	r1, sl
 80056d4:	00ca      	lsls	r2, r1, #3
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	4642      	mov	r2, r8
 80056de:	189b      	adds	r3, r3, r2
 80056e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e4:	464b      	mov	r3, r9
 80056e6:	460a      	mov	r2, r1
 80056e8:	eb42 0303 	adc.w	r3, r2, r3
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005708:	4649      	mov	r1, r9
 800570a:	008b      	lsls	r3, r1, #2
 800570c:	4641      	mov	r1, r8
 800570e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005712:	4641      	mov	r1, r8
 8005714:	008a      	lsls	r2, r1, #2
 8005716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800571a:	f7fb fa9d 	bl	8000c58 <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4b39      	ldr	r3, [pc, #228]	; (8005808 <UART_SetConfig+0x4e4>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <UART_SetConfig+0x4e4>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005742:	441c      	add	r4, r3
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	673b      	str	r3, [r7, #112]	; 0x70
 800574c:	677a      	str	r2, [r7, #116]	; 0x74
 800574e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005752:	4642      	mov	r2, r8
 8005754:	464b      	mov	r3, r9
 8005756:	1891      	adds	r1, r2, r2
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	415b      	adcs	r3, r3
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005762:	4641      	mov	r1, r8
 8005764:	1851      	adds	r1, r2, r1
 8005766:	6039      	str	r1, [r7, #0]
 8005768:	4649      	mov	r1, r9
 800576a:	414b      	adcs	r3, r1
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800577a:	4659      	mov	r1, fp
 800577c:	00cb      	lsls	r3, r1, #3
 800577e:	4651      	mov	r1, sl
 8005780:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005784:	4651      	mov	r1, sl
 8005786:	00ca      	lsls	r2, r1, #3
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	4603      	mov	r3, r0
 800578e:	4642      	mov	r2, r8
 8005790:	189b      	adds	r3, r3, r2
 8005792:	66bb      	str	r3, [r7, #104]	; 0x68
 8005794:	464b      	mov	r3, r9
 8005796:	460a      	mov	r2, r1
 8005798:	eb42 0303 	adc.w	r3, r2, r3
 800579c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	663b      	str	r3, [r7, #96]	; 0x60
 80057a8:	667a      	str	r2, [r7, #100]	; 0x64
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057b6:	4649      	mov	r1, r9
 80057b8:	008b      	lsls	r3, r1, #2
 80057ba:	4641      	mov	r1, r8
 80057bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c0:	4641      	mov	r1, r8
 80057c2:	008a      	lsls	r2, r1, #2
 80057c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057c8:	f7fb fa46 	bl	8000c58 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <UART_SetConfig+0x4e4>)
 80057d2:	fba3 1302 	umull	r1, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2164      	movs	r1, #100	; 0x64
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	3332      	adds	r3, #50	; 0x32
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <UART_SetConfig+0x4e4>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4422      	add	r2, r4
 80057f8:	609a      	str	r2, [r3, #8]
}
 80057fa:	bf00      	nop
 80057fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005800:	46bd      	mov	sp, r7
 8005802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005806:	bf00      	nop
 8005808:	51eb851f 	.word	0x51eb851f

0800580c <__errno>:
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <__errno+0x8>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	; (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	; (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	; (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	; (800585c <__libc_init_array+0x44>)
 800582c:	f002 ff04 	bl	8008638 <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	08008f64 	.word	0x08008f64
 8005854:	08008f64 	.word	0x08008f64
 8005858:	08008f64 	.word	0x08008f64
 800585c:	08008f68 	.word	0x08008f68

08005860 <malloc>:
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <malloc+0xc>)
 8005862:	4601      	mov	r1, r0
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f000 b877 	b.w	8005958 <_malloc_r>
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <memset>:
 8005870:	4402      	add	r2, r0
 8005872:	4603      	mov	r3, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	d100      	bne.n	800587a <memset+0xa>
 8005878:	4770      	bx	lr
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	e7f9      	b.n	8005874 <memset+0x4>

08005880 <_free_r>:
 8005880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005882:	2900      	cmp	r1, #0
 8005884:	d044      	beq.n	8005910 <_free_r+0x90>
 8005886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588a:	9001      	str	r0, [sp, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f1a1 0404 	sub.w	r4, r1, #4
 8005892:	bfb8      	it	lt
 8005894:	18e4      	addlt	r4, r4, r3
 8005896:	f001 fbfb 	bl	8007090 <__malloc_lock>
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <_free_r+0x94>)
 800589c:	9801      	ldr	r0, [sp, #4]
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	b933      	cbnz	r3, 80058b0 <_free_r+0x30>
 80058a2:	6063      	str	r3, [r4, #4]
 80058a4:	6014      	str	r4, [r2, #0]
 80058a6:	b003      	add	sp, #12
 80058a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ac:	f001 bbf6 	b.w	800709c <__malloc_unlock>
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	d908      	bls.n	80058c6 <_free_r+0x46>
 80058b4:	6825      	ldr	r5, [r4, #0]
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	428b      	cmp	r3, r1
 80058ba:	bf01      	itttt	eq
 80058bc:	6819      	ldreq	r1, [r3, #0]
 80058be:	685b      	ldreq	r3, [r3, #4]
 80058c0:	1949      	addeq	r1, r1, r5
 80058c2:	6021      	streq	r1, [r4, #0]
 80058c4:	e7ed      	b.n	80058a2 <_free_r+0x22>
 80058c6:	461a      	mov	r2, r3
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	b10b      	cbz	r3, 80058d0 <_free_r+0x50>
 80058cc:	42a3      	cmp	r3, r4
 80058ce:	d9fa      	bls.n	80058c6 <_free_r+0x46>
 80058d0:	6811      	ldr	r1, [r2, #0]
 80058d2:	1855      	adds	r5, r2, r1
 80058d4:	42a5      	cmp	r5, r4
 80058d6:	d10b      	bne.n	80058f0 <_free_r+0x70>
 80058d8:	6824      	ldr	r4, [r4, #0]
 80058da:	4421      	add	r1, r4
 80058dc:	1854      	adds	r4, r2, r1
 80058de:	42a3      	cmp	r3, r4
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	d1e0      	bne.n	80058a6 <_free_r+0x26>
 80058e4:	681c      	ldr	r4, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	6053      	str	r3, [r2, #4]
 80058ea:	4421      	add	r1, r4
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	e7da      	b.n	80058a6 <_free_r+0x26>
 80058f0:	d902      	bls.n	80058f8 <_free_r+0x78>
 80058f2:	230c      	movs	r3, #12
 80058f4:	6003      	str	r3, [r0, #0]
 80058f6:	e7d6      	b.n	80058a6 <_free_r+0x26>
 80058f8:	6825      	ldr	r5, [r4, #0]
 80058fa:	1961      	adds	r1, r4, r5
 80058fc:	428b      	cmp	r3, r1
 80058fe:	bf04      	itt	eq
 8005900:	6819      	ldreq	r1, [r3, #0]
 8005902:	685b      	ldreq	r3, [r3, #4]
 8005904:	6063      	str	r3, [r4, #4]
 8005906:	bf04      	itt	eq
 8005908:	1949      	addeq	r1, r1, r5
 800590a:	6021      	streq	r1, [r4, #0]
 800590c:	6054      	str	r4, [r2, #4]
 800590e:	e7ca      	b.n	80058a6 <_free_r+0x26>
 8005910:	b003      	add	sp, #12
 8005912:	bd30      	pop	{r4, r5, pc}
 8005914:	200003c8 	.word	0x200003c8

08005918 <sbrk_aligned>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	4e0e      	ldr	r6, [pc, #56]	; (8005954 <sbrk_aligned+0x3c>)
 800591c:	460c      	mov	r4, r1
 800591e:	6831      	ldr	r1, [r6, #0]
 8005920:	4605      	mov	r5, r0
 8005922:	b911      	cbnz	r1, 800592a <sbrk_aligned+0x12>
 8005924:	f000 fcf6 	bl	8006314 <_sbrk_r>
 8005928:	6030      	str	r0, [r6, #0]
 800592a:	4621      	mov	r1, r4
 800592c:	4628      	mov	r0, r5
 800592e:	f000 fcf1 	bl	8006314 <_sbrk_r>
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d00a      	beq.n	800594c <sbrk_aligned+0x34>
 8005936:	1cc4      	adds	r4, r0, #3
 8005938:	f024 0403 	bic.w	r4, r4, #3
 800593c:	42a0      	cmp	r0, r4
 800593e:	d007      	beq.n	8005950 <sbrk_aligned+0x38>
 8005940:	1a21      	subs	r1, r4, r0
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fce6 	bl	8006314 <_sbrk_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d101      	bne.n	8005950 <sbrk_aligned+0x38>
 800594c:	f04f 34ff 	mov.w	r4, #4294967295
 8005950:	4620      	mov	r0, r4
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	200003cc 	.word	0x200003cc

08005958 <_malloc_r>:
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	1ccd      	adds	r5, r1, #3
 800595e:	f025 0503 	bic.w	r5, r5, #3
 8005962:	3508      	adds	r5, #8
 8005964:	2d0c      	cmp	r5, #12
 8005966:	bf38      	it	cc
 8005968:	250c      	movcc	r5, #12
 800596a:	2d00      	cmp	r5, #0
 800596c:	4607      	mov	r7, r0
 800596e:	db01      	blt.n	8005974 <_malloc_r+0x1c>
 8005970:	42a9      	cmp	r1, r5
 8005972:	d905      	bls.n	8005980 <_malloc_r+0x28>
 8005974:	230c      	movs	r3, #12
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	2600      	movs	r6, #0
 800597a:	4630      	mov	r0, r6
 800597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005980:	4e2e      	ldr	r6, [pc, #184]	; (8005a3c <_malloc_r+0xe4>)
 8005982:	f001 fb85 	bl	8007090 <__malloc_lock>
 8005986:	6833      	ldr	r3, [r6, #0]
 8005988:	461c      	mov	r4, r3
 800598a:	bb34      	cbnz	r4, 80059da <_malloc_r+0x82>
 800598c:	4629      	mov	r1, r5
 800598e:	4638      	mov	r0, r7
 8005990:	f7ff ffc2 	bl	8005918 <sbrk_aligned>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	4604      	mov	r4, r0
 8005998:	d14d      	bne.n	8005a36 <_malloc_r+0xde>
 800599a:	6834      	ldr	r4, [r6, #0]
 800599c:	4626      	mov	r6, r4
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d140      	bne.n	8005a24 <_malloc_r+0xcc>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	4631      	mov	r1, r6
 80059a6:	4638      	mov	r0, r7
 80059a8:	eb04 0803 	add.w	r8, r4, r3
 80059ac:	f000 fcb2 	bl	8006314 <_sbrk_r>
 80059b0:	4580      	cmp	r8, r0
 80059b2:	d13a      	bne.n	8005a2a <_malloc_r+0xd2>
 80059b4:	6821      	ldr	r1, [r4, #0]
 80059b6:	3503      	adds	r5, #3
 80059b8:	1a6d      	subs	r5, r5, r1
 80059ba:	f025 0503 	bic.w	r5, r5, #3
 80059be:	3508      	adds	r5, #8
 80059c0:	2d0c      	cmp	r5, #12
 80059c2:	bf38      	it	cc
 80059c4:	250c      	movcc	r5, #12
 80059c6:	4629      	mov	r1, r5
 80059c8:	4638      	mov	r0, r7
 80059ca:	f7ff ffa5 	bl	8005918 <sbrk_aligned>
 80059ce:	3001      	adds	r0, #1
 80059d0:	d02b      	beq.n	8005a2a <_malloc_r+0xd2>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	442b      	add	r3, r5
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	e00e      	b.n	80059f8 <_malloc_r+0xa0>
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	1b52      	subs	r2, r2, r5
 80059de:	d41e      	bmi.n	8005a1e <_malloc_r+0xc6>
 80059e0:	2a0b      	cmp	r2, #11
 80059e2:	d916      	bls.n	8005a12 <_malloc_r+0xba>
 80059e4:	1961      	adds	r1, r4, r5
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	6025      	str	r5, [r4, #0]
 80059ea:	bf18      	it	ne
 80059ec:	6059      	strne	r1, [r3, #4]
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	bf08      	it	eq
 80059f2:	6031      	streq	r1, [r6, #0]
 80059f4:	5162      	str	r2, [r4, r5]
 80059f6:	604b      	str	r3, [r1, #4]
 80059f8:	4638      	mov	r0, r7
 80059fa:	f104 060b 	add.w	r6, r4, #11
 80059fe:	f001 fb4d 	bl	800709c <__malloc_unlock>
 8005a02:	f026 0607 	bic.w	r6, r6, #7
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	1af2      	subs	r2, r6, r3
 8005a0a:	d0b6      	beq.n	800597a <_malloc_r+0x22>
 8005a0c:	1b9b      	subs	r3, r3, r6
 8005a0e:	50a3      	str	r3, [r4, r2]
 8005a10:	e7b3      	b.n	800597a <_malloc_r+0x22>
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	bf0c      	ite	eq
 8005a18:	6032      	streq	r2, [r6, #0]
 8005a1a:	605a      	strne	r2, [r3, #4]
 8005a1c:	e7ec      	b.n	80059f8 <_malloc_r+0xa0>
 8005a1e:	4623      	mov	r3, r4
 8005a20:	6864      	ldr	r4, [r4, #4]
 8005a22:	e7b2      	b.n	800598a <_malloc_r+0x32>
 8005a24:	4634      	mov	r4, r6
 8005a26:	6876      	ldr	r6, [r6, #4]
 8005a28:	e7b9      	b.n	800599e <_malloc_r+0x46>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	4638      	mov	r0, r7
 8005a30:	f001 fb34 	bl	800709c <__malloc_unlock>
 8005a34:	e7a1      	b.n	800597a <_malloc_r+0x22>
 8005a36:	6025      	str	r5, [r4, #0]
 8005a38:	e7de      	b.n	80059f8 <_malloc_r+0xa0>
 8005a3a:	bf00      	nop
 8005a3c:	200003c8 	.word	0x200003c8

08005a40 <__cvt>:
 8005a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	ec55 4b10 	vmov	r4, r5, d0
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	460e      	mov	r6, r1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	462b      	mov	r3, r5
 8005a50:	bfbb      	ittet	lt
 8005a52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a56:	461d      	movlt	r5, r3
 8005a58:	2300      	movge	r3, #0
 8005a5a:	232d      	movlt	r3, #45	; 0x2d
 8005a5c:	700b      	strb	r3, [r1, #0]
 8005a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a64:	4691      	mov	r9, r2
 8005a66:	f023 0820 	bic.w	r8, r3, #32
 8005a6a:	bfbc      	itt	lt
 8005a6c:	4622      	movlt	r2, r4
 8005a6e:	4614      	movlt	r4, r2
 8005a70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a74:	d005      	beq.n	8005a82 <__cvt+0x42>
 8005a76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a7a:	d100      	bne.n	8005a7e <__cvt+0x3e>
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	2102      	movs	r1, #2
 8005a80:	e000      	b.n	8005a84 <__cvt+0x44>
 8005a82:	2103      	movs	r1, #3
 8005a84:	ab03      	add	r3, sp, #12
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	ab02      	add	r3, sp, #8
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	ec45 4b10 	vmov	d0, r4, r5
 8005a90:	4653      	mov	r3, sl
 8005a92:	4632      	mov	r2, r6
 8005a94:	f000 fcfc 	bl	8006490 <_dtoa_r>
 8005a98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	d102      	bne.n	8005aa6 <__cvt+0x66>
 8005aa0:	f019 0f01 	tst.w	r9, #1
 8005aa4:	d022      	beq.n	8005aec <__cvt+0xac>
 8005aa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aaa:	eb07 0906 	add.w	r9, r7, r6
 8005aae:	d110      	bne.n	8005ad2 <__cvt+0x92>
 8005ab0:	783b      	ldrb	r3, [r7, #0]
 8005ab2:	2b30      	cmp	r3, #48	; 0x30
 8005ab4:	d10a      	bne.n	8005acc <__cvt+0x8c>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fb f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ac2:	b918      	cbnz	r0, 8005acc <__cvt+0x8c>
 8005ac4:	f1c6 0601 	rsb	r6, r6, #1
 8005ac8:	f8ca 6000 	str.w	r6, [sl]
 8005acc:	f8da 3000 	ldr.w	r3, [sl]
 8005ad0:	4499      	add	r9, r3
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fa fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ade:	b108      	cbz	r0, 8005ae4 <__cvt+0xa4>
 8005ae0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ae4:	2230      	movs	r2, #48	; 0x30
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	454b      	cmp	r3, r9
 8005aea:	d307      	bcc.n	8005afc <__cvt+0xbc>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005af0:	1bdb      	subs	r3, r3, r7
 8005af2:	4638      	mov	r0, r7
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	b004      	add	sp, #16
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	1c59      	adds	r1, r3, #1
 8005afe:	9103      	str	r1, [sp, #12]
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e7f0      	b.n	8005ae6 <__cvt+0xa6>

08005b04 <__exponent>:
 8005b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b06:	4603      	mov	r3, r0
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	4249      	neglt	r1, r1
 8005b0e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b12:	bfb4      	ite	lt
 8005b14:	222d      	movlt	r2, #45	; 0x2d
 8005b16:	222b      	movge	r2, #43	; 0x2b
 8005b18:	2909      	cmp	r1, #9
 8005b1a:	7042      	strb	r2, [r0, #1]
 8005b1c:	dd2a      	ble.n	8005b74 <__exponent+0x70>
 8005b1e:	f10d 0407 	add.w	r4, sp, #7
 8005b22:	46a4      	mov	ip, r4
 8005b24:	270a      	movs	r7, #10
 8005b26:	46a6      	mov	lr, r4
 8005b28:	460a      	mov	r2, r1
 8005b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b2e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b32:	3530      	adds	r5, #48	; 0x30
 8005b34:	2a63      	cmp	r2, #99	; 0x63
 8005b36:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b3e:	4631      	mov	r1, r6
 8005b40:	dcf1      	bgt.n	8005b26 <__exponent+0x22>
 8005b42:	3130      	adds	r1, #48	; 0x30
 8005b44:	f1ae 0502 	sub.w	r5, lr, #2
 8005b48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b4c:	1c44      	adds	r4, r0, #1
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4561      	cmp	r1, ip
 8005b52:	d30a      	bcc.n	8005b6a <__exponent+0x66>
 8005b54:	f10d 0209 	add.w	r2, sp, #9
 8005b58:	eba2 020e 	sub.w	r2, r2, lr
 8005b5c:	4565      	cmp	r5, ip
 8005b5e:	bf88      	it	hi
 8005b60:	2200      	movhi	r2, #0
 8005b62:	4413      	add	r3, r2
 8005b64:	1a18      	subs	r0, r3, r0
 8005b66:	b003      	add	sp, #12
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b72:	e7ed      	b.n	8005b50 <__exponent+0x4c>
 8005b74:	2330      	movs	r3, #48	; 0x30
 8005b76:	3130      	adds	r1, #48	; 0x30
 8005b78:	7083      	strb	r3, [r0, #2]
 8005b7a:	70c1      	strb	r1, [r0, #3]
 8005b7c:	1d03      	adds	r3, r0, #4
 8005b7e:	e7f1      	b.n	8005b64 <__exponent+0x60>

08005b80 <_printf_float>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ed2d 8b02 	vpush	{d8}
 8005b88:	b08d      	sub	sp, #52	; 0x34
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b90:	4616      	mov	r6, r2
 8005b92:	461f      	mov	r7, r3
 8005b94:	4605      	mov	r5, r0
 8005b96:	f001 fa69 	bl	800706c <_localeconv_r>
 8005b9a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7fa fb1e 	bl	80001e0 <strlen>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bb4:	3307      	adds	r3, #7
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	f103 0208 	add.w	r2, r3, #8
 8005bbe:	f8c8 2000 	str.w	r2, [r8]
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bd2:	9307      	str	r3, [sp, #28]
 8005bd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bd8:	ee08 0a10 	vmov	s16, r0
 8005bdc:	4b9f      	ldr	r3, [pc, #636]	; (8005e5c <_printf_float+0x2dc>)
 8005bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	f7fa ffa9 	bl	8000b3c <__aeabi_dcmpun>
 8005bea:	bb88      	cbnz	r0, 8005c50 <_printf_float+0xd0>
 8005bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf0:	4b9a      	ldr	r3, [pc, #616]	; (8005e5c <_printf_float+0x2dc>)
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf6:	f7fa ff83 	bl	8000b00 <__aeabi_dcmple>
 8005bfa:	bb48      	cbnz	r0, 8005c50 <_printf_float+0xd0>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa ff72 	bl	8000aec <__aeabi_dcmplt>
 8005c08:	b110      	cbz	r0, 8005c10 <_printf_float+0x90>
 8005c0a:	232d      	movs	r3, #45	; 0x2d
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c10:	4b93      	ldr	r3, [pc, #588]	; (8005e60 <_printf_float+0x2e0>)
 8005c12:	4894      	ldr	r0, [pc, #592]	; (8005e64 <_printf_float+0x2e4>)
 8005c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c18:	bf94      	ite	ls
 8005c1a:	4698      	movls	r8, r3
 8005c1c:	4680      	movhi	r8, r0
 8005c1e:	2303      	movs	r3, #3
 8005c20:	6123      	str	r3, [r4, #16]
 8005c22:	9b05      	ldr	r3, [sp, #20]
 8005c24:	f023 0204 	bic.w	r2, r3, #4
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	f04f 0900 	mov.w	r9, #0
 8005c2e:	9700      	str	r7, [sp, #0]
 8005c30:	4633      	mov	r3, r6
 8005c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f9d8 	bl	8005fec <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f040 8090 	bne.w	8005d62 <_printf_float+0x1e2>
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	b00d      	add	sp, #52	; 0x34
 8005c48:	ecbd 8b02 	vpop	{d8}
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa ff70 	bl	8000b3c <__aeabi_dcmpun>
 8005c5c:	b140      	cbz	r0, 8005c70 <_printf_float+0xf0>
 8005c5e:	464b      	mov	r3, r9
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bfbc      	itt	lt
 8005c64:	232d      	movlt	r3, #45	; 0x2d
 8005c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c6a:	487f      	ldr	r0, [pc, #508]	; (8005e68 <_printf_float+0x2e8>)
 8005c6c:	4b7f      	ldr	r3, [pc, #508]	; (8005e6c <_printf_float+0x2ec>)
 8005c6e:	e7d1      	b.n	8005c14 <_printf_float+0x94>
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c76:	9206      	str	r2, [sp, #24]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	d13f      	bne.n	8005cfc <_printf_float+0x17c>
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	9b05      	ldr	r3, [sp, #20]
 8005c82:	6861      	ldr	r1, [r4, #4]
 8005c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c92:	ab09      	add	r3, sp, #36	; 0x24
 8005c94:	ec49 8b10 	vmov	d0, r8, r9
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7ff fecd 	bl	8005a40 <__cvt>
 8005ca6:	9b06      	ldr	r3, [sp, #24]
 8005ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005caa:	2b47      	cmp	r3, #71	; 0x47
 8005cac:	4680      	mov	r8, r0
 8005cae:	d108      	bne.n	8005cc2 <_printf_float+0x142>
 8005cb0:	1cc8      	adds	r0, r1, #3
 8005cb2:	db02      	blt.n	8005cba <_printf_float+0x13a>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	dd41      	ble.n	8005d3e <_printf_float+0x1be>
 8005cba:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cbe:	fa5f fb8b 	uxtb.w	fp, fp
 8005cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cc6:	d820      	bhi.n	8005d0a <_printf_float+0x18a>
 8005cc8:	3901      	subs	r1, #1
 8005cca:	465a      	mov	r2, fp
 8005ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8005cd2:	f7ff ff17 	bl	8005b04 <__exponent>
 8005cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cd8:	1813      	adds	r3, r2, r0
 8005cda:	2a01      	cmp	r2, #1
 8005cdc:	4681      	mov	r9, r0
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	dc02      	bgt.n	8005ce8 <_printf_float+0x168>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	07d2      	lsls	r2, r2, #31
 8005ce6:	d501      	bpl.n	8005cec <_printf_float+0x16c>
 8005ce8:	3301      	adds	r3, #1
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d09c      	beq.n	8005c2e <_printf_float+0xae>
 8005cf4:	232d      	movs	r3, #45	; 0x2d
 8005cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfa:	e798      	b.n	8005c2e <_printf_float+0xae>
 8005cfc:	9a06      	ldr	r2, [sp, #24]
 8005cfe:	2a47      	cmp	r2, #71	; 0x47
 8005d00:	d1be      	bne.n	8005c80 <_printf_float+0x100>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1bc      	bne.n	8005c80 <_printf_float+0x100>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e7b9      	b.n	8005c7e <_printf_float+0xfe>
 8005d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d0e:	d118      	bne.n	8005d42 <_printf_float+0x1c2>
 8005d10:	2900      	cmp	r1, #0
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	dd0b      	ble.n	8005d2e <_printf_float+0x1ae>
 8005d16:	6121      	str	r1, [r4, #16]
 8005d18:	b913      	cbnz	r3, 8005d20 <_printf_float+0x1a0>
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	07d0      	lsls	r0, r2, #31
 8005d1e:	d502      	bpl.n	8005d26 <_printf_float+0x1a6>
 8005d20:	3301      	adds	r3, #1
 8005d22:	440b      	add	r3, r1
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d28:	f04f 0900 	mov.w	r9, #0
 8005d2c:	e7de      	b.n	8005cec <_printf_float+0x16c>
 8005d2e:	b913      	cbnz	r3, 8005d36 <_printf_float+0x1b6>
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	07d2      	lsls	r2, r2, #31
 8005d34:	d501      	bpl.n	8005d3a <_printf_float+0x1ba>
 8005d36:	3302      	adds	r3, #2
 8005d38:	e7f4      	b.n	8005d24 <_printf_float+0x1a4>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e7f2      	b.n	8005d24 <_printf_float+0x1a4>
 8005d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d44:	4299      	cmp	r1, r3
 8005d46:	db05      	blt.n	8005d54 <_printf_float+0x1d4>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	6121      	str	r1, [r4, #16]
 8005d4c:	07d8      	lsls	r0, r3, #31
 8005d4e:	d5ea      	bpl.n	8005d26 <_printf_float+0x1a6>
 8005d50:	1c4b      	adds	r3, r1, #1
 8005d52:	e7e7      	b.n	8005d24 <_printf_float+0x1a4>
 8005d54:	2900      	cmp	r1, #0
 8005d56:	bfd4      	ite	le
 8005d58:	f1c1 0202 	rsble	r2, r1, #2
 8005d5c:	2201      	movgt	r2, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	e7e0      	b.n	8005d24 <_printf_float+0x1a4>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	055a      	lsls	r2, r3, #21
 8005d66:	d407      	bmi.n	8005d78 <_printf_float+0x1f8>
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	d12c      	bne.n	8005dd0 <_printf_float+0x250>
 8005d76:	e764      	b.n	8005c42 <_printf_float+0xc2>
 8005d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d7c:	f240 80e0 	bls.w	8005f40 <_printf_float+0x3c0>
 8005d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d84:	2200      	movs	r2, #0
 8005d86:	2300      	movs	r3, #0
 8005d88:	f7fa fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d034      	beq.n	8005dfa <_printf_float+0x27a>
 8005d90:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <_printf_float+0x2f0>)
 8005d92:	2301      	movs	r3, #1
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af51 	beq.w	8005c42 <_printf_float+0xc2>
 8005da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da4:	429a      	cmp	r2, r3
 8005da6:	db02      	blt.n	8005dae <_printf_float+0x22e>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07d8      	lsls	r0, r3, #31
 8005dac:	d510      	bpl.n	8005dd0 <_printf_float+0x250>
 8005dae:	ee18 3a10 	vmov	r3, s16
 8005db2:	4652      	mov	r2, sl
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f af41 	beq.w	8005c42 <_printf_float+0xc2>
 8005dc0:	f04f 0800 	mov.w	r8, #0
 8005dc4:	f104 091a 	add.w	r9, r4, #26
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4543      	cmp	r3, r8
 8005dce:	dc09      	bgt.n	8005de4 <_printf_float+0x264>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	079b      	lsls	r3, r3, #30
 8005dd4:	f100 8105 	bmi.w	8005fe2 <_printf_float+0x462>
 8005dd8:	68e0      	ldr	r0, [r4, #12]
 8005dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ddc:	4298      	cmp	r0, r3
 8005dde:	bfb8      	it	lt
 8005de0:	4618      	movlt	r0, r3
 8005de2:	e730      	b.n	8005c46 <_printf_float+0xc6>
 8005de4:	2301      	movs	r3, #1
 8005de6:	464a      	mov	r2, r9
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f af27 	beq.w	8005c42 <_printf_float+0xc2>
 8005df4:	f108 0801 	add.w	r8, r8, #1
 8005df8:	e7e6      	b.n	8005dc8 <_printf_float+0x248>
 8005dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dc39      	bgt.n	8005e74 <_printf_float+0x2f4>
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <_printf_float+0x2f0>)
 8005e02:	2301      	movs	r3, #1
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f af19 	beq.w	8005c42 <_printf_float+0xc2>
 8005e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e14:	4313      	orrs	r3, r2
 8005e16:	d102      	bne.n	8005e1e <_printf_float+0x29e>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	07d9      	lsls	r1, r3, #31
 8005e1c:	d5d8      	bpl.n	8005dd0 <_printf_float+0x250>
 8005e1e:	ee18 3a10 	vmov	r3, s16
 8005e22:	4652      	mov	r2, sl
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af09 	beq.w	8005c42 <_printf_float+0xc2>
 8005e30:	f04f 0900 	mov.w	r9, #0
 8005e34:	f104 0a1a 	add.w	sl, r4, #26
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	425b      	negs	r3, r3
 8005e3c:	454b      	cmp	r3, r9
 8005e3e:	dc01      	bgt.n	8005e44 <_printf_float+0x2c4>
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	e792      	b.n	8005d6a <_printf_float+0x1ea>
 8005e44:	2301      	movs	r3, #1
 8005e46:	4652      	mov	r2, sl
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f aef7 	beq.w	8005c42 <_printf_float+0xc2>
 8005e54:	f109 0901 	add.w	r9, r9, #1
 8005e58:	e7ee      	b.n	8005e38 <_printf_float+0x2b8>
 8005e5a:	bf00      	nop
 8005e5c:	7fefffff 	.word	0x7fefffff
 8005e60:	08008b88 	.word	0x08008b88
 8005e64:	08008b8c 	.word	0x08008b8c
 8005e68:	08008b94 	.word	0x08008b94
 8005e6c:	08008b90 	.word	0x08008b90
 8005e70:	08008b98 	.word	0x08008b98
 8005e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	bfa8      	it	ge
 8005e7c:	461a      	movge	r2, r3
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	4691      	mov	r9, r2
 8005e82:	dc37      	bgt.n	8005ef4 <_printf_float+0x374>
 8005e84:	f04f 0b00 	mov.w	fp, #0
 8005e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e8c:	f104 021a 	add.w	r2, r4, #26
 8005e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	eba3 0309 	sub.w	r3, r3, r9
 8005e98:	455b      	cmp	r3, fp
 8005e9a:	dc33      	bgt.n	8005f04 <_printf_float+0x384>
 8005e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	db3b      	blt.n	8005f1c <_printf_float+0x39c>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	07da      	lsls	r2, r3, #31
 8005ea8:	d438      	bmi.n	8005f1c <_printf_float+0x39c>
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eac:	9a05      	ldr	r2, [sp, #20]
 8005eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eb0:	1a9a      	subs	r2, r3, r2
 8005eb2:	eba3 0901 	sub.w	r9, r3, r1
 8005eb6:	4591      	cmp	r9, r2
 8005eb8:	bfa8      	it	ge
 8005eba:	4691      	movge	r9, r2
 8005ebc:	f1b9 0f00 	cmp.w	r9, #0
 8005ec0:	dc35      	bgt.n	8005f2e <_printf_float+0x3ae>
 8005ec2:	f04f 0800 	mov.w	r8, #0
 8005ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eca:	f104 0a1a 	add.w	sl, r4, #26
 8005ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	eba3 0309 	sub.w	r3, r3, r9
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	f77f af79 	ble.w	8005dd0 <_printf_float+0x250>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f aeaa 	beq.w	8005c42 <_printf_float+0xc2>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	e7ec      	b.n	8005ece <_printf_float+0x34e>
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4642      	mov	r2, r8
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	d1c0      	bne.n	8005e84 <_printf_float+0x304>
 8005f02:	e69e      	b.n	8005c42 <_printf_float+0xc2>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	9205      	str	r2, [sp, #20]
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f ae97 	beq.w	8005c42 <_printf_float+0xc2>
 8005f14:	9a05      	ldr	r2, [sp, #20]
 8005f16:	f10b 0b01 	add.w	fp, fp, #1
 8005f1a:	e7b9      	b.n	8005e90 <_printf_float+0x310>
 8005f1c:	ee18 3a10 	vmov	r3, s16
 8005f20:	4652      	mov	r2, sl
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1be      	bne.n	8005eaa <_printf_float+0x32a>
 8005f2c:	e689      	b.n	8005c42 <_printf_float+0xc2>
 8005f2e:	9a05      	ldr	r2, [sp, #20]
 8005f30:	464b      	mov	r3, r9
 8005f32:	4442      	add	r2, r8
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d1c1      	bne.n	8005ec2 <_printf_float+0x342>
 8005f3e:	e680      	b.n	8005c42 <_printf_float+0xc2>
 8005f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	dc01      	bgt.n	8005f4a <_printf_float+0x3ca>
 8005f46:	07db      	lsls	r3, r3, #31
 8005f48:	d538      	bpl.n	8005fbc <_printf_float+0x43c>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae74 	beq.w	8005c42 <_printf_float+0xc2>
 8005f5a:	ee18 3a10 	vmov	r3, s16
 8005f5e:	4652      	mov	r2, sl
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f ae6b 	beq.w	8005c42 <_printf_float+0xc2>
 8005f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f70:	2200      	movs	r2, #0
 8005f72:	2300      	movs	r3, #0
 8005f74:	f7fa fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f78:	b9d8      	cbnz	r0, 8005fb2 <_printf_float+0x432>
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7c:	f108 0201 	add.w	r2, r8, #1
 8005f80:	3b01      	subs	r3, #1
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d10e      	bne.n	8005faa <_printf_float+0x42a>
 8005f8c:	e659      	b.n	8005c42 <_printf_float+0xc2>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4652      	mov	r2, sl
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae52 	beq.w	8005c42 <_printf_float+0xc2>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	4543      	cmp	r3, r8
 8005fa8:	dcf1      	bgt.n	8005f8e <_printf_float+0x40e>
 8005faa:	464b      	mov	r3, r9
 8005fac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fb0:	e6dc      	b.n	8005d6c <_printf_float+0x1ec>
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	f104 0a1a 	add.w	sl, r4, #26
 8005fba:	e7f2      	b.n	8005fa2 <_printf_float+0x422>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	e7df      	b.n	8005f82 <_printf_float+0x402>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	464a      	mov	r2, r9
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae38 	beq.w	8005c42 <_printf_float+0xc2>
 8005fd2:	f108 0801 	add.w	r8, r8, #1
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fda:	1a5b      	subs	r3, r3, r1
 8005fdc:	4543      	cmp	r3, r8
 8005fde:	dcf0      	bgt.n	8005fc2 <_printf_float+0x442>
 8005fe0:	e6fa      	b.n	8005dd8 <_printf_float+0x258>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f104 0919 	add.w	r9, r4, #25
 8005fea:	e7f4      	b.n	8005fd6 <_printf_float+0x456>

08005fec <_printf_common>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	4699      	mov	r9, r3
 8005ff4:	688a      	ldr	r2, [r1, #8]
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bfb8      	it	lt
 8006000:	4613      	movlt	r3, r2
 8006002:	6033      	str	r3, [r6, #0]
 8006004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006008:	4607      	mov	r7, r0
 800600a:	460c      	mov	r4, r1
 800600c:	b10a      	cbz	r2, 8006012 <_printf_common+0x26>
 800600e:	3301      	adds	r3, #1
 8006010:	6033      	str	r3, [r6, #0]
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	0699      	lsls	r1, r3, #26
 8006016:	bf42      	ittt	mi
 8006018:	6833      	ldrmi	r3, [r6, #0]
 800601a:	3302      	addmi	r3, #2
 800601c:	6033      	strmi	r3, [r6, #0]
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	f015 0506 	ands.w	r5, r5, #6
 8006024:	d106      	bne.n	8006034 <_printf_common+0x48>
 8006026:	f104 0a19 	add.w	sl, r4, #25
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	6832      	ldr	r2, [r6, #0]
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	42ab      	cmp	r3, r5
 8006032:	dc26      	bgt.n	8006082 <_printf_common+0x96>
 8006034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006038:	1e13      	subs	r3, r2, #0
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	bf18      	it	ne
 800603e:	2301      	movne	r3, #1
 8006040:	0692      	lsls	r2, r2, #26
 8006042:	d42b      	bmi.n	800609c <_printf_common+0xb0>
 8006044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d01e      	beq.n	8006090 <_printf_common+0xa4>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	68e5      	ldr	r5, [r4, #12]
 8006056:	6832      	ldr	r2, [r6, #0]
 8006058:	f003 0306 	and.w	r3, r3, #6
 800605c:	2b04      	cmp	r3, #4
 800605e:	bf08      	it	eq
 8006060:	1aad      	subeq	r5, r5, r2
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	bf0c      	ite	eq
 8006068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800606c:	2500      	movne	r5, #0
 800606e:	4293      	cmp	r3, r2
 8006070:	bfc4      	itt	gt
 8006072:	1a9b      	subgt	r3, r3, r2
 8006074:	18ed      	addgt	r5, r5, r3
 8006076:	2600      	movs	r6, #0
 8006078:	341a      	adds	r4, #26
 800607a:	42b5      	cmp	r5, r6
 800607c:	d11a      	bne.n	80060b4 <_printf_common+0xc8>
 800607e:	2000      	movs	r0, #0
 8006080:	e008      	b.n	8006094 <_printf_common+0xa8>
 8006082:	2301      	movs	r3, #1
 8006084:	4652      	mov	r2, sl
 8006086:	4649      	mov	r1, r9
 8006088:	4638      	mov	r0, r7
 800608a:	47c0      	blx	r8
 800608c:	3001      	adds	r0, #1
 800608e:	d103      	bne.n	8006098 <_printf_common+0xac>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006098:	3501      	adds	r5, #1
 800609a:	e7c6      	b.n	800602a <_printf_common+0x3e>
 800609c:	18e1      	adds	r1, r4, r3
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	2030      	movs	r0, #48	; 0x30
 80060a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a6:	4422      	add	r2, r4
 80060a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060b0:	3302      	adds	r3, #2
 80060b2:	e7c7      	b.n	8006044 <_printf_common+0x58>
 80060b4:	2301      	movs	r3, #1
 80060b6:	4622      	mov	r2, r4
 80060b8:	4649      	mov	r1, r9
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c0      	blx	r8
 80060be:	3001      	adds	r0, #1
 80060c0:	d0e6      	beq.n	8006090 <_printf_common+0xa4>
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7d9      	b.n	800607a <_printf_common+0x8e>
	...

080060c8 <_printf_i>:
 80060c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	7e0f      	ldrb	r7, [r1, #24]
 80060ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d0:	2f78      	cmp	r7, #120	; 0x78
 80060d2:	4691      	mov	r9, r2
 80060d4:	4680      	mov	r8, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	469a      	mov	sl, r3
 80060da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060de:	d807      	bhi.n	80060f0 <_printf_i+0x28>
 80060e0:	2f62      	cmp	r7, #98	; 0x62
 80060e2:	d80a      	bhi.n	80060fa <_printf_i+0x32>
 80060e4:	2f00      	cmp	r7, #0
 80060e6:	f000 80d8 	beq.w	800629a <_printf_i+0x1d2>
 80060ea:	2f58      	cmp	r7, #88	; 0x58
 80060ec:	f000 80a3 	beq.w	8006236 <_printf_i+0x16e>
 80060f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f8:	e03a      	b.n	8006170 <_printf_i+0xa8>
 80060fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fe:	2b15      	cmp	r3, #21
 8006100:	d8f6      	bhi.n	80060f0 <_printf_i+0x28>
 8006102:	a101      	add	r1, pc, #4	; (adr r1, 8006108 <_printf_i+0x40>)
 8006104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006108:	08006161 	.word	0x08006161
 800610c:	08006175 	.word	0x08006175
 8006110:	080060f1 	.word	0x080060f1
 8006114:	080060f1 	.word	0x080060f1
 8006118:	080060f1 	.word	0x080060f1
 800611c:	080060f1 	.word	0x080060f1
 8006120:	08006175 	.word	0x08006175
 8006124:	080060f1 	.word	0x080060f1
 8006128:	080060f1 	.word	0x080060f1
 800612c:	080060f1 	.word	0x080060f1
 8006130:	080060f1 	.word	0x080060f1
 8006134:	08006281 	.word	0x08006281
 8006138:	080061a5 	.word	0x080061a5
 800613c:	08006263 	.word	0x08006263
 8006140:	080060f1 	.word	0x080060f1
 8006144:	080060f1 	.word	0x080060f1
 8006148:	080062a3 	.word	0x080062a3
 800614c:	080060f1 	.word	0x080060f1
 8006150:	080061a5 	.word	0x080061a5
 8006154:	080060f1 	.word	0x080060f1
 8006158:	080060f1 	.word	0x080060f1
 800615c:	0800626b 	.word	0x0800626b
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	602a      	str	r2, [r5, #0]
 8006168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800616c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006170:	2301      	movs	r3, #1
 8006172:	e0a3      	b.n	80062bc <_printf_i+0x1f4>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	6829      	ldr	r1, [r5, #0]
 8006178:	0606      	lsls	r6, r0, #24
 800617a:	f101 0304 	add.w	r3, r1, #4
 800617e:	d50a      	bpl.n	8006196 <_printf_i+0xce>
 8006180:	680e      	ldr	r6, [r1, #0]
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	2e00      	cmp	r6, #0
 8006186:	da03      	bge.n	8006190 <_printf_i+0xc8>
 8006188:	232d      	movs	r3, #45	; 0x2d
 800618a:	4276      	negs	r6, r6
 800618c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006190:	485e      	ldr	r0, [pc, #376]	; (800630c <_printf_i+0x244>)
 8006192:	230a      	movs	r3, #10
 8006194:	e019      	b.n	80061ca <_printf_i+0x102>
 8006196:	680e      	ldr	r6, [r1, #0]
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800619e:	bf18      	it	ne
 80061a0:	b236      	sxthne	r6, r6
 80061a2:	e7ef      	b.n	8006184 <_printf_i+0xbc>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	6820      	ldr	r0, [r4, #0]
 80061a8:	1d19      	adds	r1, r3, #4
 80061aa:	6029      	str	r1, [r5, #0]
 80061ac:	0601      	lsls	r1, r0, #24
 80061ae:	d501      	bpl.n	80061b4 <_printf_i+0xec>
 80061b0:	681e      	ldr	r6, [r3, #0]
 80061b2:	e002      	b.n	80061ba <_printf_i+0xf2>
 80061b4:	0646      	lsls	r6, r0, #25
 80061b6:	d5fb      	bpl.n	80061b0 <_printf_i+0xe8>
 80061b8:	881e      	ldrh	r6, [r3, #0]
 80061ba:	4854      	ldr	r0, [pc, #336]	; (800630c <_printf_i+0x244>)
 80061bc:	2f6f      	cmp	r7, #111	; 0x6f
 80061be:	bf0c      	ite	eq
 80061c0:	2308      	moveq	r3, #8
 80061c2:	230a      	movne	r3, #10
 80061c4:	2100      	movs	r1, #0
 80061c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ca:	6865      	ldr	r5, [r4, #4]
 80061cc:	60a5      	str	r5, [r4, #8]
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	bfa2      	ittt	ge
 80061d2:	6821      	ldrge	r1, [r4, #0]
 80061d4:	f021 0104 	bicge.w	r1, r1, #4
 80061d8:	6021      	strge	r1, [r4, #0]
 80061da:	b90e      	cbnz	r6, 80061e0 <_printf_i+0x118>
 80061dc:	2d00      	cmp	r5, #0
 80061de:	d04d      	beq.n	800627c <_printf_i+0x1b4>
 80061e0:	4615      	mov	r5, r2
 80061e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80061e6:	fb03 6711 	mls	r7, r3, r1, r6
 80061ea:	5dc7      	ldrb	r7, [r0, r7]
 80061ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061f0:	4637      	mov	r7, r6
 80061f2:	42bb      	cmp	r3, r7
 80061f4:	460e      	mov	r6, r1
 80061f6:	d9f4      	bls.n	80061e2 <_printf_i+0x11a>
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d10b      	bne.n	8006214 <_printf_i+0x14c>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	07de      	lsls	r6, r3, #31
 8006200:	d508      	bpl.n	8006214 <_printf_i+0x14c>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	6861      	ldr	r1, [r4, #4]
 8006206:	4299      	cmp	r1, r3
 8006208:	bfde      	ittt	le
 800620a:	2330      	movle	r3, #48	; 0x30
 800620c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006214:	1b52      	subs	r2, r2, r5
 8006216:	6122      	str	r2, [r4, #16]
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	464b      	mov	r3, r9
 800621e:	aa03      	add	r2, sp, #12
 8006220:	4621      	mov	r1, r4
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff fee2 	bl	8005fec <_printf_common>
 8006228:	3001      	adds	r0, #1
 800622a:	d14c      	bne.n	80062c6 <_printf_i+0x1fe>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b004      	add	sp, #16
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006236:	4835      	ldr	r0, [pc, #212]	; (800630c <_printf_i+0x244>)
 8006238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800623c:	6829      	ldr	r1, [r5, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f851 6b04 	ldr.w	r6, [r1], #4
 8006244:	6029      	str	r1, [r5, #0]
 8006246:	061d      	lsls	r5, r3, #24
 8006248:	d514      	bpl.n	8006274 <_printf_i+0x1ac>
 800624a:	07df      	lsls	r7, r3, #31
 800624c:	bf44      	itt	mi
 800624e:	f043 0320 	orrmi.w	r3, r3, #32
 8006252:	6023      	strmi	r3, [r4, #0]
 8006254:	b91e      	cbnz	r6, 800625e <_printf_i+0x196>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f023 0320 	bic.w	r3, r3, #32
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	2310      	movs	r3, #16
 8006260:	e7b0      	b.n	80061c4 <_printf_i+0xfc>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	f043 0320 	orr.w	r3, r3, #32
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	2378      	movs	r3, #120	; 0x78
 800626c:	4828      	ldr	r0, [pc, #160]	; (8006310 <_printf_i+0x248>)
 800626e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006272:	e7e3      	b.n	800623c <_printf_i+0x174>
 8006274:	0659      	lsls	r1, r3, #25
 8006276:	bf48      	it	mi
 8006278:	b2b6      	uxthmi	r6, r6
 800627a:	e7e6      	b.n	800624a <_printf_i+0x182>
 800627c:	4615      	mov	r5, r2
 800627e:	e7bb      	b.n	80061f8 <_printf_i+0x130>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	6826      	ldr	r6, [r4, #0]
 8006284:	6961      	ldr	r1, [r4, #20]
 8006286:	1d18      	adds	r0, r3, #4
 8006288:	6028      	str	r0, [r5, #0]
 800628a:	0635      	lsls	r5, r6, #24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	d501      	bpl.n	8006294 <_printf_i+0x1cc>
 8006290:	6019      	str	r1, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0x1d2>
 8006294:	0670      	lsls	r0, r6, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0x1c8>
 8006298:	8019      	strh	r1, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	4615      	mov	r5, r2
 80062a0:	e7ba      	b.n	8006218 <_printf_i+0x150>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	602a      	str	r2, [r5, #0]
 80062a8:	681d      	ldr	r5, [r3, #0]
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	2100      	movs	r1, #0
 80062ae:	4628      	mov	r0, r5
 80062b0:	f7f9 ff9e 	bl	80001f0 <memchr>
 80062b4:	b108      	cbz	r0, 80062ba <_printf_i+0x1f2>
 80062b6:	1b40      	subs	r0, r0, r5
 80062b8:	6060      	str	r0, [r4, #4]
 80062ba:	6863      	ldr	r3, [r4, #4]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	2300      	movs	r3, #0
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c4:	e7a8      	b.n	8006218 <_printf_i+0x150>
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	462a      	mov	r2, r5
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d0ab      	beq.n	800622c <_printf_i+0x164>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	079b      	lsls	r3, r3, #30
 80062d8:	d413      	bmi.n	8006302 <_printf_i+0x23a>
 80062da:	68e0      	ldr	r0, [r4, #12]
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	4298      	cmp	r0, r3
 80062e0:	bfb8      	it	lt
 80062e2:	4618      	movlt	r0, r3
 80062e4:	e7a4      	b.n	8006230 <_printf_i+0x168>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4632      	mov	r2, r6
 80062ea:	4649      	mov	r1, r9
 80062ec:	4640      	mov	r0, r8
 80062ee:	47d0      	blx	sl
 80062f0:	3001      	adds	r0, #1
 80062f2:	d09b      	beq.n	800622c <_printf_i+0x164>
 80062f4:	3501      	adds	r5, #1
 80062f6:	68e3      	ldr	r3, [r4, #12]
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dcf2      	bgt.n	80062e6 <_printf_i+0x21e>
 8006300:	e7eb      	b.n	80062da <_printf_i+0x212>
 8006302:	2500      	movs	r5, #0
 8006304:	f104 0619 	add.w	r6, r4, #25
 8006308:	e7f5      	b.n	80062f6 <_printf_i+0x22e>
 800630a:	bf00      	nop
 800630c:	08008b9a 	.word	0x08008b9a
 8006310:	08008bab 	.word	0x08008bab

08006314 <_sbrk_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4d06      	ldr	r5, [pc, #24]	; (8006330 <_sbrk_r+0x1c>)
 8006318:	2300      	movs	r3, #0
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	f7fc fb4c 	bl	80029bc <_sbrk>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_sbrk_r+0x1a>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_sbrk_r+0x1a>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	200003d0 	.word	0x200003d0

08006334 <siprintf>:
 8006334:	b40e      	push	{r1, r2, r3}
 8006336:	b500      	push	{lr}
 8006338:	b09c      	sub	sp, #112	; 0x70
 800633a:	ab1d      	add	r3, sp, #116	; 0x74
 800633c:	9002      	str	r0, [sp, #8]
 800633e:	9006      	str	r0, [sp, #24]
 8006340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006344:	4809      	ldr	r0, [pc, #36]	; (800636c <siprintf+0x38>)
 8006346:	9107      	str	r1, [sp, #28]
 8006348:	9104      	str	r1, [sp, #16]
 800634a:	4909      	ldr	r1, [pc, #36]	; (8006370 <siprintf+0x3c>)
 800634c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006350:	9105      	str	r1, [sp, #20]
 8006352:	6800      	ldr	r0, [r0, #0]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	a902      	add	r1, sp, #8
 8006358:	f001 fa9c 	bl	8007894 <_svfiprintf_r>
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	b01c      	add	sp, #112	; 0x70
 8006364:	f85d eb04 	ldr.w	lr, [sp], #4
 8006368:	b003      	add	sp, #12
 800636a:	4770      	bx	lr
 800636c:	2000000c 	.word	0x2000000c
 8006370:	ffff0208 	.word	0xffff0208

08006374 <quorem>:
 8006374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	6903      	ldr	r3, [r0, #16]
 800637a:	690c      	ldr	r4, [r1, #16]
 800637c:	42a3      	cmp	r3, r4
 800637e:	4607      	mov	r7, r0
 8006380:	f2c0 8081 	blt.w	8006486 <quorem+0x112>
 8006384:	3c01      	subs	r4, #1
 8006386:	f101 0814 	add.w	r8, r1, #20
 800638a:	f100 0514 	add.w	r5, r0, #20
 800638e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800639c:	3301      	adds	r3, #1
 800639e:	429a      	cmp	r2, r3
 80063a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ac:	d331      	bcc.n	8006412 <quorem+0x9e>
 80063ae:	f04f 0e00 	mov.w	lr, #0
 80063b2:	4640      	mov	r0, r8
 80063b4:	46ac      	mov	ip, r5
 80063b6:	46f2      	mov	sl, lr
 80063b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80063bc:	b293      	uxth	r3, r2
 80063be:	fb06 e303 	mla	r3, r6, r3, lr
 80063c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ebaa 0303 	sub.w	r3, sl, r3
 80063cc:	f8dc a000 	ldr.w	sl, [ip]
 80063d0:	0c12      	lsrs	r2, r2, #16
 80063d2:	fa13 f38a 	uxtah	r3, r3, sl
 80063d6:	fb06 e202 	mla	r2, r6, r2, lr
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	9b00      	ldr	r3, [sp, #0]
 80063de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063e2:	b292      	uxth	r2, r2
 80063e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80063f0:	4581      	cmp	r9, r0
 80063f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f6:	f84c 3b04 	str.w	r3, [ip], #4
 80063fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063fe:	d2db      	bcs.n	80063b8 <quorem+0x44>
 8006400:	f855 300b 	ldr.w	r3, [r5, fp]
 8006404:	b92b      	cbnz	r3, 8006412 <quorem+0x9e>
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	3b04      	subs	r3, #4
 800640a:	429d      	cmp	r5, r3
 800640c:	461a      	mov	r2, r3
 800640e:	d32e      	bcc.n	800646e <quorem+0xfa>
 8006410:	613c      	str	r4, [r7, #16]
 8006412:	4638      	mov	r0, r7
 8006414:	f001 f8ca 	bl	80075ac <__mcmp>
 8006418:	2800      	cmp	r0, #0
 800641a:	db24      	blt.n	8006466 <quorem+0xf2>
 800641c:	3601      	adds	r6, #1
 800641e:	4628      	mov	r0, r5
 8006420:	f04f 0c00 	mov.w	ip, #0
 8006424:	f858 2b04 	ldr.w	r2, [r8], #4
 8006428:	f8d0 e000 	ldr.w	lr, [r0]
 800642c:	b293      	uxth	r3, r2
 800642e:	ebac 0303 	sub.w	r3, ip, r3
 8006432:	0c12      	lsrs	r2, r2, #16
 8006434:	fa13 f38e 	uxtah	r3, r3, lr
 8006438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800643c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006446:	45c1      	cmp	r9, r8
 8006448:	f840 3b04 	str.w	r3, [r0], #4
 800644c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006450:	d2e8      	bcs.n	8006424 <quorem+0xb0>
 8006452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645a:	b922      	cbnz	r2, 8006466 <quorem+0xf2>
 800645c:	3b04      	subs	r3, #4
 800645e:	429d      	cmp	r5, r3
 8006460:	461a      	mov	r2, r3
 8006462:	d30a      	bcc.n	800647a <quorem+0x106>
 8006464:	613c      	str	r4, [r7, #16]
 8006466:	4630      	mov	r0, r6
 8006468:	b003      	add	sp, #12
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	3b04      	subs	r3, #4
 8006472:	2a00      	cmp	r2, #0
 8006474:	d1cc      	bne.n	8006410 <quorem+0x9c>
 8006476:	3c01      	subs	r4, #1
 8006478:	e7c7      	b.n	800640a <quorem+0x96>
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	3b04      	subs	r3, #4
 800647e:	2a00      	cmp	r2, #0
 8006480:	d1f0      	bne.n	8006464 <quorem+0xf0>
 8006482:	3c01      	subs	r4, #1
 8006484:	e7eb      	b.n	800645e <quorem+0xea>
 8006486:	2000      	movs	r0, #0
 8006488:	e7ee      	b.n	8006468 <quorem+0xf4>
 800648a:	0000      	movs	r0, r0
 800648c:	0000      	movs	r0, r0
	...

08006490 <_dtoa_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	ed2d 8b04 	vpush	{d8-d9}
 8006498:	ec57 6b10 	vmov	r6, r7, d0
 800649c:	b093      	sub	sp, #76	; 0x4c
 800649e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064a4:	9106      	str	r1, [sp, #24]
 80064a6:	ee10 aa10 	vmov	sl, s0
 80064aa:	4604      	mov	r4, r0
 80064ac:	9209      	str	r2, [sp, #36]	; 0x24
 80064ae:	930c      	str	r3, [sp, #48]	; 0x30
 80064b0:	46bb      	mov	fp, r7
 80064b2:	b975      	cbnz	r5, 80064d2 <_dtoa_r+0x42>
 80064b4:	2010      	movs	r0, #16
 80064b6:	f7ff f9d3 	bl	8005860 <malloc>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6260      	str	r0, [r4, #36]	; 0x24
 80064be:	b920      	cbnz	r0, 80064ca <_dtoa_r+0x3a>
 80064c0:	4ba7      	ldr	r3, [pc, #668]	; (8006760 <_dtoa_r+0x2d0>)
 80064c2:	21ea      	movs	r1, #234	; 0xea
 80064c4:	48a7      	ldr	r0, [pc, #668]	; (8006764 <_dtoa_r+0x2d4>)
 80064c6:	f001 fae5 	bl	8007a94 <__assert_func>
 80064ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ce:	6005      	str	r5, [r0, #0]
 80064d0:	60c5      	str	r5, [r0, #12]
 80064d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	b151      	cbz	r1, 80064ee <_dtoa_r+0x5e>
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	604a      	str	r2, [r1, #4]
 80064dc:	2301      	movs	r3, #1
 80064de:	4093      	lsls	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fe20 	bl	8007128 <_Bfree>
 80064e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	1e3b      	subs	r3, r7, #0
 80064f0:	bfaa      	itet	ge
 80064f2:	2300      	movge	r3, #0
 80064f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064f8:	f8c8 3000 	strge.w	r3, [r8]
 80064fc:	4b9a      	ldr	r3, [pc, #616]	; (8006768 <_dtoa_r+0x2d8>)
 80064fe:	bfbc      	itt	lt
 8006500:	2201      	movlt	r2, #1
 8006502:	f8c8 2000 	strlt.w	r2, [r8]
 8006506:	ea33 030b 	bics.w	r3, r3, fp
 800650a:	d11b      	bne.n	8006544 <_dtoa_r+0xb4>
 800650c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800650e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006518:	4333      	orrs	r3, r6
 800651a:	f000 8592 	beq.w	8007042 <_dtoa_r+0xbb2>
 800651e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006520:	b963      	cbnz	r3, 800653c <_dtoa_r+0xac>
 8006522:	4b92      	ldr	r3, [pc, #584]	; (800676c <_dtoa_r+0x2dc>)
 8006524:	e022      	b.n	800656c <_dtoa_r+0xdc>
 8006526:	4b92      	ldr	r3, [pc, #584]	; (8006770 <_dtoa_r+0x2e0>)
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	3308      	adds	r3, #8
 800652c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	9801      	ldr	r0, [sp, #4]
 8006532:	b013      	add	sp, #76	; 0x4c
 8006534:	ecbd 8b04 	vpop	{d8-d9}
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653c:	4b8b      	ldr	r3, [pc, #556]	; (800676c <_dtoa_r+0x2dc>)
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	3303      	adds	r3, #3
 8006542:	e7f3      	b.n	800652c <_dtoa_r+0x9c>
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4650      	mov	r0, sl
 800654a:	4659      	mov	r1, fp
 800654c:	f7fa fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006550:	ec4b ab19 	vmov	d9, sl, fp
 8006554:	4680      	mov	r8, r0
 8006556:	b158      	cbz	r0, 8006570 <_dtoa_r+0xe0>
 8006558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800655a:	2301      	movs	r3, #1
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 856b 	beq.w	800703c <_dtoa_r+0xbac>
 8006566:	4883      	ldr	r0, [pc, #524]	; (8006774 <_dtoa_r+0x2e4>)
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	1e43      	subs	r3, r0, #1
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	e7df      	b.n	8006530 <_dtoa_r+0xa0>
 8006570:	ec4b ab10 	vmov	d0, sl, fp
 8006574:	aa10      	add	r2, sp, #64	; 0x40
 8006576:	a911      	add	r1, sp, #68	; 0x44
 8006578:	4620      	mov	r0, r4
 800657a:	f001 f8bd 	bl	80076f8 <__d2b>
 800657e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006582:	ee08 0a10 	vmov	s16, r0
 8006586:	2d00      	cmp	r5, #0
 8006588:	f000 8084 	beq.w	8006694 <_dtoa_r+0x204>
 800658c:	ee19 3a90 	vmov	r3, s19
 8006590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006594:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006598:	4656      	mov	r6, sl
 800659a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800659e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065a6:	4b74      	ldr	r3, [pc, #464]	; (8006778 <_dtoa_r+0x2e8>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	4630      	mov	r0, r6
 80065ac:	4639      	mov	r1, r7
 80065ae:	f7f9 fe73 	bl	8000298 <__aeabi_dsub>
 80065b2:	a365      	add	r3, pc, #404	; (adr r3, 8006748 <_dtoa_r+0x2b8>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7fa f826 	bl	8000608 <__aeabi_dmul>
 80065bc:	a364      	add	r3, pc, #400	; (adr r3, 8006750 <_dtoa_r+0x2c0>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 fe6b 	bl	800029c <__adddf3>
 80065c6:	4606      	mov	r6, r0
 80065c8:	4628      	mov	r0, r5
 80065ca:	460f      	mov	r7, r1
 80065cc:	f7f9 ffb2 	bl	8000534 <__aeabi_i2d>
 80065d0:	a361      	add	r3, pc, #388	; (adr r3, 8006758 <_dtoa_r+0x2c8>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7fa f817 	bl	8000608 <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 fe5b 	bl	800029c <__adddf3>
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	f7fa fabd 	bl	8000b68 <__aeabi_d2iz>
 80065ee:	2200      	movs	r2, #0
 80065f0:	9000      	str	r0, [sp, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa fa78 	bl	8000aec <__aeabi_dcmplt>
 80065fc:	b150      	cbz	r0, 8006614 <_dtoa_r+0x184>
 80065fe:	9800      	ldr	r0, [sp, #0]
 8006600:	f7f9 ff98 	bl	8000534 <__aeabi_i2d>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	f7fa fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800660c:	b910      	cbnz	r0, 8006614 <_dtoa_r+0x184>
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	9b00      	ldr	r3, [sp, #0]
 8006616:	2b16      	cmp	r3, #22
 8006618:	d85a      	bhi.n	80066d0 <_dtoa_r+0x240>
 800661a:	9a00      	ldr	r2, [sp, #0]
 800661c:	4b57      	ldr	r3, [pc, #348]	; (800677c <_dtoa_r+0x2ec>)
 800661e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	ec51 0b19 	vmov	r0, r1, d9
 800662a:	f7fa fa5f 	bl	8000aec <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d050      	beq.n	80066d4 <_dtoa_r+0x244>
 8006632:	9b00      	ldr	r3, [sp, #0]
 8006634:	3b01      	subs	r3, #1
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	930b      	str	r3, [sp, #44]	; 0x2c
 800663c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800663e:	1b5d      	subs	r5, r3, r5
 8006640:	1e6b      	subs	r3, r5, #1
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	bf45      	ittet	mi
 8006646:	f1c5 0301 	rsbmi	r3, r5, #1
 800664a:	9304      	strmi	r3, [sp, #16]
 800664c:	2300      	movpl	r3, #0
 800664e:	2300      	movmi	r3, #0
 8006650:	bf4c      	ite	mi
 8006652:	9305      	strmi	r3, [sp, #20]
 8006654:	9304      	strpl	r3, [sp, #16]
 8006656:	9b00      	ldr	r3, [sp, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	db3d      	blt.n	80066d8 <_dtoa_r+0x248>
 800665c:	9b05      	ldr	r3, [sp, #20]
 800665e:	9a00      	ldr	r2, [sp, #0]
 8006660:	920a      	str	r2, [sp, #40]	; 0x28
 8006662:	4413      	add	r3, r2
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	2300      	movs	r3, #0
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	2b09      	cmp	r3, #9
 800666e:	f200 8089 	bhi.w	8006784 <_dtoa_r+0x2f4>
 8006672:	2b05      	cmp	r3, #5
 8006674:	bfc4      	itt	gt
 8006676:	3b04      	subgt	r3, #4
 8006678:	9306      	strgt	r3, [sp, #24]
 800667a:	9b06      	ldr	r3, [sp, #24]
 800667c:	f1a3 0302 	sub.w	r3, r3, #2
 8006680:	bfcc      	ite	gt
 8006682:	2500      	movgt	r5, #0
 8006684:	2501      	movle	r5, #1
 8006686:	2b03      	cmp	r3, #3
 8006688:	f200 8087 	bhi.w	800679a <_dtoa_r+0x30a>
 800668c:	e8df f003 	tbb	[pc, r3]
 8006690:	59383a2d 	.word	0x59383a2d
 8006694:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006698:	441d      	add	r5, r3
 800669a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800669e:	2b20      	cmp	r3, #32
 80066a0:	bfc1      	itttt	gt
 80066a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80066ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066b2:	bfda      	itte	le
 80066b4:	f1c3 0320 	rsble	r3, r3, #32
 80066b8:	fa06 f003 	lslle.w	r0, r6, r3
 80066bc:	4318      	orrgt	r0, r3
 80066be:	f7f9 ff29 	bl	8000514 <__aeabi_ui2d>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4606      	mov	r6, r0
 80066c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066ca:	3d01      	subs	r5, #1
 80066cc:	930e      	str	r3, [sp, #56]	; 0x38
 80066ce:	e76a      	b.n	80065a6 <_dtoa_r+0x116>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e7b2      	b.n	800663a <_dtoa_r+0x1aa>
 80066d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80066d6:	e7b1      	b.n	800663c <_dtoa_r+0x1ac>
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	9a00      	ldr	r2, [sp, #0]
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	4253      	negs	r3, r2
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	2300      	movs	r3, #0
 80066e6:	930a      	str	r3, [sp, #40]	; 0x28
 80066e8:	e7bf      	b.n	800666a <_dtoa_r+0x1da>
 80066ea:	2300      	movs	r3, #0
 80066ec:	9308      	str	r3, [sp, #32]
 80066ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc55      	bgt.n	80067a0 <_dtoa_r+0x310>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066fa:	461a      	mov	r2, r3
 80066fc:	9209      	str	r2, [sp, #36]	; 0x24
 80066fe:	e00c      	b.n	800671a <_dtoa_r+0x28a>
 8006700:	2301      	movs	r3, #1
 8006702:	e7f3      	b.n	80066ec <_dtoa_r+0x25c>
 8006704:	2300      	movs	r3, #0
 8006706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006708:	9308      	str	r3, [sp, #32]
 800670a:	9b00      	ldr	r3, [sp, #0]
 800670c:	4413      	add	r3, r2
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	3301      	adds	r3, #1
 8006712:	2b01      	cmp	r3, #1
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	bfb8      	it	lt
 8006718:	2301      	movlt	r3, #1
 800671a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800671c:	2200      	movs	r2, #0
 800671e:	6042      	str	r2, [r0, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	f102 0614 	add.w	r6, r2, #20
 8006726:	429e      	cmp	r6, r3
 8006728:	6841      	ldr	r1, [r0, #4]
 800672a:	d93d      	bls.n	80067a8 <_dtoa_r+0x318>
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fcbb 	bl	80070a8 <_Balloc>
 8006732:	9001      	str	r0, [sp, #4]
 8006734:	2800      	cmp	r0, #0
 8006736:	d13b      	bne.n	80067b0 <_dtoa_r+0x320>
 8006738:	4b11      	ldr	r3, [pc, #68]	; (8006780 <_dtoa_r+0x2f0>)
 800673a:	4602      	mov	r2, r0
 800673c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006740:	e6c0      	b.n	80064c4 <_dtoa_r+0x34>
 8006742:	2301      	movs	r3, #1
 8006744:	e7df      	b.n	8006706 <_dtoa_r+0x276>
 8006746:	bf00      	nop
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	08008bc9 	.word	0x08008bc9
 8006764:	08008be0 	.word	0x08008be0
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	08008bc5 	.word	0x08008bc5
 8006770:	08008bbc 	.word	0x08008bbc
 8006774:	08008b99 	.word	0x08008b99
 8006778:	3ff80000 	.word	0x3ff80000
 800677c:	08008cd0 	.word	0x08008cd0
 8006780:	08008c3b 	.word	0x08008c3b
 8006784:	2501      	movs	r5, #1
 8006786:	2300      	movs	r3, #0
 8006788:	9306      	str	r3, [sp, #24]
 800678a:	9508      	str	r5, [sp, #32]
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006794:	2200      	movs	r2, #0
 8006796:	2312      	movs	r3, #18
 8006798:	e7b0      	b.n	80066fc <_dtoa_r+0x26c>
 800679a:	2301      	movs	r3, #1
 800679c:	9308      	str	r3, [sp, #32]
 800679e:	e7f5      	b.n	800678c <_dtoa_r+0x2fc>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067a6:	e7b8      	b.n	800671a <_dtoa_r+0x28a>
 80067a8:	3101      	adds	r1, #1
 80067aa:	6041      	str	r1, [r0, #4]
 80067ac:	0052      	lsls	r2, r2, #1
 80067ae:	e7b8      	b.n	8006722 <_dtoa_r+0x292>
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	2b0e      	cmp	r3, #14
 80067ba:	f200 809d 	bhi.w	80068f8 <_dtoa_r+0x468>
 80067be:	2d00      	cmp	r5, #0
 80067c0:	f000 809a 	beq.w	80068f8 <_dtoa_r+0x468>
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	dd32      	ble.n	8006830 <_dtoa_r+0x3a0>
 80067ca:	4ab7      	ldr	r2, [pc, #732]	; (8006aa8 <_dtoa_r+0x618>)
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	05d8      	lsls	r0, r3, #23
 80067dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067e0:	d516      	bpl.n	8006810 <_dtoa_r+0x380>
 80067e2:	4bb2      	ldr	r3, [pc, #712]	; (8006aac <_dtoa_r+0x61c>)
 80067e4:	ec51 0b19 	vmov	r0, r1, d9
 80067e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067ec:	f7fa f836 	bl	800085c <__aeabi_ddiv>
 80067f0:	f007 070f 	and.w	r7, r7, #15
 80067f4:	4682      	mov	sl, r0
 80067f6:	468b      	mov	fp, r1
 80067f8:	2503      	movs	r5, #3
 80067fa:	4eac      	ldr	r6, [pc, #688]	; (8006aac <_dtoa_r+0x61c>)
 80067fc:	b957      	cbnz	r7, 8006814 <_dtoa_r+0x384>
 80067fe:	4642      	mov	r2, r8
 8006800:	464b      	mov	r3, r9
 8006802:	4650      	mov	r0, sl
 8006804:	4659      	mov	r1, fp
 8006806:	f7fa f829 	bl	800085c <__aeabi_ddiv>
 800680a:	4682      	mov	sl, r0
 800680c:	468b      	mov	fp, r1
 800680e:	e028      	b.n	8006862 <_dtoa_r+0x3d2>
 8006810:	2502      	movs	r5, #2
 8006812:	e7f2      	b.n	80067fa <_dtoa_r+0x36a>
 8006814:	07f9      	lsls	r1, r7, #31
 8006816:	d508      	bpl.n	800682a <_dtoa_r+0x39a>
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006820:	f7f9 fef2 	bl	8000608 <__aeabi_dmul>
 8006824:	3501      	adds	r5, #1
 8006826:	4680      	mov	r8, r0
 8006828:	4689      	mov	r9, r1
 800682a:	107f      	asrs	r7, r7, #1
 800682c:	3608      	adds	r6, #8
 800682e:	e7e5      	b.n	80067fc <_dtoa_r+0x36c>
 8006830:	f000 809b 	beq.w	800696a <_dtoa_r+0x4da>
 8006834:	9b00      	ldr	r3, [sp, #0]
 8006836:	4f9d      	ldr	r7, [pc, #628]	; (8006aac <_dtoa_r+0x61c>)
 8006838:	425e      	negs	r6, r3
 800683a:	4b9b      	ldr	r3, [pc, #620]	; (8006aa8 <_dtoa_r+0x618>)
 800683c:	f006 020f 	and.w	r2, r6, #15
 8006840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	ec51 0b19 	vmov	r0, r1, d9
 800684c:	f7f9 fedc 	bl	8000608 <__aeabi_dmul>
 8006850:	1136      	asrs	r6, r6, #4
 8006852:	4682      	mov	sl, r0
 8006854:	468b      	mov	fp, r1
 8006856:	2300      	movs	r3, #0
 8006858:	2502      	movs	r5, #2
 800685a:	2e00      	cmp	r6, #0
 800685c:	d17a      	bne.n	8006954 <_dtoa_r+0x4c4>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1d3      	bne.n	800680a <_dtoa_r+0x37a>
 8006862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8082 	beq.w	800696e <_dtoa_r+0x4de>
 800686a:	4b91      	ldr	r3, [pc, #580]	; (8006ab0 <_dtoa_r+0x620>)
 800686c:	2200      	movs	r2, #0
 800686e:	4650      	mov	r0, sl
 8006870:	4659      	mov	r1, fp
 8006872:	f7fa f93b 	bl	8000aec <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	d079      	beq.n	800696e <_dtoa_r+0x4de>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d076      	beq.n	800696e <_dtoa_r+0x4de>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd36      	ble.n	80068f4 <_dtoa_r+0x464>
 8006886:	9b00      	ldr	r3, [sp, #0]
 8006888:	4650      	mov	r0, sl
 800688a:	4659      	mov	r1, fp
 800688c:	1e5f      	subs	r7, r3, #1
 800688e:	2200      	movs	r2, #0
 8006890:	4b88      	ldr	r3, [pc, #544]	; (8006ab4 <_dtoa_r+0x624>)
 8006892:	f7f9 feb9 	bl	8000608 <__aeabi_dmul>
 8006896:	9e02      	ldr	r6, [sp, #8]
 8006898:	4682      	mov	sl, r0
 800689a:	468b      	mov	fp, r1
 800689c:	3501      	adds	r5, #1
 800689e:	4628      	mov	r0, r5
 80068a0:	f7f9 fe48 	bl	8000534 <__aeabi_i2d>
 80068a4:	4652      	mov	r2, sl
 80068a6:	465b      	mov	r3, fp
 80068a8:	f7f9 feae 	bl	8000608 <__aeabi_dmul>
 80068ac:	4b82      	ldr	r3, [pc, #520]	; (8006ab8 <_dtoa_r+0x628>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	f7f9 fcf4 	bl	800029c <__adddf3>
 80068b4:	46d0      	mov	r8, sl
 80068b6:	46d9      	mov	r9, fp
 80068b8:	4682      	mov	sl, r0
 80068ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d158      	bne.n	8006974 <_dtoa_r+0x4e4>
 80068c2:	4b7e      	ldr	r3, [pc, #504]	; (8006abc <_dtoa_r+0x62c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7f9 fce5 	bl	8000298 <__aeabi_dsub>
 80068ce:	4652      	mov	r2, sl
 80068d0:	465b      	mov	r3, fp
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	f7fa f927 	bl	8000b28 <__aeabi_dcmpgt>
 80068da:	2800      	cmp	r0, #0
 80068dc:	f040 8295 	bne.w	8006e0a <_dtoa_r+0x97a>
 80068e0:	4652      	mov	r2, sl
 80068e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7fa f8ff 	bl	8000aec <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f040 8289 	bne.w	8006e06 <_dtoa_r+0x976>
 80068f4:	ec5b ab19 	vmov	sl, fp, d9
 80068f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f2c0 8148 	blt.w	8006b90 <_dtoa_r+0x700>
 8006900:	9a00      	ldr	r2, [sp, #0]
 8006902:	2a0e      	cmp	r2, #14
 8006904:	f300 8144 	bgt.w	8006b90 <_dtoa_r+0x700>
 8006908:	4b67      	ldr	r3, [pc, #412]	; (8006aa8 <_dtoa_r+0x618>)
 800690a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800690e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	f280 80d5 	bge.w	8006ac4 <_dtoa_r+0x634>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f300 80d1 	bgt.w	8006ac4 <_dtoa_r+0x634>
 8006922:	f040 826f 	bne.w	8006e04 <_dtoa_r+0x974>
 8006926:	4b65      	ldr	r3, [pc, #404]	; (8006abc <_dtoa_r+0x62c>)
 8006928:	2200      	movs	r2, #0
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 fe6b 	bl	8000608 <__aeabi_dmul>
 8006932:	4652      	mov	r2, sl
 8006934:	465b      	mov	r3, fp
 8006936:	f7fa f8ed 	bl	8000b14 <__aeabi_dcmpge>
 800693a:	9e03      	ldr	r6, [sp, #12]
 800693c:	4637      	mov	r7, r6
 800693e:	2800      	cmp	r0, #0
 8006940:	f040 8245 	bne.w	8006dce <_dtoa_r+0x93e>
 8006944:	9d01      	ldr	r5, [sp, #4]
 8006946:	2331      	movs	r3, #49	; 0x31
 8006948:	f805 3b01 	strb.w	r3, [r5], #1
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	e240      	b.n	8006dd6 <_dtoa_r+0x946>
 8006954:	07f2      	lsls	r2, r6, #31
 8006956:	d505      	bpl.n	8006964 <_dtoa_r+0x4d4>
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	f7f9 fe54 	bl	8000608 <__aeabi_dmul>
 8006960:	3501      	adds	r5, #1
 8006962:	2301      	movs	r3, #1
 8006964:	1076      	asrs	r6, r6, #1
 8006966:	3708      	adds	r7, #8
 8006968:	e777      	b.n	800685a <_dtoa_r+0x3ca>
 800696a:	2502      	movs	r5, #2
 800696c:	e779      	b.n	8006862 <_dtoa_r+0x3d2>
 800696e:	9f00      	ldr	r7, [sp, #0]
 8006970:	9e03      	ldr	r6, [sp, #12]
 8006972:	e794      	b.n	800689e <_dtoa_r+0x40e>
 8006974:	9901      	ldr	r1, [sp, #4]
 8006976:	4b4c      	ldr	r3, [pc, #304]	; (8006aa8 <_dtoa_r+0x618>)
 8006978:	4431      	add	r1, r6
 800697a:	910d      	str	r1, [sp, #52]	; 0x34
 800697c:	9908      	ldr	r1, [sp, #32]
 800697e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006986:	2900      	cmp	r1, #0
 8006988:	d043      	beq.n	8006a12 <_dtoa_r+0x582>
 800698a:	494d      	ldr	r1, [pc, #308]	; (8006ac0 <_dtoa_r+0x630>)
 800698c:	2000      	movs	r0, #0
 800698e:	f7f9 ff65 	bl	800085c <__aeabi_ddiv>
 8006992:	4652      	mov	r2, sl
 8006994:	465b      	mov	r3, fp
 8006996:	f7f9 fc7f 	bl	8000298 <__aeabi_dsub>
 800699a:	9d01      	ldr	r5, [sp, #4]
 800699c:	4682      	mov	sl, r0
 800699e:	468b      	mov	fp, r1
 80069a0:	4649      	mov	r1, r9
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7fa f8e0 	bl	8000b68 <__aeabi_d2iz>
 80069a8:	4606      	mov	r6, r0
 80069aa:	f7f9 fdc3 	bl	8000534 <__aeabi_i2d>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fc6f 	bl	8000298 <__aeabi_dsub>
 80069ba:	3630      	adds	r6, #48	; 0x30
 80069bc:	f805 6b01 	strb.w	r6, [r5], #1
 80069c0:	4652      	mov	r2, sl
 80069c2:	465b      	mov	r3, fp
 80069c4:	4680      	mov	r8, r0
 80069c6:	4689      	mov	r9, r1
 80069c8:	f7fa f890 	bl	8000aec <__aeabi_dcmplt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d163      	bne.n	8006a98 <_dtoa_r+0x608>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	4936      	ldr	r1, [pc, #216]	; (8006ab0 <_dtoa_r+0x620>)
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7f9 fc5e 	bl	8000298 <__aeabi_dsub>
 80069dc:	4652      	mov	r2, sl
 80069de:	465b      	mov	r3, fp
 80069e0:	f7fa f884 	bl	8000aec <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 80b5 	bne.w	8006b54 <_dtoa_r+0x6c4>
 80069ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ec:	429d      	cmp	r5, r3
 80069ee:	d081      	beq.n	80068f4 <_dtoa_r+0x464>
 80069f0:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <_dtoa_r+0x624>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	4650      	mov	r0, sl
 80069f6:	4659      	mov	r1, fp
 80069f8:	f7f9 fe06 	bl	8000608 <__aeabi_dmul>
 80069fc:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <_dtoa_r+0x624>)
 80069fe:	4682      	mov	sl, r0
 8006a00:	468b      	mov	fp, r1
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	2200      	movs	r2, #0
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4689      	mov	r9, r1
 8006a10:	e7c6      	b.n	80069a0 <_dtoa_r+0x510>
 8006a12:	4650      	mov	r0, sl
 8006a14:	4659      	mov	r1, fp
 8006a16:	f7f9 fdf7 	bl	8000608 <__aeabi_dmul>
 8006a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a1c:	9d01      	ldr	r5, [sp, #4]
 8006a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a20:	4682      	mov	sl, r0
 8006a22:	468b      	mov	fp, r1
 8006a24:	4649      	mov	r1, r9
 8006a26:	4640      	mov	r0, r8
 8006a28:	f7fa f89e 	bl	8000b68 <__aeabi_d2iz>
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	f7f9 fd81 	bl	8000534 <__aeabi_i2d>
 8006a32:	3630      	adds	r6, #48	; 0x30
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4640      	mov	r0, r8
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	f7f9 fc2c 	bl	8000298 <__aeabi_dsub>
 8006a40:	f805 6b01 	strb.w	r6, [r5], #1
 8006a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a46:	429d      	cmp	r5, r3
 8006a48:	4680      	mov	r8, r0
 8006a4a:	4689      	mov	r9, r1
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	d124      	bne.n	8006a9c <_dtoa_r+0x60c>
 8006a52:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <_dtoa_r+0x630>)
 8006a54:	4650      	mov	r0, sl
 8006a56:	4659      	mov	r1, fp
 8006a58:	f7f9 fc20 	bl	800029c <__adddf3>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7fa f860 	bl	8000b28 <__aeabi_dcmpgt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d173      	bne.n	8006b54 <_dtoa_r+0x6c4>
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	465b      	mov	r3, fp
 8006a70:	4913      	ldr	r1, [pc, #76]	; (8006ac0 <_dtoa_r+0x630>)
 8006a72:	2000      	movs	r0, #0
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7fa f834 	bl	8000aec <__aeabi_dcmplt>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f43f af35 	beq.w	80068f4 <_dtoa_r+0x464>
 8006a8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a8c:	1e6b      	subs	r3, r5, #1
 8006a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d0f8      	beq.n	8006a8a <_dtoa_r+0x5fa>
 8006a98:	9700      	str	r7, [sp, #0]
 8006a9a:	e049      	b.n	8006b30 <_dtoa_r+0x6a0>
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <_dtoa_r+0x624>)
 8006a9e:	f7f9 fdb3 	bl	8000608 <__aeabi_dmul>
 8006aa2:	4680      	mov	r8, r0
 8006aa4:	4689      	mov	r9, r1
 8006aa6:	e7bd      	b.n	8006a24 <_dtoa_r+0x594>
 8006aa8:	08008cd0 	.word	0x08008cd0
 8006aac:	08008ca8 	.word	0x08008ca8
 8006ab0:	3ff00000 	.word	0x3ff00000
 8006ab4:	40240000 	.word	0x40240000
 8006ab8:	401c0000 	.word	0x401c0000
 8006abc:	40140000 	.word	0x40140000
 8006ac0:	3fe00000 	.word	0x3fe00000
 8006ac4:	9d01      	ldr	r5, [sp, #4]
 8006ac6:	4656      	mov	r6, sl
 8006ac8:	465f      	mov	r7, fp
 8006aca:	4642      	mov	r2, r8
 8006acc:	464b      	mov	r3, r9
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fec3 	bl	800085c <__aeabi_ddiv>
 8006ad6:	f7fa f847 	bl	8000b68 <__aeabi_d2iz>
 8006ada:	4682      	mov	sl, r0
 8006adc:	f7f9 fd2a 	bl	8000534 <__aeabi_i2d>
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	f7f9 fd90 	bl	8000608 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006af4:	f7f9 fbd0 	bl	8000298 <__aeabi_dsub>
 8006af8:	f805 6b01 	strb.w	r6, [r5], #1
 8006afc:	9e01      	ldr	r6, [sp, #4]
 8006afe:	9f03      	ldr	r7, [sp, #12]
 8006b00:	1bae      	subs	r6, r5, r6
 8006b02:	42b7      	cmp	r7, r6
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	d135      	bne.n	8006b76 <_dtoa_r+0x6e6>
 8006b0a:	f7f9 fbc7 	bl	800029c <__adddf3>
 8006b0e:	4642      	mov	r2, r8
 8006b10:	464b      	mov	r3, r9
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	f7fa f807 	bl	8000b28 <__aeabi_dcmpgt>
 8006b1a:	b9d0      	cbnz	r0, 8006b52 <_dtoa_r+0x6c2>
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	464b      	mov	r3, r9
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b28:	b110      	cbz	r0, 8006b30 <_dtoa_r+0x6a0>
 8006b2a:	f01a 0f01 	tst.w	sl, #1
 8006b2e:	d110      	bne.n	8006b52 <_dtoa_r+0x6c2>
 8006b30:	4620      	mov	r0, r4
 8006b32:	ee18 1a10 	vmov	r1, s16
 8006b36:	f000 faf7 	bl	8007128 <_Bfree>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9800      	ldr	r0, [sp, #0]
 8006b3e:	702b      	strb	r3, [r5, #0]
 8006b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b42:	3001      	adds	r0, #1
 8006b44:	6018      	str	r0, [r3, #0]
 8006b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f acf1 	beq.w	8006530 <_dtoa_r+0xa0>
 8006b4e:	601d      	str	r5, [r3, #0]
 8006b50:	e4ee      	b.n	8006530 <_dtoa_r+0xa0>
 8006b52:	9f00      	ldr	r7, [sp, #0]
 8006b54:	462b      	mov	r3, r5
 8006b56:	461d      	mov	r5, r3
 8006b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5c:	2a39      	cmp	r2, #57	; 0x39
 8006b5e:	d106      	bne.n	8006b6e <_dtoa_r+0x6de>
 8006b60:	9a01      	ldr	r2, [sp, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d1f7      	bne.n	8006b56 <_dtoa_r+0x6c6>
 8006b66:	9901      	ldr	r1, [sp, #4]
 8006b68:	2230      	movs	r2, #48	; 0x30
 8006b6a:	3701      	adds	r7, #1
 8006b6c:	700a      	strb	r2, [r1, #0]
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	3201      	adds	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	e790      	b.n	8006a98 <_dtoa_r+0x608>
 8006b76:	4ba6      	ldr	r3, [pc, #664]	; (8006e10 <_dtoa_r+0x980>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fd45 	bl	8000608 <__aeabi_dmul>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	4606      	mov	r6, r0
 8006b84:	460f      	mov	r7, r1
 8006b86:	f7f9 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d09d      	beq.n	8006aca <_dtoa_r+0x63a>
 8006b8e:	e7cf      	b.n	8006b30 <_dtoa_r+0x6a0>
 8006b90:	9a08      	ldr	r2, [sp, #32]
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	f000 80d7 	beq.w	8006d46 <_dtoa_r+0x8b6>
 8006b98:	9a06      	ldr	r2, [sp, #24]
 8006b9a:	2a01      	cmp	r2, #1
 8006b9c:	f300 80ba 	bgt.w	8006d14 <_dtoa_r+0x884>
 8006ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ba2:	2a00      	cmp	r2, #0
 8006ba4:	f000 80b2 	beq.w	8006d0c <_dtoa_r+0x87c>
 8006ba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bac:	9e07      	ldr	r6, [sp, #28]
 8006bae:	9d04      	ldr	r5, [sp, #16]
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	9204      	str	r2, [sp, #16]
 8006bb6:	9a05      	ldr	r2, [sp, #20]
 8006bb8:	2101      	movs	r1, #1
 8006bba:	441a      	add	r2, r3
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	9205      	str	r2, [sp, #20]
 8006bc0:	f000 fb6a 	bl	8007298 <__i2b>
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	dd0c      	ble.n	8006be4 <_dtoa_r+0x754>
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dd09      	ble.n	8006be4 <_dtoa_r+0x754>
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	9a04      	ldr	r2, [sp, #16]
 8006bd4:	bfa8      	it	ge
 8006bd6:	462b      	movge	r3, r5
 8006bd8:	1ad2      	subs	r2, r2, r3
 8006bda:	9204      	str	r2, [sp, #16]
 8006bdc:	9a05      	ldr	r2, [sp, #20]
 8006bde:	1aed      	subs	r5, r5, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	b31b      	cbz	r3, 8006c30 <_dtoa_r+0x7a0>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80af 	beq.w	8006d4e <_dtoa_r+0x8be>
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	dd13      	ble.n	8006c1c <_dtoa_r+0x78c>
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fc0d 	bl	8007418 <__pow5mult>
 8006bfe:	ee18 2a10 	vmov	r2, s16
 8006c02:	4601      	mov	r1, r0
 8006c04:	4607      	mov	r7, r0
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fb5c 	bl	80072c4 <__multiply>
 8006c0c:	ee18 1a10 	vmov	r1, s16
 8006c10:	4680      	mov	r8, r0
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fa88 	bl	8007128 <_Bfree>
 8006c18:	ee08 8a10 	vmov	s16, r8
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	1b9a      	subs	r2, r3, r6
 8006c20:	d006      	beq.n	8006c30 <_dtoa_r+0x7a0>
 8006c22:	ee18 1a10 	vmov	r1, s16
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fbf6 	bl	8007418 <__pow5mult>
 8006c2c:	ee08 0a10 	vmov	s16, r0
 8006c30:	2101      	movs	r1, #1
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb30 	bl	8007298 <__i2b>
 8006c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	f340 8088 	ble.w	8006d52 <_dtoa_r+0x8c2>
 8006c42:	461a      	mov	r2, r3
 8006c44:	4601      	mov	r1, r0
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 fbe6 	bl	8007418 <__pow5mult>
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	4606      	mov	r6, r0
 8006c52:	f340 8081 	ble.w	8006d58 <_dtoa_r+0x8c8>
 8006c56:	f04f 0800 	mov.w	r8, #0
 8006c5a:	6933      	ldr	r3, [r6, #16]
 8006c5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c60:	6918      	ldr	r0, [r3, #16]
 8006c62:	f000 fac9 	bl	80071f8 <__hi0bits>
 8006c66:	f1c0 0020 	rsb	r0, r0, #32
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	4418      	add	r0, r3
 8006c6e:	f010 001f 	ands.w	r0, r0, #31
 8006c72:	f000 8092 	beq.w	8006d9a <_dtoa_r+0x90a>
 8006c76:	f1c0 0320 	rsb	r3, r0, #32
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	f340 808a 	ble.w	8006d94 <_dtoa_r+0x904>
 8006c80:	f1c0 001c 	rsb	r0, r0, #28
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	4403      	add	r3, r0
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	4403      	add	r3, r0
 8006c8e:	4405      	add	r5, r0
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dd07      	ble.n	8006ca8 <_dtoa_r+0x818>
 8006c98:	ee18 1a10 	vmov	r1, s16
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 fc14 	bl	80074cc <__lshift>
 8006ca4:	ee08 0a10 	vmov	s16, r0
 8006ca8:	9b05      	ldr	r3, [sp, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dd05      	ble.n	8006cba <_dtoa_r+0x82a>
 8006cae:	4631      	mov	r1, r6
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fc0a 	bl	80074cc <__lshift>
 8006cb8:	4606      	mov	r6, r0
 8006cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d06e      	beq.n	8006d9e <_dtoa_r+0x90e>
 8006cc0:	ee18 0a10 	vmov	r0, s16
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	f000 fc71 	bl	80075ac <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	da67      	bge.n	8006d9e <_dtoa_r+0x90e>
 8006cce:	9b00      	ldr	r3, [sp, #0]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	ee18 1a10 	vmov	r1, s16
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	220a      	movs	r2, #10
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fa45 	bl	800716c <__multadd>
 8006ce2:	9b08      	ldr	r3, [sp, #32]
 8006ce4:	ee08 0a10 	vmov	s16, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 81b1 	beq.w	8007050 <_dtoa_r+0xbc0>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fa39 	bl	800716c <__multadd>
 8006cfa:	9b02      	ldr	r3, [sp, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	4607      	mov	r7, r0
 8006d00:	f300 808e 	bgt.w	8006e20 <_dtoa_r+0x990>
 8006d04:	9b06      	ldr	r3, [sp, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dc51      	bgt.n	8006dae <_dtoa_r+0x91e>
 8006d0a:	e089      	b.n	8006e20 <_dtoa_r+0x990>
 8006d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d12:	e74b      	b.n	8006bac <_dtoa_r+0x71c>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	1e5e      	subs	r6, r3, #1
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	42b3      	cmp	r3, r6
 8006d1c:	bfbf      	itttt	lt
 8006d1e:	9b07      	ldrlt	r3, [sp, #28]
 8006d20:	9607      	strlt	r6, [sp, #28]
 8006d22:	1af2      	sublt	r2, r6, r3
 8006d24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d26:	bfb6      	itet	lt
 8006d28:	189b      	addlt	r3, r3, r2
 8006d2a:	1b9e      	subge	r6, r3, r6
 8006d2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	bfb8      	it	lt
 8006d32:	2600      	movlt	r6, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfb7      	itett	lt
 8006d38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d40:	1a9d      	sublt	r5, r3, r2
 8006d42:	2300      	movlt	r3, #0
 8006d44:	e734      	b.n	8006bb0 <_dtoa_r+0x720>
 8006d46:	9e07      	ldr	r6, [sp, #28]
 8006d48:	9d04      	ldr	r5, [sp, #16]
 8006d4a:	9f08      	ldr	r7, [sp, #32]
 8006d4c:	e73b      	b.n	8006bc6 <_dtoa_r+0x736>
 8006d4e:	9a07      	ldr	r2, [sp, #28]
 8006d50:	e767      	b.n	8006c22 <_dtoa_r+0x792>
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	dc18      	bgt.n	8006d8a <_dtoa_r+0x8fa>
 8006d58:	f1ba 0f00 	cmp.w	sl, #0
 8006d5c:	d115      	bne.n	8006d8a <_dtoa_r+0x8fa>
 8006d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d62:	b993      	cbnz	r3, 8006d8a <_dtoa_r+0x8fa>
 8006d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d68:	0d1b      	lsrs	r3, r3, #20
 8006d6a:	051b      	lsls	r3, r3, #20
 8006d6c:	b183      	cbz	r3, 8006d90 <_dtoa_r+0x900>
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9304      	str	r3, [sp, #16]
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	3301      	adds	r3, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	f04f 0801 	mov.w	r8, #1
 8006d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f47f af6a 	bne.w	8006c5a <_dtoa_r+0x7ca>
 8006d86:	2001      	movs	r0, #1
 8006d88:	e76f      	b.n	8006c6a <_dtoa_r+0x7da>
 8006d8a:	f04f 0800 	mov.w	r8, #0
 8006d8e:	e7f6      	b.n	8006d7e <_dtoa_r+0x8ee>
 8006d90:	4698      	mov	r8, r3
 8006d92:	e7f4      	b.n	8006d7e <_dtoa_r+0x8ee>
 8006d94:	f43f af7d 	beq.w	8006c92 <_dtoa_r+0x802>
 8006d98:	4618      	mov	r0, r3
 8006d9a:	301c      	adds	r0, #28
 8006d9c:	e772      	b.n	8006c84 <_dtoa_r+0x7f4>
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc37      	bgt.n	8006e14 <_dtoa_r+0x984>
 8006da4:	9b06      	ldr	r3, [sp, #24]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dd34      	ble.n	8006e14 <_dtoa_r+0x984>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	9302      	str	r3, [sp, #8]
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	b96b      	cbnz	r3, 8006dce <_dtoa_r+0x93e>
 8006db2:	4631      	mov	r1, r6
 8006db4:	2205      	movs	r2, #5
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 f9d8 	bl	800716c <__multadd>
 8006dbc:	4601      	mov	r1, r0
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	ee18 0a10 	vmov	r0, s16
 8006dc4:	f000 fbf2 	bl	80075ac <__mcmp>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f73f adbb 	bgt.w	8006944 <_dtoa_r+0x4b4>
 8006dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd0:	9d01      	ldr	r5, [sp, #4]
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 f9a3 	bl	8007128 <_Bfree>
 8006de2:	2f00      	cmp	r7, #0
 8006de4:	f43f aea4 	beq.w	8006b30 <_dtoa_r+0x6a0>
 8006de8:	f1b8 0f00 	cmp.w	r8, #0
 8006dec:	d005      	beq.n	8006dfa <_dtoa_r+0x96a>
 8006dee:	45b8      	cmp	r8, r7
 8006df0:	d003      	beq.n	8006dfa <_dtoa_r+0x96a>
 8006df2:	4641      	mov	r1, r8
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f997 	bl	8007128 <_Bfree>
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 f993 	bl	8007128 <_Bfree>
 8006e02:	e695      	b.n	8006b30 <_dtoa_r+0x6a0>
 8006e04:	2600      	movs	r6, #0
 8006e06:	4637      	mov	r7, r6
 8006e08:	e7e1      	b.n	8006dce <_dtoa_r+0x93e>
 8006e0a:	9700      	str	r7, [sp, #0]
 8006e0c:	4637      	mov	r7, r6
 8006e0e:	e599      	b.n	8006944 <_dtoa_r+0x4b4>
 8006e10:	40240000 	.word	0x40240000
 8006e14:	9b08      	ldr	r3, [sp, #32]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80ca 	beq.w	8006fb0 <_dtoa_r+0xb20>
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	9302      	str	r3, [sp, #8]
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	dd05      	ble.n	8006e30 <_dtoa_r+0x9a0>
 8006e24:	4639      	mov	r1, r7
 8006e26:	462a      	mov	r2, r5
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fb4f 	bl	80074cc <__lshift>
 8006e2e:	4607      	mov	r7, r0
 8006e30:	f1b8 0f00 	cmp.w	r8, #0
 8006e34:	d05b      	beq.n	8006eee <_dtoa_r+0xa5e>
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 f935 	bl	80070a8 <_Balloc>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b928      	cbnz	r0, 8006e4e <_dtoa_r+0x9be>
 8006e42:	4b87      	ldr	r3, [pc, #540]	; (8007060 <_dtoa_r+0xbd0>)
 8006e44:	4602      	mov	r2, r0
 8006e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e4a:	f7ff bb3b 	b.w	80064c4 <_dtoa_r+0x34>
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	3202      	adds	r2, #2
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	f107 010c 	add.w	r1, r7, #12
 8006e58:	300c      	adds	r0, #12
 8006e5a:	f000 f90b 	bl	8007074 <memcpy>
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4629      	mov	r1, r5
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fb32 	bl	80074cc <__lshift>
 8006e68:	9b01      	ldr	r3, [sp, #4]
 8006e6a:	f103 0901 	add.w	r9, r3, #1
 8006e6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	9305      	str	r3, [sp, #20]
 8006e76:	f00a 0301 	and.w	r3, sl, #1
 8006e7a:	46b8      	mov	r8, r7
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	4607      	mov	r7, r0
 8006e80:	4631      	mov	r1, r6
 8006e82:	ee18 0a10 	vmov	r0, s16
 8006e86:	f7ff fa75 	bl	8006374 <quorem>
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e92:	ee18 0a10 	vmov	r0, s16
 8006e96:	f000 fb89 	bl	80075ac <__mcmp>
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	9003      	str	r0, [sp, #12]
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fb9f 	bl	80075e4 <__mdiff>
 8006ea6:	68c2      	ldr	r2, [r0, #12]
 8006ea8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006eac:	4605      	mov	r5, r0
 8006eae:	bb02      	cbnz	r2, 8006ef2 <_dtoa_r+0xa62>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	ee18 0a10 	vmov	r0, s16
 8006eb6:	f000 fb79 	bl	80075ac <__mcmp>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	9207      	str	r2, [sp, #28]
 8006ec2:	f000 f931 	bl	8007128 <_Bfree>
 8006ec6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006eca:	ea43 0102 	orr.w	r1, r3, r2
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	464d      	mov	r5, r9
 8006ed4:	d10f      	bne.n	8006ef6 <_dtoa_r+0xa66>
 8006ed6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eda:	d02a      	beq.n	8006f32 <_dtoa_r+0xaa2>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd02      	ble.n	8006ee8 <_dtoa_r+0xa58>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ee8:	f88b a000 	strb.w	sl, [fp]
 8006eec:	e775      	b.n	8006dda <_dtoa_r+0x94a>
 8006eee:	4638      	mov	r0, r7
 8006ef0:	e7ba      	b.n	8006e68 <_dtoa_r+0x9d8>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	e7e2      	b.n	8006ebc <_dtoa_r+0xa2c>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	db04      	blt.n	8006f06 <_dtoa_r+0xa76>
 8006efc:	9906      	ldr	r1, [sp, #24]
 8006efe:	430b      	orrs	r3, r1
 8006f00:	9904      	ldr	r1, [sp, #16]
 8006f02:	430b      	orrs	r3, r1
 8006f04:	d122      	bne.n	8006f4c <_dtoa_r+0xabc>
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	ddee      	ble.n	8006ee8 <_dtoa_r+0xa58>
 8006f0a:	ee18 1a10 	vmov	r1, s16
 8006f0e:	2201      	movs	r2, #1
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fadb 	bl	80074cc <__lshift>
 8006f16:	4631      	mov	r1, r6
 8006f18:	ee08 0a10 	vmov	s16, r0
 8006f1c:	f000 fb46 	bl	80075ac <__mcmp>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	dc03      	bgt.n	8006f2c <_dtoa_r+0xa9c>
 8006f24:	d1e0      	bne.n	8006ee8 <_dtoa_r+0xa58>
 8006f26:	f01a 0f01 	tst.w	sl, #1
 8006f2a:	d0dd      	beq.n	8006ee8 <_dtoa_r+0xa58>
 8006f2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f30:	d1d7      	bne.n	8006ee2 <_dtoa_r+0xa52>
 8006f32:	2339      	movs	r3, #57	; 0x39
 8006f34:	f88b 3000 	strb.w	r3, [fp]
 8006f38:	462b      	mov	r3, r5
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f42:	2a39      	cmp	r2, #57	; 0x39
 8006f44:	d071      	beq.n	800702a <_dtoa_r+0xb9a>
 8006f46:	3201      	adds	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	e746      	b.n	8006dda <_dtoa_r+0x94a>
 8006f4c:	2a00      	cmp	r2, #0
 8006f4e:	dd07      	ble.n	8006f60 <_dtoa_r+0xad0>
 8006f50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f54:	d0ed      	beq.n	8006f32 <_dtoa_r+0xaa2>
 8006f56:	f10a 0301 	add.w	r3, sl, #1
 8006f5a:	f88b 3000 	strb.w	r3, [fp]
 8006f5e:	e73c      	b.n	8006dda <_dtoa_r+0x94a>
 8006f60:	9b05      	ldr	r3, [sp, #20]
 8006f62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f66:	4599      	cmp	r9, r3
 8006f68:	d047      	beq.n	8006ffa <_dtoa_r+0xb6a>
 8006f6a:	ee18 1a10 	vmov	r1, s16
 8006f6e:	2300      	movs	r3, #0
 8006f70:	220a      	movs	r2, #10
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 f8fa 	bl	800716c <__multadd>
 8006f78:	45b8      	cmp	r8, r7
 8006f7a:	ee08 0a10 	vmov	s16, r0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	f04f 020a 	mov.w	r2, #10
 8006f86:	4641      	mov	r1, r8
 8006f88:	4620      	mov	r0, r4
 8006f8a:	d106      	bne.n	8006f9a <_dtoa_r+0xb0a>
 8006f8c:	f000 f8ee 	bl	800716c <__multadd>
 8006f90:	4680      	mov	r8, r0
 8006f92:	4607      	mov	r7, r0
 8006f94:	f109 0901 	add.w	r9, r9, #1
 8006f98:	e772      	b.n	8006e80 <_dtoa_r+0x9f0>
 8006f9a:	f000 f8e7 	bl	800716c <__multadd>
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	220a      	movs	r2, #10
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f8e0 	bl	800716c <__multadd>
 8006fac:	4607      	mov	r7, r0
 8006fae:	e7f1      	b.n	8006f94 <_dtoa_r+0xb04>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	9d01      	ldr	r5, [sp, #4]
 8006fb6:	ee18 0a10 	vmov	r0, s16
 8006fba:	4631      	mov	r1, r6
 8006fbc:	f7ff f9da 	bl	8006374 <quorem>
 8006fc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	f805 ab01 	strb.w	sl, [r5], #1
 8006fca:	1aea      	subs	r2, r5, r3
 8006fcc:	9b02      	ldr	r3, [sp, #8]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	dd09      	ble.n	8006fe6 <_dtoa_r+0xb56>
 8006fd2:	ee18 1a10 	vmov	r1, s16
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	220a      	movs	r2, #10
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f8c6 	bl	800716c <__multadd>
 8006fe0:	ee08 0a10 	vmov	s16, r0
 8006fe4:	e7e7      	b.n	8006fb6 <_dtoa_r+0xb26>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfc8      	it	gt
 8006fec:	461d      	movgt	r5, r3
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	bfd8      	it	le
 8006ff2:	2501      	movle	r5, #1
 8006ff4:	441d      	add	r5, r3
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	ee18 1a10 	vmov	r1, s16
 8006ffe:	2201      	movs	r2, #1
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fa63 	bl	80074cc <__lshift>
 8007006:	4631      	mov	r1, r6
 8007008:	ee08 0a10 	vmov	s16, r0
 800700c:	f000 face 	bl	80075ac <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	dc91      	bgt.n	8006f38 <_dtoa_r+0xaa8>
 8007014:	d102      	bne.n	800701c <_dtoa_r+0xb8c>
 8007016:	f01a 0f01 	tst.w	sl, #1
 800701a:	d18d      	bne.n	8006f38 <_dtoa_r+0xaa8>
 800701c:	462b      	mov	r3, r5
 800701e:	461d      	mov	r5, r3
 8007020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007024:	2a30      	cmp	r2, #48	; 0x30
 8007026:	d0fa      	beq.n	800701e <_dtoa_r+0xb8e>
 8007028:	e6d7      	b.n	8006dda <_dtoa_r+0x94a>
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d184      	bne.n	8006f3a <_dtoa_r+0xaaa>
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2331      	movs	r3, #49	; 0x31
 8007038:	7013      	strb	r3, [r2, #0]
 800703a:	e6ce      	b.n	8006dda <_dtoa_r+0x94a>
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <_dtoa_r+0xbd4>)
 800703e:	f7ff ba95 	b.w	800656c <_dtoa_r+0xdc>
 8007042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007044:	2b00      	cmp	r3, #0
 8007046:	f47f aa6e 	bne.w	8006526 <_dtoa_r+0x96>
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <_dtoa_r+0xbd8>)
 800704c:	f7ff ba8e 	b.w	800656c <_dtoa_r+0xdc>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dcae      	bgt.n	8006fb4 <_dtoa_r+0xb24>
 8007056:	9b06      	ldr	r3, [sp, #24]
 8007058:	2b02      	cmp	r3, #2
 800705a:	f73f aea8 	bgt.w	8006dae <_dtoa_r+0x91e>
 800705e:	e7a9      	b.n	8006fb4 <_dtoa_r+0xb24>
 8007060:	08008c3b 	.word	0x08008c3b
 8007064:	08008b98 	.word	0x08008b98
 8007068:	08008bbc 	.word	0x08008bbc

0800706c <_localeconv_r>:
 800706c:	4800      	ldr	r0, [pc, #0]	; (8007070 <_localeconv_r+0x4>)
 800706e:	4770      	bx	lr
 8007070:	20000160 	.word	0x20000160

08007074 <memcpy>:
 8007074:	440a      	add	r2, r1
 8007076:	4291      	cmp	r1, r2
 8007078:	f100 33ff 	add.w	r3, r0, #4294967295
 800707c:	d100      	bne.n	8007080 <memcpy+0xc>
 800707e:	4770      	bx	lr
 8007080:	b510      	push	{r4, lr}
 8007082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708a:	4291      	cmp	r1, r2
 800708c:	d1f9      	bne.n	8007082 <memcpy+0xe>
 800708e:	bd10      	pop	{r4, pc}

08007090 <__malloc_lock>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__malloc_lock+0x8>)
 8007092:	f000 bd30 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 8007096:	bf00      	nop
 8007098:	200003d4 	.word	0x200003d4

0800709c <__malloc_unlock>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__malloc_unlock+0x8>)
 800709e:	f000 bd2b 	b.w	8007af8 <__retarget_lock_release_recursive>
 80070a2:	bf00      	nop
 80070a4:	200003d4 	.word	0x200003d4

080070a8 <_Balloc>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	b976      	cbnz	r6, 80070d0 <_Balloc+0x28>
 80070b2:	2010      	movs	r0, #16
 80070b4:	f7fe fbd4 	bl	8005860 <malloc>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6260      	str	r0, [r4, #36]	; 0x24
 80070bc:	b920      	cbnz	r0, 80070c8 <_Balloc+0x20>
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <_Balloc+0x78>)
 80070c0:	4818      	ldr	r0, [pc, #96]	; (8007124 <_Balloc+0x7c>)
 80070c2:	2166      	movs	r1, #102	; 0x66
 80070c4:	f000 fce6 	bl	8007a94 <__assert_func>
 80070c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070cc:	6006      	str	r6, [r0, #0]
 80070ce:	60c6      	str	r6, [r0, #12]
 80070d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070d2:	68f3      	ldr	r3, [r6, #12]
 80070d4:	b183      	cbz	r3, 80070f8 <_Balloc+0x50>
 80070d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070de:	b9b8      	cbnz	r0, 8007110 <_Balloc+0x68>
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f605 	lsl.w	r6, r1, r5
 80070e6:	1d72      	adds	r2, r6, #5
 80070e8:	0092      	lsls	r2, r2, #2
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fb60 	bl	80077b0 <_calloc_r>
 80070f0:	b160      	cbz	r0, 800710c <_Balloc+0x64>
 80070f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070f6:	e00e      	b.n	8007116 <_Balloc+0x6e>
 80070f8:	2221      	movs	r2, #33	; 0x21
 80070fa:	2104      	movs	r1, #4
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fb57 	bl	80077b0 <_calloc_r>
 8007102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007104:	60f0      	str	r0, [r6, #12]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e4      	bne.n	80070d6 <_Balloc+0x2e>
 800710c:	2000      	movs	r0, #0
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	6802      	ldr	r2, [r0, #0]
 8007112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007116:	2300      	movs	r3, #0
 8007118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800711c:	e7f7      	b.n	800710e <_Balloc+0x66>
 800711e:	bf00      	nop
 8007120:	08008bc9 	.word	0x08008bc9
 8007124:	08008c4c 	.word	0x08008c4c

08007128 <_Bfree>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b976      	cbnz	r6, 8007150 <_Bfree+0x28>
 8007132:	2010      	movs	r0, #16
 8007134:	f7fe fb94 	bl	8005860 <malloc>
 8007138:	4602      	mov	r2, r0
 800713a:	6268      	str	r0, [r5, #36]	; 0x24
 800713c:	b920      	cbnz	r0, 8007148 <_Bfree+0x20>
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <_Bfree+0x3c>)
 8007140:	4809      	ldr	r0, [pc, #36]	; (8007168 <_Bfree+0x40>)
 8007142:	218a      	movs	r1, #138	; 0x8a
 8007144:	f000 fca6 	bl	8007a94 <__assert_func>
 8007148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800714c:	6006      	str	r6, [r0, #0]
 800714e:	60c6      	str	r6, [r0, #12]
 8007150:	b13c      	cbz	r4, 8007162 <_Bfree+0x3a>
 8007152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007154:	6862      	ldr	r2, [r4, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800715c:	6021      	str	r1, [r4, #0]
 800715e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	08008bc9 	.word	0x08008bc9
 8007168:	08008c4c 	.word	0x08008c4c

0800716c <__multadd>:
 800716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007170:	690d      	ldr	r5, [r1, #16]
 8007172:	4607      	mov	r7, r0
 8007174:	460c      	mov	r4, r1
 8007176:	461e      	mov	r6, r3
 8007178:	f101 0c14 	add.w	ip, r1, #20
 800717c:	2000      	movs	r0, #0
 800717e:	f8dc 3000 	ldr.w	r3, [ip]
 8007182:	b299      	uxth	r1, r3
 8007184:	fb02 6101 	mla	r1, r2, r1, r6
 8007188:	0c1e      	lsrs	r6, r3, #16
 800718a:	0c0b      	lsrs	r3, r1, #16
 800718c:	fb02 3306 	mla	r3, r2, r6, r3
 8007190:	b289      	uxth	r1, r1
 8007192:	3001      	adds	r0, #1
 8007194:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007198:	4285      	cmp	r5, r0
 800719a:	f84c 1b04 	str.w	r1, [ip], #4
 800719e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071a2:	dcec      	bgt.n	800717e <__multadd+0x12>
 80071a4:	b30e      	cbz	r6, 80071ea <__multadd+0x7e>
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	42ab      	cmp	r3, r5
 80071aa:	dc19      	bgt.n	80071e0 <__multadd+0x74>
 80071ac:	6861      	ldr	r1, [r4, #4]
 80071ae:	4638      	mov	r0, r7
 80071b0:	3101      	adds	r1, #1
 80071b2:	f7ff ff79 	bl	80070a8 <_Balloc>
 80071b6:	4680      	mov	r8, r0
 80071b8:	b928      	cbnz	r0, 80071c6 <__multadd+0x5a>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <__multadd+0x84>)
 80071be:	480d      	ldr	r0, [pc, #52]	; (80071f4 <__multadd+0x88>)
 80071c0:	21b5      	movs	r1, #181	; 0xb5
 80071c2:	f000 fc67 	bl	8007a94 <__assert_func>
 80071c6:	6922      	ldr	r2, [r4, #16]
 80071c8:	3202      	adds	r2, #2
 80071ca:	f104 010c 	add.w	r1, r4, #12
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	300c      	adds	r0, #12
 80071d2:	f7ff ff4f 	bl	8007074 <memcpy>
 80071d6:	4621      	mov	r1, r4
 80071d8:	4638      	mov	r0, r7
 80071da:	f7ff ffa5 	bl	8007128 <_Bfree>
 80071de:	4644      	mov	r4, r8
 80071e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071e4:	3501      	adds	r5, #1
 80071e6:	615e      	str	r6, [r3, #20]
 80071e8:	6125      	str	r5, [r4, #16]
 80071ea:	4620      	mov	r0, r4
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	08008c3b 	.word	0x08008c3b
 80071f4:	08008c4c 	.word	0x08008c4c

080071f8 <__hi0bits>:
 80071f8:	0c03      	lsrs	r3, r0, #16
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	b9d3      	cbnz	r3, 8007234 <__hi0bits+0x3c>
 80071fe:	0400      	lsls	r0, r0, #16
 8007200:	2310      	movs	r3, #16
 8007202:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007206:	bf04      	itt	eq
 8007208:	0200      	lsleq	r0, r0, #8
 800720a:	3308      	addeq	r3, #8
 800720c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007210:	bf04      	itt	eq
 8007212:	0100      	lsleq	r0, r0, #4
 8007214:	3304      	addeq	r3, #4
 8007216:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800721a:	bf04      	itt	eq
 800721c:	0080      	lsleq	r0, r0, #2
 800721e:	3302      	addeq	r3, #2
 8007220:	2800      	cmp	r0, #0
 8007222:	db05      	blt.n	8007230 <__hi0bits+0x38>
 8007224:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007228:	f103 0301 	add.w	r3, r3, #1
 800722c:	bf08      	it	eq
 800722e:	2320      	moveq	r3, #32
 8007230:	4618      	mov	r0, r3
 8007232:	4770      	bx	lr
 8007234:	2300      	movs	r3, #0
 8007236:	e7e4      	b.n	8007202 <__hi0bits+0xa>

08007238 <__lo0bits>:
 8007238:	6803      	ldr	r3, [r0, #0]
 800723a:	f013 0207 	ands.w	r2, r3, #7
 800723e:	4601      	mov	r1, r0
 8007240:	d00b      	beq.n	800725a <__lo0bits+0x22>
 8007242:	07da      	lsls	r2, r3, #31
 8007244:	d423      	bmi.n	800728e <__lo0bits+0x56>
 8007246:	0798      	lsls	r0, r3, #30
 8007248:	bf49      	itett	mi
 800724a:	085b      	lsrmi	r3, r3, #1
 800724c:	089b      	lsrpl	r3, r3, #2
 800724e:	2001      	movmi	r0, #1
 8007250:	600b      	strmi	r3, [r1, #0]
 8007252:	bf5c      	itt	pl
 8007254:	600b      	strpl	r3, [r1, #0]
 8007256:	2002      	movpl	r0, #2
 8007258:	4770      	bx	lr
 800725a:	b298      	uxth	r0, r3
 800725c:	b9a8      	cbnz	r0, 800728a <__lo0bits+0x52>
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	2010      	movs	r0, #16
 8007262:	b2da      	uxtb	r2, r3
 8007264:	b90a      	cbnz	r2, 800726a <__lo0bits+0x32>
 8007266:	3008      	adds	r0, #8
 8007268:	0a1b      	lsrs	r3, r3, #8
 800726a:	071a      	lsls	r2, r3, #28
 800726c:	bf04      	itt	eq
 800726e:	091b      	lsreq	r3, r3, #4
 8007270:	3004      	addeq	r0, #4
 8007272:	079a      	lsls	r2, r3, #30
 8007274:	bf04      	itt	eq
 8007276:	089b      	lsreq	r3, r3, #2
 8007278:	3002      	addeq	r0, #2
 800727a:	07da      	lsls	r2, r3, #31
 800727c:	d403      	bmi.n	8007286 <__lo0bits+0x4e>
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	f100 0001 	add.w	r0, r0, #1
 8007284:	d005      	beq.n	8007292 <__lo0bits+0x5a>
 8007286:	600b      	str	r3, [r1, #0]
 8007288:	4770      	bx	lr
 800728a:	4610      	mov	r0, r2
 800728c:	e7e9      	b.n	8007262 <__lo0bits+0x2a>
 800728e:	2000      	movs	r0, #0
 8007290:	4770      	bx	lr
 8007292:	2020      	movs	r0, #32
 8007294:	4770      	bx	lr
	...

08007298 <__i2b>:
 8007298:	b510      	push	{r4, lr}
 800729a:	460c      	mov	r4, r1
 800729c:	2101      	movs	r1, #1
 800729e:	f7ff ff03 	bl	80070a8 <_Balloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	b928      	cbnz	r0, 80072b2 <__i2b+0x1a>
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <__i2b+0x24>)
 80072a8:	4805      	ldr	r0, [pc, #20]	; (80072c0 <__i2b+0x28>)
 80072aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072ae:	f000 fbf1 	bl	8007a94 <__assert_func>
 80072b2:	2301      	movs	r3, #1
 80072b4:	6144      	str	r4, [r0, #20]
 80072b6:	6103      	str	r3, [r0, #16]
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	bf00      	nop
 80072bc:	08008c3b 	.word	0x08008c3b
 80072c0:	08008c4c 	.word	0x08008c4c

080072c4 <__multiply>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	4691      	mov	r9, r2
 80072ca:	690a      	ldr	r2, [r1, #16]
 80072cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bfb8      	it	lt
 80072d4:	460b      	movlt	r3, r1
 80072d6:	460c      	mov	r4, r1
 80072d8:	bfbc      	itt	lt
 80072da:	464c      	movlt	r4, r9
 80072dc:	4699      	movlt	r9, r3
 80072de:	6927      	ldr	r7, [r4, #16]
 80072e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	6861      	ldr	r1, [r4, #4]
 80072e8:	eb07 060a 	add.w	r6, r7, sl
 80072ec:	42b3      	cmp	r3, r6
 80072ee:	b085      	sub	sp, #20
 80072f0:	bfb8      	it	lt
 80072f2:	3101      	addlt	r1, #1
 80072f4:	f7ff fed8 	bl	80070a8 <_Balloc>
 80072f8:	b930      	cbnz	r0, 8007308 <__multiply+0x44>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4b44      	ldr	r3, [pc, #272]	; (8007410 <__multiply+0x14c>)
 80072fe:	4845      	ldr	r0, [pc, #276]	; (8007414 <__multiply+0x150>)
 8007300:	f240 115d 	movw	r1, #349	; 0x15d
 8007304:	f000 fbc6 	bl	8007a94 <__assert_func>
 8007308:	f100 0514 	add.w	r5, r0, #20
 800730c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007310:	462b      	mov	r3, r5
 8007312:	2200      	movs	r2, #0
 8007314:	4543      	cmp	r3, r8
 8007316:	d321      	bcc.n	800735c <__multiply+0x98>
 8007318:	f104 0314 	add.w	r3, r4, #20
 800731c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007320:	f109 0314 	add.w	r3, r9, #20
 8007324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007328:	9202      	str	r2, [sp, #8]
 800732a:	1b3a      	subs	r2, r7, r4
 800732c:	3a15      	subs	r2, #21
 800732e:	f022 0203 	bic.w	r2, r2, #3
 8007332:	3204      	adds	r2, #4
 8007334:	f104 0115 	add.w	r1, r4, #21
 8007338:	428f      	cmp	r7, r1
 800733a:	bf38      	it	cc
 800733c:	2204      	movcc	r2, #4
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	9a02      	ldr	r2, [sp, #8]
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d80c      	bhi.n	8007362 <__multiply+0x9e>
 8007348:	2e00      	cmp	r6, #0
 800734a:	dd03      	ble.n	8007354 <__multiply+0x90>
 800734c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007350:	2b00      	cmp	r3, #0
 8007352:	d05a      	beq.n	800740a <__multiply+0x146>
 8007354:	6106      	str	r6, [r0, #16]
 8007356:	b005      	add	sp, #20
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	f843 2b04 	str.w	r2, [r3], #4
 8007360:	e7d8      	b.n	8007314 <__multiply+0x50>
 8007362:	f8b3 a000 	ldrh.w	sl, [r3]
 8007366:	f1ba 0f00 	cmp.w	sl, #0
 800736a:	d024      	beq.n	80073b6 <__multiply+0xf2>
 800736c:	f104 0e14 	add.w	lr, r4, #20
 8007370:	46a9      	mov	r9, r5
 8007372:	f04f 0c00 	mov.w	ip, #0
 8007376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800737a:	f8d9 1000 	ldr.w	r1, [r9]
 800737e:	fa1f fb82 	uxth.w	fp, r2
 8007382:	b289      	uxth	r1, r1
 8007384:	fb0a 110b 	mla	r1, sl, fp, r1
 8007388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800738c:	f8d9 2000 	ldr.w	r2, [r9]
 8007390:	4461      	add	r1, ip
 8007392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007396:	fb0a c20b 	mla	r2, sl, fp, ip
 800739a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800739e:	b289      	uxth	r1, r1
 80073a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073a4:	4577      	cmp	r7, lr
 80073a6:	f849 1b04 	str.w	r1, [r9], #4
 80073aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ae:	d8e2      	bhi.n	8007376 <__multiply+0xb2>
 80073b0:	9a01      	ldr	r2, [sp, #4]
 80073b2:	f845 c002 	str.w	ip, [r5, r2]
 80073b6:	9a03      	ldr	r2, [sp, #12]
 80073b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073bc:	3304      	adds	r3, #4
 80073be:	f1b9 0f00 	cmp.w	r9, #0
 80073c2:	d020      	beq.n	8007406 <__multiply+0x142>
 80073c4:	6829      	ldr	r1, [r5, #0]
 80073c6:	f104 0c14 	add.w	ip, r4, #20
 80073ca:	46ae      	mov	lr, r5
 80073cc:	f04f 0a00 	mov.w	sl, #0
 80073d0:	f8bc b000 	ldrh.w	fp, [ip]
 80073d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073d8:	fb09 220b 	mla	r2, r9, fp, r2
 80073dc:	4492      	add	sl, r2
 80073de:	b289      	uxth	r1, r1
 80073e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073e4:	f84e 1b04 	str.w	r1, [lr], #4
 80073e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073ec:	f8be 1000 	ldrh.w	r1, [lr]
 80073f0:	0c12      	lsrs	r2, r2, #16
 80073f2:	fb09 1102 	mla	r1, r9, r2, r1
 80073f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073fa:	4567      	cmp	r7, ip
 80073fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007400:	d8e6      	bhi.n	80073d0 <__multiply+0x10c>
 8007402:	9a01      	ldr	r2, [sp, #4]
 8007404:	50a9      	str	r1, [r5, r2]
 8007406:	3504      	adds	r5, #4
 8007408:	e79a      	b.n	8007340 <__multiply+0x7c>
 800740a:	3e01      	subs	r6, #1
 800740c:	e79c      	b.n	8007348 <__multiply+0x84>
 800740e:	bf00      	nop
 8007410:	08008c3b 	.word	0x08008c3b
 8007414:	08008c4c 	.word	0x08008c4c

08007418 <__pow5mult>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	4615      	mov	r5, r2
 800741e:	f012 0203 	ands.w	r2, r2, #3
 8007422:	4606      	mov	r6, r0
 8007424:	460f      	mov	r7, r1
 8007426:	d007      	beq.n	8007438 <__pow5mult+0x20>
 8007428:	4c25      	ldr	r4, [pc, #148]	; (80074c0 <__pow5mult+0xa8>)
 800742a:	3a01      	subs	r2, #1
 800742c:	2300      	movs	r3, #0
 800742e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007432:	f7ff fe9b 	bl	800716c <__multadd>
 8007436:	4607      	mov	r7, r0
 8007438:	10ad      	asrs	r5, r5, #2
 800743a:	d03d      	beq.n	80074b8 <__pow5mult+0xa0>
 800743c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800743e:	b97c      	cbnz	r4, 8007460 <__pow5mult+0x48>
 8007440:	2010      	movs	r0, #16
 8007442:	f7fe fa0d 	bl	8005860 <malloc>
 8007446:	4602      	mov	r2, r0
 8007448:	6270      	str	r0, [r6, #36]	; 0x24
 800744a:	b928      	cbnz	r0, 8007458 <__pow5mult+0x40>
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <__pow5mult+0xac>)
 800744e:	481e      	ldr	r0, [pc, #120]	; (80074c8 <__pow5mult+0xb0>)
 8007450:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007454:	f000 fb1e 	bl	8007a94 <__assert_func>
 8007458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800745c:	6004      	str	r4, [r0, #0]
 800745e:	60c4      	str	r4, [r0, #12]
 8007460:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007468:	b94c      	cbnz	r4, 800747e <__pow5mult+0x66>
 800746a:	f240 2171 	movw	r1, #625	; 0x271
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ff12 	bl	8007298 <__i2b>
 8007474:	2300      	movs	r3, #0
 8007476:	f8c8 0008 	str.w	r0, [r8, #8]
 800747a:	4604      	mov	r4, r0
 800747c:	6003      	str	r3, [r0, #0]
 800747e:	f04f 0900 	mov.w	r9, #0
 8007482:	07eb      	lsls	r3, r5, #31
 8007484:	d50a      	bpl.n	800749c <__pow5mult+0x84>
 8007486:	4639      	mov	r1, r7
 8007488:	4622      	mov	r2, r4
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ff1a 	bl	80072c4 <__multiply>
 8007490:	4639      	mov	r1, r7
 8007492:	4680      	mov	r8, r0
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff fe47 	bl	8007128 <_Bfree>
 800749a:	4647      	mov	r7, r8
 800749c:	106d      	asrs	r5, r5, #1
 800749e:	d00b      	beq.n	80074b8 <__pow5mult+0xa0>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	b938      	cbnz	r0, 80074b4 <__pow5mult+0x9c>
 80074a4:	4622      	mov	r2, r4
 80074a6:	4621      	mov	r1, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ff0b 	bl	80072c4 <__multiply>
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	f8c0 9000 	str.w	r9, [r0]
 80074b4:	4604      	mov	r4, r0
 80074b6:	e7e4      	b.n	8007482 <__pow5mult+0x6a>
 80074b8:	4638      	mov	r0, r7
 80074ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074be:	bf00      	nop
 80074c0:	08008d98 	.word	0x08008d98
 80074c4:	08008bc9 	.word	0x08008bc9
 80074c8:	08008c4c 	.word	0x08008c4c

080074cc <__lshift>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	460c      	mov	r4, r1
 80074d2:	6849      	ldr	r1, [r1, #4]
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	4607      	mov	r7, r0
 80074de:	4691      	mov	r9, r2
 80074e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074e4:	f108 0601 	add.w	r6, r8, #1
 80074e8:	42b3      	cmp	r3, r6
 80074ea:	db0b      	blt.n	8007504 <__lshift+0x38>
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff fddb 	bl	80070a8 <_Balloc>
 80074f2:	4605      	mov	r5, r0
 80074f4:	b948      	cbnz	r0, 800750a <__lshift+0x3e>
 80074f6:	4602      	mov	r2, r0
 80074f8:	4b2a      	ldr	r3, [pc, #168]	; (80075a4 <__lshift+0xd8>)
 80074fa:	482b      	ldr	r0, [pc, #172]	; (80075a8 <__lshift+0xdc>)
 80074fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007500:	f000 fac8 	bl	8007a94 <__assert_func>
 8007504:	3101      	adds	r1, #1
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	e7ee      	b.n	80074e8 <__lshift+0x1c>
 800750a:	2300      	movs	r3, #0
 800750c:	f100 0114 	add.w	r1, r0, #20
 8007510:	f100 0210 	add.w	r2, r0, #16
 8007514:	4618      	mov	r0, r3
 8007516:	4553      	cmp	r3, sl
 8007518:	db37      	blt.n	800758a <__lshift+0xbe>
 800751a:	6920      	ldr	r0, [r4, #16]
 800751c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007520:	f104 0314 	add.w	r3, r4, #20
 8007524:	f019 091f 	ands.w	r9, r9, #31
 8007528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800752c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007530:	d02f      	beq.n	8007592 <__lshift+0xc6>
 8007532:	f1c9 0e20 	rsb	lr, r9, #32
 8007536:	468a      	mov	sl, r1
 8007538:	f04f 0c00 	mov.w	ip, #0
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	fa02 f209 	lsl.w	r2, r2, r9
 8007542:	ea42 020c 	orr.w	r2, r2, ip
 8007546:	f84a 2b04 	str.w	r2, [sl], #4
 800754a:	f853 2b04 	ldr.w	r2, [r3], #4
 800754e:	4298      	cmp	r0, r3
 8007550:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007554:	d8f2      	bhi.n	800753c <__lshift+0x70>
 8007556:	1b03      	subs	r3, r0, r4
 8007558:	3b15      	subs	r3, #21
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	3304      	adds	r3, #4
 8007560:	f104 0215 	add.w	r2, r4, #21
 8007564:	4290      	cmp	r0, r2
 8007566:	bf38      	it	cc
 8007568:	2304      	movcc	r3, #4
 800756a:	f841 c003 	str.w	ip, [r1, r3]
 800756e:	f1bc 0f00 	cmp.w	ip, #0
 8007572:	d001      	beq.n	8007578 <__lshift+0xac>
 8007574:	f108 0602 	add.w	r6, r8, #2
 8007578:	3e01      	subs	r6, #1
 800757a:	4638      	mov	r0, r7
 800757c:	612e      	str	r6, [r5, #16]
 800757e:	4621      	mov	r1, r4
 8007580:	f7ff fdd2 	bl	8007128 <_Bfree>
 8007584:	4628      	mov	r0, r5
 8007586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758a:	f842 0f04 	str.w	r0, [r2, #4]!
 800758e:	3301      	adds	r3, #1
 8007590:	e7c1      	b.n	8007516 <__lshift+0x4a>
 8007592:	3904      	subs	r1, #4
 8007594:	f853 2b04 	ldr.w	r2, [r3], #4
 8007598:	f841 2f04 	str.w	r2, [r1, #4]!
 800759c:	4298      	cmp	r0, r3
 800759e:	d8f9      	bhi.n	8007594 <__lshift+0xc8>
 80075a0:	e7ea      	b.n	8007578 <__lshift+0xac>
 80075a2:	bf00      	nop
 80075a4:	08008c3b 	.word	0x08008c3b
 80075a8:	08008c4c 	.word	0x08008c4c

080075ac <__mcmp>:
 80075ac:	b530      	push	{r4, r5, lr}
 80075ae:	6902      	ldr	r2, [r0, #16]
 80075b0:	690c      	ldr	r4, [r1, #16]
 80075b2:	1b12      	subs	r2, r2, r4
 80075b4:	d10e      	bne.n	80075d4 <__mcmp+0x28>
 80075b6:	f100 0314 	add.w	r3, r0, #20
 80075ba:	3114      	adds	r1, #20
 80075bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075cc:	42a5      	cmp	r5, r4
 80075ce:	d003      	beq.n	80075d8 <__mcmp+0x2c>
 80075d0:	d305      	bcc.n	80075de <__mcmp+0x32>
 80075d2:	2201      	movs	r2, #1
 80075d4:	4610      	mov	r0, r2
 80075d6:	bd30      	pop	{r4, r5, pc}
 80075d8:	4283      	cmp	r3, r0
 80075da:	d3f3      	bcc.n	80075c4 <__mcmp+0x18>
 80075dc:	e7fa      	b.n	80075d4 <__mcmp+0x28>
 80075de:	f04f 32ff 	mov.w	r2, #4294967295
 80075e2:	e7f7      	b.n	80075d4 <__mcmp+0x28>

080075e4 <__mdiff>:
 80075e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	4606      	mov	r6, r0
 80075ec:	4611      	mov	r1, r2
 80075ee:	4620      	mov	r0, r4
 80075f0:	4690      	mov	r8, r2
 80075f2:	f7ff ffdb 	bl	80075ac <__mcmp>
 80075f6:	1e05      	subs	r5, r0, #0
 80075f8:	d110      	bne.n	800761c <__mdiff+0x38>
 80075fa:	4629      	mov	r1, r5
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7ff fd53 	bl	80070a8 <_Balloc>
 8007602:	b930      	cbnz	r0, 8007612 <__mdiff+0x2e>
 8007604:	4b3a      	ldr	r3, [pc, #232]	; (80076f0 <__mdiff+0x10c>)
 8007606:	4602      	mov	r2, r0
 8007608:	f240 2132 	movw	r1, #562	; 0x232
 800760c:	4839      	ldr	r0, [pc, #228]	; (80076f4 <__mdiff+0x110>)
 800760e:	f000 fa41 	bl	8007a94 <__assert_func>
 8007612:	2301      	movs	r3, #1
 8007614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761c:	bfa4      	itt	ge
 800761e:	4643      	movge	r3, r8
 8007620:	46a0      	movge	r8, r4
 8007622:	4630      	mov	r0, r6
 8007624:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007628:	bfa6      	itte	ge
 800762a:	461c      	movge	r4, r3
 800762c:	2500      	movge	r5, #0
 800762e:	2501      	movlt	r5, #1
 8007630:	f7ff fd3a 	bl	80070a8 <_Balloc>
 8007634:	b920      	cbnz	r0, 8007640 <__mdiff+0x5c>
 8007636:	4b2e      	ldr	r3, [pc, #184]	; (80076f0 <__mdiff+0x10c>)
 8007638:	4602      	mov	r2, r0
 800763a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800763e:	e7e5      	b.n	800760c <__mdiff+0x28>
 8007640:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007644:	6926      	ldr	r6, [r4, #16]
 8007646:	60c5      	str	r5, [r0, #12]
 8007648:	f104 0914 	add.w	r9, r4, #20
 800764c:	f108 0514 	add.w	r5, r8, #20
 8007650:	f100 0e14 	add.w	lr, r0, #20
 8007654:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007658:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800765c:	f108 0210 	add.w	r2, r8, #16
 8007660:	46f2      	mov	sl, lr
 8007662:	2100      	movs	r1, #0
 8007664:	f859 3b04 	ldr.w	r3, [r9], #4
 8007668:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800766c:	fa1f f883 	uxth.w	r8, r3
 8007670:	fa11 f18b 	uxtah	r1, r1, fp
 8007674:	0c1b      	lsrs	r3, r3, #16
 8007676:	eba1 0808 	sub.w	r8, r1, r8
 800767a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800767e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007682:	fa1f f888 	uxth.w	r8, r8
 8007686:	1419      	asrs	r1, r3, #16
 8007688:	454e      	cmp	r6, r9
 800768a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800768e:	f84a 3b04 	str.w	r3, [sl], #4
 8007692:	d8e7      	bhi.n	8007664 <__mdiff+0x80>
 8007694:	1b33      	subs	r3, r6, r4
 8007696:	3b15      	subs	r3, #21
 8007698:	f023 0303 	bic.w	r3, r3, #3
 800769c:	3304      	adds	r3, #4
 800769e:	3415      	adds	r4, #21
 80076a0:	42a6      	cmp	r6, r4
 80076a2:	bf38      	it	cc
 80076a4:	2304      	movcc	r3, #4
 80076a6:	441d      	add	r5, r3
 80076a8:	4473      	add	r3, lr
 80076aa:	469e      	mov	lr, r3
 80076ac:	462e      	mov	r6, r5
 80076ae:	4566      	cmp	r6, ip
 80076b0:	d30e      	bcc.n	80076d0 <__mdiff+0xec>
 80076b2:	f10c 0203 	add.w	r2, ip, #3
 80076b6:	1b52      	subs	r2, r2, r5
 80076b8:	f022 0203 	bic.w	r2, r2, #3
 80076bc:	3d03      	subs	r5, #3
 80076be:	45ac      	cmp	ip, r5
 80076c0:	bf38      	it	cc
 80076c2:	2200      	movcc	r2, #0
 80076c4:	441a      	add	r2, r3
 80076c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076ca:	b17b      	cbz	r3, 80076ec <__mdiff+0x108>
 80076cc:	6107      	str	r7, [r0, #16]
 80076ce:	e7a3      	b.n	8007618 <__mdiff+0x34>
 80076d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80076d4:	fa11 f288 	uxtah	r2, r1, r8
 80076d8:	1414      	asrs	r4, r2, #16
 80076da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076de:	b292      	uxth	r2, r2
 80076e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076e4:	f84e 2b04 	str.w	r2, [lr], #4
 80076e8:	1421      	asrs	r1, r4, #16
 80076ea:	e7e0      	b.n	80076ae <__mdiff+0xca>
 80076ec:	3f01      	subs	r7, #1
 80076ee:	e7ea      	b.n	80076c6 <__mdiff+0xe2>
 80076f0:	08008c3b 	.word	0x08008c3b
 80076f4:	08008c4c 	.word	0x08008c4c

080076f8 <__d2b>:
 80076f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076fc:	4689      	mov	r9, r1
 80076fe:	2101      	movs	r1, #1
 8007700:	ec57 6b10 	vmov	r6, r7, d0
 8007704:	4690      	mov	r8, r2
 8007706:	f7ff fccf 	bl	80070a8 <_Balloc>
 800770a:	4604      	mov	r4, r0
 800770c:	b930      	cbnz	r0, 800771c <__d2b+0x24>
 800770e:	4602      	mov	r2, r0
 8007710:	4b25      	ldr	r3, [pc, #148]	; (80077a8 <__d2b+0xb0>)
 8007712:	4826      	ldr	r0, [pc, #152]	; (80077ac <__d2b+0xb4>)
 8007714:	f240 310a 	movw	r1, #778	; 0x30a
 8007718:	f000 f9bc 	bl	8007a94 <__assert_func>
 800771c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007724:	bb35      	cbnz	r5, 8007774 <__d2b+0x7c>
 8007726:	2e00      	cmp	r6, #0
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	d028      	beq.n	800777e <__d2b+0x86>
 800772c:	4668      	mov	r0, sp
 800772e:	9600      	str	r6, [sp, #0]
 8007730:	f7ff fd82 	bl	8007238 <__lo0bits>
 8007734:	9900      	ldr	r1, [sp, #0]
 8007736:	b300      	cbz	r0, 800777a <__d2b+0x82>
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	f1c0 0320 	rsb	r3, r0, #32
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	430b      	orrs	r3, r1
 8007744:	40c2      	lsrs	r2, r0
 8007746:	6163      	str	r3, [r4, #20]
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	9b01      	ldr	r3, [sp, #4]
 800774c:	61a3      	str	r3, [r4, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf14      	ite	ne
 8007752:	2202      	movne	r2, #2
 8007754:	2201      	moveq	r2, #1
 8007756:	6122      	str	r2, [r4, #16]
 8007758:	b1d5      	cbz	r5, 8007790 <__d2b+0x98>
 800775a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800775e:	4405      	add	r5, r0
 8007760:	f8c9 5000 	str.w	r5, [r9]
 8007764:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007768:	f8c8 0000 	str.w	r0, [r8]
 800776c:	4620      	mov	r0, r4
 800776e:	b003      	add	sp, #12
 8007770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007778:	e7d5      	b.n	8007726 <__d2b+0x2e>
 800777a:	6161      	str	r1, [r4, #20]
 800777c:	e7e5      	b.n	800774a <__d2b+0x52>
 800777e:	a801      	add	r0, sp, #4
 8007780:	f7ff fd5a 	bl	8007238 <__lo0bits>
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	6163      	str	r3, [r4, #20]
 8007788:	2201      	movs	r2, #1
 800778a:	6122      	str	r2, [r4, #16]
 800778c:	3020      	adds	r0, #32
 800778e:	e7e3      	b.n	8007758 <__d2b+0x60>
 8007790:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007794:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007798:	f8c9 0000 	str.w	r0, [r9]
 800779c:	6918      	ldr	r0, [r3, #16]
 800779e:	f7ff fd2b 	bl	80071f8 <__hi0bits>
 80077a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a6:	e7df      	b.n	8007768 <__d2b+0x70>
 80077a8:	08008c3b 	.word	0x08008c3b
 80077ac:	08008c4c 	.word	0x08008c4c

080077b0 <_calloc_r>:
 80077b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077b2:	fba1 2402 	umull	r2, r4, r1, r2
 80077b6:	b94c      	cbnz	r4, 80077cc <_calloc_r+0x1c>
 80077b8:	4611      	mov	r1, r2
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	f7fe f8cc 	bl	8005958 <_malloc_r>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	4605      	mov	r5, r0
 80077c4:	b930      	cbnz	r0, 80077d4 <_calloc_r+0x24>
 80077c6:	4628      	mov	r0, r5
 80077c8:	b003      	add	sp, #12
 80077ca:	bd30      	pop	{r4, r5, pc}
 80077cc:	220c      	movs	r2, #12
 80077ce:	6002      	str	r2, [r0, #0]
 80077d0:	2500      	movs	r5, #0
 80077d2:	e7f8      	b.n	80077c6 <_calloc_r+0x16>
 80077d4:	4621      	mov	r1, r4
 80077d6:	f7fe f84b 	bl	8005870 <memset>
 80077da:	e7f4      	b.n	80077c6 <_calloc_r+0x16>

080077dc <__ssputs_r>:
 80077dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e0:	688e      	ldr	r6, [r1, #8]
 80077e2:	429e      	cmp	r6, r3
 80077e4:	4682      	mov	sl, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4690      	mov	r8, r2
 80077ea:	461f      	mov	r7, r3
 80077ec:	d838      	bhi.n	8007860 <__ssputs_r+0x84>
 80077ee:	898a      	ldrh	r2, [r1, #12]
 80077f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077f4:	d032      	beq.n	800785c <__ssputs_r+0x80>
 80077f6:	6825      	ldr	r5, [r4, #0]
 80077f8:	6909      	ldr	r1, [r1, #16]
 80077fa:	eba5 0901 	sub.w	r9, r5, r1
 80077fe:	6965      	ldr	r5, [r4, #20]
 8007800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007808:	3301      	adds	r3, #1
 800780a:	444b      	add	r3, r9
 800780c:	106d      	asrs	r5, r5, #1
 800780e:	429d      	cmp	r5, r3
 8007810:	bf38      	it	cc
 8007812:	461d      	movcc	r5, r3
 8007814:	0553      	lsls	r3, r2, #21
 8007816:	d531      	bpl.n	800787c <__ssputs_r+0xa0>
 8007818:	4629      	mov	r1, r5
 800781a:	f7fe f89d 	bl	8005958 <_malloc_r>
 800781e:	4606      	mov	r6, r0
 8007820:	b950      	cbnz	r0, 8007838 <__ssputs_r+0x5c>
 8007822:	230c      	movs	r3, #12
 8007824:	f8ca 3000 	str.w	r3, [sl]
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	f04f 30ff 	mov.w	r0, #4294967295
 8007834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007838:	6921      	ldr	r1, [r4, #16]
 800783a:	464a      	mov	r2, r9
 800783c:	f7ff fc1a 	bl	8007074 <memcpy>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	6126      	str	r6, [r4, #16]
 800784e:	6165      	str	r5, [r4, #20]
 8007850:	444e      	add	r6, r9
 8007852:	eba5 0509 	sub.w	r5, r5, r9
 8007856:	6026      	str	r6, [r4, #0]
 8007858:	60a5      	str	r5, [r4, #8]
 800785a:	463e      	mov	r6, r7
 800785c:	42be      	cmp	r6, r7
 800785e:	d900      	bls.n	8007862 <__ssputs_r+0x86>
 8007860:	463e      	mov	r6, r7
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	4632      	mov	r2, r6
 8007866:	4641      	mov	r1, r8
 8007868:	f000 f959 	bl	8007b1e <memmove>
 800786c:	68a3      	ldr	r3, [r4, #8]
 800786e:	1b9b      	subs	r3, r3, r6
 8007870:	60a3      	str	r3, [r4, #8]
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	4433      	add	r3, r6
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	2000      	movs	r0, #0
 800787a:	e7db      	b.n	8007834 <__ssputs_r+0x58>
 800787c:	462a      	mov	r2, r5
 800787e:	f000 f968 	bl	8007b52 <_realloc_r>
 8007882:	4606      	mov	r6, r0
 8007884:	2800      	cmp	r0, #0
 8007886:	d1e1      	bne.n	800784c <__ssputs_r+0x70>
 8007888:	6921      	ldr	r1, [r4, #16]
 800788a:	4650      	mov	r0, sl
 800788c:	f7fd fff8 	bl	8005880 <_free_r>
 8007890:	e7c7      	b.n	8007822 <__ssputs_r+0x46>
	...

08007894 <_svfiprintf_r>:
 8007894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	4698      	mov	r8, r3
 800789a:	898b      	ldrh	r3, [r1, #12]
 800789c:	061b      	lsls	r3, r3, #24
 800789e:	b09d      	sub	sp, #116	; 0x74
 80078a0:	4607      	mov	r7, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	d50e      	bpl.n	80078c6 <_svfiprintf_r+0x32>
 80078a8:	690b      	ldr	r3, [r1, #16]
 80078aa:	b963      	cbnz	r3, 80078c6 <_svfiprintf_r+0x32>
 80078ac:	2140      	movs	r1, #64	; 0x40
 80078ae:	f7fe f853 	bl	8005958 <_malloc_r>
 80078b2:	6028      	str	r0, [r5, #0]
 80078b4:	6128      	str	r0, [r5, #16]
 80078b6:	b920      	cbnz	r0, 80078c2 <_svfiprintf_r+0x2e>
 80078b8:	230c      	movs	r3, #12
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	e0d1      	b.n	8007a66 <_svfiprintf_r+0x1d2>
 80078c2:	2340      	movs	r3, #64	; 0x40
 80078c4:	616b      	str	r3, [r5, #20]
 80078c6:	2300      	movs	r3, #0
 80078c8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ca:	2320      	movs	r3, #32
 80078cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d4:	2330      	movs	r3, #48	; 0x30
 80078d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a80 <_svfiprintf_r+0x1ec>
 80078da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078de:	f04f 0901 	mov.w	r9, #1
 80078e2:	4623      	mov	r3, r4
 80078e4:	469a      	mov	sl, r3
 80078e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ea:	b10a      	cbz	r2, 80078f0 <_svfiprintf_r+0x5c>
 80078ec:	2a25      	cmp	r2, #37	; 0x25
 80078ee:	d1f9      	bne.n	80078e4 <_svfiprintf_r+0x50>
 80078f0:	ebba 0b04 	subs.w	fp, sl, r4
 80078f4:	d00b      	beq.n	800790e <_svfiprintf_r+0x7a>
 80078f6:	465b      	mov	r3, fp
 80078f8:	4622      	mov	r2, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff ff6d 	bl	80077dc <__ssputs_r>
 8007902:	3001      	adds	r0, #1
 8007904:	f000 80aa 	beq.w	8007a5c <_svfiprintf_r+0x1c8>
 8007908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800790a:	445a      	add	r2, fp
 800790c:	9209      	str	r2, [sp, #36]	; 0x24
 800790e:	f89a 3000 	ldrb.w	r3, [sl]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80a2 	beq.w	8007a5c <_svfiprintf_r+0x1c8>
 8007918:	2300      	movs	r3, #0
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007922:	f10a 0a01 	add.w	sl, sl, #1
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	9307      	str	r3, [sp, #28]
 800792a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800792e:	931a      	str	r3, [sp, #104]	; 0x68
 8007930:	4654      	mov	r4, sl
 8007932:	2205      	movs	r2, #5
 8007934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007938:	4851      	ldr	r0, [pc, #324]	; (8007a80 <_svfiprintf_r+0x1ec>)
 800793a:	f7f8 fc59 	bl	80001f0 <memchr>
 800793e:	9a04      	ldr	r2, [sp, #16]
 8007940:	b9d8      	cbnz	r0, 800797a <_svfiprintf_r+0xe6>
 8007942:	06d0      	lsls	r0, r2, #27
 8007944:	bf44      	itt	mi
 8007946:	2320      	movmi	r3, #32
 8007948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794c:	0711      	lsls	r1, r2, #28
 800794e:	bf44      	itt	mi
 8007950:	232b      	movmi	r3, #43	; 0x2b
 8007952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007956:	f89a 3000 	ldrb.w	r3, [sl]
 800795a:	2b2a      	cmp	r3, #42	; 0x2a
 800795c:	d015      	beq.n	800798a <_svfiprintf_r+0xf6>
 800795e:	9a07      	ldr	r2, [sp, #28]
 8007960:	4654      	mov	r4, sl
 8007962:	2000      	movs	r0, #0
 8007964:	f04f 0c0a 	mov.w	ip, #10
 8007968:	4621      	mov	r1, r4
 800796a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796e:	3b30      	subs	r3, #48	; 0x30
 8007970:	2b09      	cmp	r3, #9
 8007972:	d94e      	bls.n	8007a12 <_svfiprintf_r+0x17e>
 8007974:	b1b0      	cbz	r0, 80079a4 <_svfiprintf_r+0x110>
 8007976:	9207      	str	r2, [sp, #28]
 8007978:	e014      	b.n	80079a4 <_svfiprintf_r+0x110>
 800797a:	eba0 0308 	sub.w	r3, r0, r8
 800797e:	fa09 f303 	lsl.w	r3, r9, r3
 8007982:	4313      	orrs	r3, r2
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	46a2      	mov	sl, r4
 8007988:	e7d2      	b.n	8007930 <_svfiprintf_r+0x9c>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	1d19      	adds	r1, r3, #4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	9103      	str	r1, [sp, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	bfbb      	ittet	lt
 8007996:	425b      	neglt	r3, r3
 8007998:	f042 0202 	orrlt.w	r2, r2, #2
 800799c:	9307      	strge	r3, [sp, #28]
 800799e:	9307      	strlt	r3, [sp, #28]
 80079a0:	bfb8      	it	lt
 80079a2:	9204      	strlt	r2, [sp, #16]
 80079a4:	7823      	ldrb	r3, [r4, #0]
 80079a6:	2b2e      	cmp	r3, #46	; 0x2e
 80079a8:	d10c      	bne.n	80079c4 <_svfiprintf_r+0x130>
 80079aa:	7863      	ldrb	r3, [r4, #1]
 80079ac:	2b2a      	cmp	r3, #42	; 0x2a
 80079ae:	d135      	bne.n	8007a1c <_svfiprintf_r+0x188>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	9203      	str	r2, [sp, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfb8      	it	lt
 80079bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80079c0:	3402      	adds	r4, #2
 80079c2:	9305      	str	r3, [sp, #20]
 80079c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a90 <_svfiprintf_r+0x1fc>
 80079c8:	7821      	ldrb	r1, [r4, #0]
 80079ca:	2203      	movs	r2, #3
 80079cc:	4650      	mov	r0, sl
 80079ce:	f7f8 fc0f 	bl	80001f0 <memchr>
 80079d2:	b140      	cbz	r0, 80079e6 <_svfiprintf_r+0x152>
 80079d4:	2340      	movs	r3, #64	; 0x40
 80079d6:	eba0 000a 	sub.w	r0, r0, sl
 80079da:	fa03 f000 	lsl.w	r0, r3, r0
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	4303      	orrs	r3, r0
 80079e2:	3401      	adds	r4, #1
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ea:	4826      	ldr	r0, [pc, #152]	; (8007a84 <_svfiprintf_r+0x1f0>)
 80079ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079f0:	2206      	movs	r2, #6
 80079f2:	f7f8 fbfd 	bl	80001f0 <memchr>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d038      	beq.n	8007a6c <_svfiprintf_r+0x1d8>
 80079fa:	4b23      	ldr	r3, [pc, #140]	; (8007a88 <_svfiprintf_r+0x1f4>)
 80079fc:	bb1b      	cbnz	r3, 8007a46 <_svfiprintf_r+0x1b2>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	3307      	adds	r3, #7
 8007a02:	f023 0307 	bic.w	r3, r3, #7
 8007a06:	3308      	adds	r3, #8
 8007a08:	9303      	str	r3, [sp, #12]
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	4433      	add	r3, r6
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	e767      	b.n	80078e2 <_svfiprintf_r+0x4e>
 8007a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a16:	460c      	mov	r4, r1
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e7a5      	b.n	8007968 <_svfiprintf_r+0xd4>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	3401      	adds	r4, #1
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	4619      	mov	r1, r3
 8007a24:	f04f 0c0a 	mov.w	ip, #10
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2e:	3a30      	subs	r2, #48	; 0x30
 8007a30:	2a09      	cmp	r2, #9
 8007a32:	d903      	bls.n	8007a3c <_svfiprintf_r+0x1a8>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0c5      	beq.n	80079c4 <_svfiprintf_r+0x130>
 8007a38:	9105      	str	r1, [sp, #20]
 8007a3a:	e7c3      	b.n	80079c4 <_svfiprintf_r+0x130>
 8007a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a40:	4604      	mov	r4, r0
 8007a42:	2301      	movs	r3, #1
 8007a44:	e7f0      	b.n	8007a28 <_svfiprintf_r+0x194>
 8007a46:	ab03      	add	r3, sp, #12
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <_svfiprintf_r+0x1f8>)
 8007a4e:	a904      	add	r1, sp, #16
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7fe f895 	bl	8005b80 <_printf_float>
 8007a56:	1c42      	adds	r2, r0, #1
 8007a58:	4606      	mov	r6, r0
 8007a5a:	d1d6      	bne.n	8007a0a <_svfiprintf_r+0x176>
 8007a5c:	89ab      	ldrh	r3, [r5, #12]
 8007a5e:	065b      	lsls	r3, r3, #25
 8007a60:	f53f af2c 	bmi.w	80078bc <_svfiprintf_r+0x28>
 8007a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a66:	b01d      	add	sp, #116	; 0x74
 8007a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	462a      	mov	r2, r5
 8007a72:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <_svfiprintf_r+0x1f8>)
 8007a74:	a904      	add	r1, sp, #16
 8007a76:	4638      	mov	r0, r7
 8007a78:	f7fe fb26 	bl	80060c8 <_printf_i>
 8007a7c:	e7eb      	b.n	8007a56 <_svfiprintf_r+0x1c2>
 8007a7e:	bf00      	nop
 8007a80:	08008da4 	.word	0x08008da4
 8007a84:	08008dae 	.word	0x08008dae
 8007a88:	08005b81 	.word	0x08005b81
 8007a8c:	080077dd 	.word	0x080077dd
 8007a90:	08008daa 	.word	0x08008daa

08007a94 <__assert_func>:
 8007a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a96:	4614      	mov	r4, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <__assert_func+0x2c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	68d8      	ldr	r0, [r3, #12]
 8007aa2:	b14c      	cbz	r4, 8007ab8 <__assert_func+0x24>
 8007aa4:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <__assert_func+0x30>)
 8007aa6:	9100      	str	r1, [sp, #0]
 8007aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007aac:	4906      	ldr	r1, [pc, #24]	; (8007ac8 <__assert_func+0x34>)
 8007aae:	462b      	mov	r3, r5
 8007ab0:	f000 f80e 	bl	8007ad0 <fiprintf>
 8007ab4:	f000 faa4 	bl	8008000 <abort>
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <__assert_func+0x38>)
 8007aba:	461c      	mov	r4, r3
 8007abc:	e7f3      	b.n	8007aa6 <__assert_func+0x12>
 8007abe:	bf00      	nop
 8007ac0:	2000000c 	.word	0x2000000c
 8007ac4:	08008db5 	.word	0x08008db5
 8007ac8:	08008dc2 	.word	0x08008dc2
 8007acc:	08008df0 	.word	0x08008df0

08007ad0 <fiprintf>:
 8007ad0:	b40e      	push	{r1, r2, r3}
 8007ad2:	b503      	push	{r0, r1, lr}
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	ab03      	add	r3, sp, #12
 8007ad8:	4805      	ldr	r0, [pc, #20]	; (8007af0 <fiprintf+0x20>)
 8007ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ade:	6800      	ldr	r0, [r0, #0]
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	f000 f88f 	bl	8007c04 <_vfiprintf_r>
 8007ae6:	b002      	add	sp, #8
 8007ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aec:	b003      	add	sp, #12
 8007aee:	4770      	bx	lr
 8007af0:	2000000c 	.word	0x2000000c

08007af4 <__retarget_lock_init_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <__retarget_lock_acquire_recursive>:
 8007af6:	4770      	bx	lr

08007af8 <__retarget_lock_release_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__ascii_mbtowc>:
 8007afa:	b082      	sub	sp, #8
 8007afc:	b901      	cbnz	r1, 8007b00 <__ascii_mbtowc+0x6>
 8007afe:	a901      	add	r1, sp, #4
 8007b00:	b142      	cbz	r2, 8007b14 <__ascii_mbtowc+0x1a>
 8007b02:	b14b      	cbz	r3, 8007b18 <__ascii_mbtowc+0x1e>
 8007b04:	7813      	ldrb	r3, [r2, #0]
 8007b06:	600b      	str	r3, [r1, #0]
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	1e10      	subs	r0, r2, #0
 8007b0c:	bf18      	it	ne
 8007b0e:	2001      	movne	r0, #1
 8007b10:	b002      	add	sp, #8
 8007b12:	4770      	bx	lr
 8007b14:	4610      	mov	r0, r2
 8007b16:	e7fb      	b.n	8007b10 <__ascii_mbtowc+0x16>
 8007b18:	f06f 0001 	mvn.w	r0, #1
 8007b1c:	e7f8      	b.n	8007b10 <__ascii_mbtowc+0x16>

08007b1e <memmove>:
 8007b1e:	4288      	cmp	r0, r1
 8007b20:	b510      	push	{r4, lr}
 8007b22:	eb01 0402 	add.w	r4, r1, r2
 8007b26:	d902      	bls.n	8007b2e <memmove+0x10>
 8007b28:	4284      	cmp	r4, r0
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	d807      	bhi.n	8007b3e <memmove+0x20>
 8007b2e:	1e43      	subs	r3, r0, #1
 8007b30:	42a1      	cmp	r1, r4
 8007b32:	d008      	beq.n	8007b46 <memmove+0x28>
 8007b34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b3c:	e7f8      	b.n	8007b30 <memmove+0x12>
 8007b3e:	4402      	add	r2, r0
 8007b40:	4601      	mov	r1, r0
 8007b42:	428a      	cmp	r2, r1
 8007b44:	d100      	bne.n	8007b48 <memmove+0x2a>
 8007b46:	bd10      	pop	{r4, pc}
 8007b48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b50:	e7f7      	b.n	8007b42 <memmove+0x24>

08007b52 <_realloc_r>:
 8007b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b56:	4680      	mov	r8, r0
 8007b58:	4614      	mov	r4, r2
 8007b5a:	460e      	mov	r6, r1
 8007b5c:	b921      	cbnz	r1, 8007b68 <_realloc_r+0x16>
 8007b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	4611      	mov	r1, r2
 8007b64:	f7fd bef8 	b.w	8005958 <_malloc_r>
 8007b68:	b92a      	cbnz	r2, 8007b76 <_realloc_r+0x24>
 8007b6a:	f7fd fe89 	bl	8005880 <_free_r>
 8007b6e:	4625      	mov	r5, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b76:	f000 fc67 	bl	8008448 <_malloc_usable_size_r>
 8007b7a:	4284      	cmp	r4, r0
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	d802      	bhi.n	8007b86 <_realloc_r+0x34>
 8007b80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b84:	d812      	bhi.n	8007bac <_realloc_r+0x5a>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4640      	mov	r0, r8
 8007b8a:	f7fd fee5 	bl	8005958 <_malloc_r>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d0ed      	beq.n	8007b70 <_realloc_r+0x1e>
 8007b94:	42bc      	cmp	r4, r7
 8007b96:	4622      	mov	r2, r4
 8007b98:	4631      	mov	r1, r6
 8007b9a:	bf28      	it	cs
 8007b9c:	463a      	movcs	r2, r7
 8007b9e:	f7ff fa69 	bl	8007074 <memcpy>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	f7fd fe6b 	bl	8005880 <_free_r>
 8007baa:	e7e1      	b.n	8007b70 <_realloc_r+0x1e>
 8007bac:	4635      	mov	r5, r6
 8007bae:	e7df      	b.n	8007b70 <_realloc_r+0x1e>

08007bb0 <__sfputc_r>:
 8007bb0:	6893      	ldr	r3, [r2, #8]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	b410      	push	{r4}
 8007bb8:	6093      	str	r3, [r2, #8]
 8007bba:	da08      	bge.n	8007bce <__sfputc_r+0x1e>
 8007bbc:	6994      	ldr	r4, [r2, #24]
 8007bbe:	42a3      	cmp	r3, r4
 8007bc0:	db01      	blt.n	8007bc6 <__sfputc_r+0x16>
 8007bc2:	290a      	cmp	r1, #10
 8007bc4:	d103      	bne.n	8007bce <__sfputc_r+0x1e>
 8007bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bca:	f000 b94b 	b.w	8007e64 <__swbuf_r>
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	1c58      	adds	r0, r3, #1
 8007bd2:	6010      	str	r0, [r2, #0]
 8007bd4:	7019      	strb	r1, [r3, #0]
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <__sfputs_r>:
 8007bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be0:	4606      	mov	r6, r0
 8007be2:	460f      	mov	r7, r1
 8007be4:	4614      	mov	r4, r2
 8007be6:	18d5      	adds	r5, r2, r3
 8007be8:	42ac      	cmp	r4, r5
 8007bea:	d101      	bne.n	8007bf0 <__sfputs_r+0x12>
 8007bec:	2000      	movs	r0, #0
 8007bee:	e007      	b.n	8007c00 <__sfputs_r+0x22>
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	463a      	mov	r2, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7ff ffda 	bl	8007bb0 <__sfputc_r>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d1f3      	bne.n	8007be8 <__sfputs_r+0xa>
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c04 <_vfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	460d      	mov	r5, r1
 8007c0a:	b09d      	sub	sp, #116	; 0x74
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	4698      	mov	r8, r3
 8007c10:	4606      	mov	r6, r0
 8007c12:	b118      	cbz	r0, 8007c1c <_vfiprintf_r+0x18>
 8007c14:	6983      	ldr	r3, [r0, #24]
 8007c16:	b90b      	cbnz	r3, 8007c1c <_vfiprintf_r+0x18>
 8007c18:	f000 fb14 	bl	8008244 <__sinit>
 8007c1c:	4b89      	ldr	r3, [pc, #548]	; (8007e44 <_vfiprintf_r+0x240>)
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	d11b      	bne.n	8007c5a <_vfiprintf_r+0x56>
 8007c22:	6875      	ldr	r5, [r6, #4]
 8007c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c26:	07d9      	lsls	r1, r3, #31
 8007c28:	d405      	bmi.n	8007c36 <_vfiprintf_r+0x32>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	059a      	lsls	r2, r3, #22
 8007c2e:	d402      	bmi.n	8007c36 <_vfiprintf_r+0x32>
 8007c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c32:	f7ff ff60 	bl	8007af6 <__retarget_lock_acquire_recursive>
 8007c36:	89ab      	ldrh	r3, [r5, #12]
 8007c38:	071b      	lsls	r3, r3, #28
 8007c3a:	d501      	bpl.n	8007c40 <_vfiprintf_r+0x3c>
 8007c3c:	692b      	ldr	r3, [r5, #16]
 8007c3e:	b9eb      	cbnz	r3, 8007c7c <_vfiprintf_r+0x78>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 f96e 	bl	8007f24 <__swsetup_r>
 8007c48:	b1c0      	cbz	r0, 8007c7c <_vfiprintf_r+0x78>
 8007c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4c:	07dc      	lsls	r4, r3, #31
 8007c4e:	d50e      	bpl.n	8007c6e <_vfiprintf_r+0x6a>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	b01d      	add	sp, #116	; 0x74
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	4b7b      	ldr	r3, [pc, #492]	; (8007e48 <_vfiprintf_r+0x244>)
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	d101      	bne.n	8007c64 <_vfiprintf_r+0x60>
 8007c60:	68b5      	ldr	r5, [r6, #8]
 8007c62:	e7df      	b.n	8007c24 <_vfiprintf_r+0x20>
 8007c64:	4b79      	ldr	r3, [pc, #484]	; (8007e4c <_vfiprintf_r+0x248>)
 8007c66:	429d      	cmp	r5, r3
 8007c68:	bf08      	it	eq
 8007c6a:	68f5      	ldreq	r5, [r6, #12]
 8007c6c:	e7da      	b.n	8007c24 <_vfiprintf_r+0x20>
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	0598      	lsls	r0, r3, #22
 8007c72:	d4ed      	bmi.n	8007c50 <_vfiprintf_r+0x4c>
 8007c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c76:	f7ff ff3f 	bl	8007af8 <__retarget_lock_release_recursive>
 8007c7a:	e7e9      	b.n	8007c50 <_vfiprintf_r+0x4c>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	2320      	movs	r3, #32
 8007c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8a:	2330      	movs	r3, #48	; 0x30
 8007c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e50 <_vfiprintf_r+0x24c>
 8007c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c94:	f04f 0901 	mov.w	r9, #1
 8007c98:	4623      	mov	r3, r4
 8007c9a:	469a      	mov	sl, r3
 8007c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca0:	b10a      	cbz	r2, 8007ca6 <_vfiprintf_r+0xa2>
 8007ca2:	2a25      	cmp	r2, #37	; 0x25
 8007ca4:	d1f9      	bne.n	8007c9a <_vfiprintf_r+0x96>
 8007ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8007caa:	d00b      	beq.n	8007cc4 <_vfiprintf_r+0xc0>
 8007cac:	465b      	mov	r3, fp
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ff93 	bl	8007bde <__sfputs_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f000 80aa 	beq.w	8007e12 <_vfiprintf_r+0x20e>
 8007cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cc0:	445a      	add	r2, fp
 8007cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80a2 	beq.w	8007e12 <_vfiprintf_r+0x20e>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd8:	f10a 0a01 	add.w	sl, sl, #1
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ce6:	4654      	mov	r4, sl
 8007ce8:	2205      	movs	r2, #5
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	4858      	ldr	r0, [pc, #352]	; (8007e50 <_vfiprintf_r+0x24c>)
 8007cf0:	f7f8 fa7e 	bl	80001f0 <memchr>
 8007cf4:	9a04      	ldr	r2, [sp, #16]
 8007cf6:	b9d8      	cbnz	r0, 8007d30 <_vfiprintf_r+0x12c>
 8007cf8:	06d1      	lsls	r1, r2, #27
 8007cfa:	bf44      	itt	mi
 8007cfc:	2320      	movmi	r3, #32
 8007cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d02:	0713      	lsls	r3, r2, #28
 8007d04:	bf44      	itt	mi
 8007d06:	232b      	movmi	r3, #43	; 0x2b
 8007d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d10:	2b2a      	cmp	r3, #42	; 0x2a
 8007d12:	d015      	beq.n	8007d40 <_vfiprintf_r+0x13c>
 8007d14:	9a07      	ldr	r2, [sp, #28]
 8007d16:	4654      	mov	r4, sl
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f04f 0c0a 	mov.w	ip, #10
 8007d1e:	4621      	mov	r1, r4
 8007d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d24:	3b30      	subs	r3, #48	; 0x30
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d94e      	bls.n	8007dc8 <_vfiprintf_r+0x1c4>
 8007d2a:	b1b0      	cbz	r0, 8007d5a <_vfiprintf_r+0x156>
 8007d2c:	9207      	str	r2, [sp, #28]
 8007d2e:	e014      	b.n	8007d5a <_vfiprintf_r+0x156>
 8007d30:	eba0 0308 	sub.w	r3, r0, r8
 8007d34:	fa09 f303 	lsl.w	r3, r9, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	46a2      	mov	sl, r4
 8007d3e:	e7d2      	b.n	8007ce6 <_vfiprintf_r+0xe2>
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	1d19      	adds	r1, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	9103      	str	r1, [sp, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bfbb      	ittet	lt
 8007d4c:	425b      	neglt	r3, r3
 8007d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d52:	9307      	strge	r3, [sp, #28]
 8007d54:	9307      	strlt	r3, [sp, #28]
 8007d56:	bfb8      	it	lt
 8007d58:	9204      	strlt	r2, [sp, #16]
 8007d5a:	7823      	ldrb	r3, [r4, #0]
 8007d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d5e:	d10c      	bne.n	8007d7a <_vfiprintf_r+0x176>
 8007d60:	7863      	ldrb	r3, [r4, #1]
 8007d62:	2b2a      	cmp	r3, #42	; 0x2a
 8007d64:	d135      	bne.n	8007dd2 <_vfiprintf_r+0x1ce>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	9203      	str	r2, [sp, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bfb8      	it	lt
 8007d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d76:	3402      	adds	r4, #2
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e60 <_vfiprintf_r+0x25c>
 8007d7e:	7821      	ldrb	r1, [r4, #0]
 8007d80:	2203      	movs	r2, #3
 8007d82:	4650      	mov	r0, sl
 8007d84:	f7f8 fa34 	bl	80001f0 <memchr>
 8007d88:	b140      	cbz	r0, 8007d9c <_vfiprintf_r+0x198>
 8007d8a:	2340      	movs	r3, #64	; 0x40
 8007d8c:	eba0 000a 	sub.w	r0, r0, sl
 8007d90:	fa03 f000 	lsl.w	r0, r3, r0
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	4303      	orrs	r3, r0
 8007d98:	3401      	adds	r4, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da0:	482c      	ldr	r0, [pc, #176]	; (8007e54 <_vfiprintf_r+0x250>)
 8007da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007da6:	2206      	movs	r2, #6
 8007da8:	f7f8 fa22 	bl	80001f0 <memchr>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d03f      	beq.n	8007e30 <_vfiprintf_r+0x22c>
 8007db0:	4b29      	ldr	r3, [pc, #164]	; (8007e58 <_vfiprintf_r+0x254>)
 8007db2:	bb1b      	cbnz	r3, 8007dfc <_vfiprintf_r+0x1f8>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	3307      	adds	r3, #7
 8007db8:	f023 0307 	bic.w	r3, r3, #7
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	9303      	str	r3, [sp, #12]
 8007dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc2:	443b      	add	r3, r7
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	e767      	b.n	8007c98 <_vfiprintf_r+0x94>
 8007dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dcc:	460c      	mov	r4, r1
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e7a5      	b.n	8007d1e <_vfiprintf_r+0x11a>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	3401      	adds	r4, #1
 8007dd6:	9305      	str	r3, [sp, #20]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f04f 0c0a 	mov.w	ip, #10
 8007dde:	4620      	mov	r0, r4
 8007de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de4:	3a30      	subs	r2, #48	; 0x30
 8007de6:	2a09      	cmp	r2, #9
 8007de8:	d903      	bls.n	8007df2 <_vfiprintf_r+0x1ee>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0c5      	beq.n	8007d7a <_vfiprintf_r+0x176>
 8007dee:	9105      	str	r1, [sp, #20]
 8007df0:	e7c3      	b.n	8007d7a <_vfiprintf_r+0x176>
 8007df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df6:	4604      	mov	r4, r0
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e7f0      	b.n	8007dde <_vfiprintf_r+0x1da>
 8007dfc:	ab03      	add	r3, sp, #12
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	462a      	mov	r2, r5
 8007e02:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <_vfiprintf_r+0x258>)
 8007e04:	a904      	add	r1, sp, #16
 8007e06:	4630      	mov	r0, r6
 8007e08:	f7fd feba 	bl	8005b80 <_printf_float>
 8007e0c:	4607      	mov	r7, r0
 8007e0e:	1c78      	adds	r0, r7, #1
 8007e10:	d1d6      	bne.n	8007dc0 <_vfiprintf_r+0x1bc>
 8007e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e14:	07d9      	lsls	r1, r3, #31
 8007e16:	d405      	bmi.n	8007e24 <_vfiprintf_r+0x220>
 8007e18:	89ab      	ldrh	r3, [r5, #12]
 8007e1a:	059a      	lsls	r2, r3, #22
 8007e1c:	d402      	bmi.n	8007e24 <_vfiprintf_r+0x220>
 8007e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e20:	f7ff fe6a 	bl	8007af8 <__retarget_lock_release_recursive>
 8007e24:	89ab      	ldrh	r3, [r5, #12]
 8007e26:	065b      	lsls	r3, r3, #25
 8007e28:	f53f af12 	bmi.w	8007c50 <_vfiprintf_r+0x4c>
 8007e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e2e:	e711      	b.n	8007c54 <_vfiprintf_r+0x50>
 8007e30:	ab03      	add	r3, sp, #12
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	462a      	mov	r2, r5
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <_vfiprintf_r+0x258>)
 8007e38:	a904      	add	r1, sp, #16
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7fe f944 	bl	80060c8 <_printf_i>
 8007e40:	e7e4      	b.n	8007e0c <_vfiprintf_r+0x208>
 8007e42:	bf00      	nop
 8007e44:	08008f1c 	.word	0x08008f1c
 8007e48:	08008f3c 	.word	0x08008f3c
 8007e4c:	08008efc 	.word	0x08008efc
 8007e50:	08008da4 	.word	0x08008da4
 8007e54:	08008dae 	.word	0x08008dae
 8007e58:	08005b81 	.word	0x08005b81
 8007e5c:	08007bdf 	.word	0x08007bdf
 8007e60:	08008daa 	.word	0x08008daa

08007e64 <__swbuf_r>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	460e      	mov	r6, r1
 8007e68:	4614      	mov	r4, r2
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b118      	cbz	r0, 8007e76 <__swbuf_r+0x12>
 8007e6e:	6983      	ldr	r3, [r0, #24]
 8007e70:	b90b      	cbnz	r3, 8007e76 <__swbuf_r+0x12>
 8007e72:	f000 f9e7 	bl	8008244 <__sinit>
 8007e76:	4b21      	ldr	r3, [pc, #132]	; (8007efc <__swbuf_r+0x98>)
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	d12b      	bne.n	8007ed4 <__swbuf_r+0x70>
 8007e7c:	686c      	ldr	r4, [r5, #4]
 8007e7e:	69a3      	ldr	r3, [r4, #24]
 8007e80:	60a3      	str	r3, [r4, #8]
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	071a      	lsls	r2, r3, #28
 8007e86:	d52f      	bpl.n	8007ee8 <__swbuf_r+0x84>
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	b36b      	cbz	r3, 8007ee8 <__swbuf_r+0x84>
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1ac0      	subs	r0, r0, r3
 8007e92:	6963      	ldr	r3, [r4, #20]
 8007e94:	b2f6      	uxtb	r6, r6
 8007e96:	4283      	cmp	r3, r0
 8007e98:	4637      	mov	r7, r6
 8007e9a:	dc04      	bgt.n	8007ea6 <__swbuf_r+0x42>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f93c 	bl	800811c <_fflush_r>
 8007ea4:	bb30      	cbnz	r0, 8007ef4 <__swbuf_r+0x90>
 8007ea6:	68a3      	ldr	r3, [r4, #8]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	60a3      	str	r3, [r4, #8]
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	6022      	str	r2, [r4, #0]
 8007eb2:	701e      	strb	r6, [r3, #0]
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	4283      	cmp	r3, r0
 8007eba:	d004      	beq.n	8007ec6 <__swbuf_r+0x62>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	07db      	lsls	r3, r3, #31
 8007ec0:	d506      	bpl.n	8007ed0 <__swbuf_r+0x6c>
 8007ec2:	2e0a      	cmp	r6, #10
 8007ec4:	d104      	bne.n	8007ed0 <__swbuf_r+0x6c>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 f927 	bl	800811c <_fflush_r>
 8007ece:	b988      	cbnz	r0, 8007ef4 <__swbuf_r+0x90>
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed4:	4b0a      	ldr	r3, [pc, #40]	; (8007f00 <__swbuf_r+0x9c>)
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	d101      	bne.n	8007ede <__swbuf_r+0x7a>
 8007eda:	68ac      	ldr	r4, [r5, #8]
 8007edc:	e7cf      	b.n	8007e7e <__swbuf_r+0x1a>
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <__swbuf_r+0xa0>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	bf08      	it	eq
 8007ee4:	68ec      	ldreq	r4, [r5, #12]
 8007ee6:	e7ca      	b.n	8007e7e <__swbuf_r+0x1a>
 8007ee8:	4621      	mov	r1, r4
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 f81a 	bl	8007f24 <__swsetup_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d0cb      	beq.n	8007e8c <__swbuf_r+0x28>
 8007ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ef8:	e7ea      	b.n	8007ed0 <__swbuf_r+0x6c>
 8007efa:	bf00      	nop
 8007efc:	08008f1c 	.word	0x08008f1c
 8007f00:	08008f3c 	.word	0x08008f3c
 8007f04:	08008efc 	.word	0x08008efc

08007f08 <__ascii_wctomb>:
 8007f08:	b149      	cbz	r1, 8007f1e <__ascii_wctomb+0x16>
 8007f0a:	2aff      	cmp	r2, #255	; 0xff
 8007f0c:	bf85      	ittet	hi
 8007f0e:	238a      	movhi	r3, #138	; 0x8a
 8007f10:	6003      	strhi	r3, [r0, #0]
 8007f12:	700a      	strbls	r2, [r1, #0]
 8007f14:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f18:	bf98      	it	ls
 8007f1a:	2001      	movls	r0, #1
 8007f1c:	4770      	bx	lr
 8007f1e:	4608      	mov	r0, r1
 8007f20:	4770      	bx	lr
	...

08007f24 <__swsetup_r>:
 8007f24:	4b32      	ldr	r3, [pc, #200]	; (8007ff0 <__swsetup_r+0xcc>)
 8007f26:	b570      	push	{r4, r5, r6, lr}
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	b125      	cbz	r5, 8007f3a <__swsetup_r+0x16>
 8007f30:	69ab      	ldr	r3, [r5, #24]
 8007f32:	b913      	cbnz	r3, 8007f3a <__swsetup_r+0x16>
 8007f34:	4628      	mov	r0, r5
 8007f36:	f000 f985 	bl	8008244 <__sinit>
 8007f3a:	4b2e      	ldr	r3, [pc, #184]	; (8007ff4 <__swsetup_r+0xd0>)
 8007f3c:	429c      	cmp	r4, r3
 8007f3e:	d10f      	bne.n	8007f60 <__swsetup_r+0x3c>
 8007f40:	686c      	ldr	r4, [r5, #4]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f48:	0719      	lsls	r1, r3, #28
 8007f4a:	d42c      	bmi.n	8007fa6 <__swsetup_r+0x82>
 8007f4c:	06dd      	lsls	r5, r3, #27
 8007f4e:	d411      	bmi.n	8007f74 <__swsetup_r+0x50>
 8007f50:	2309      	movs	r3, #9
 8007f52:	6033      	str	r3, [r6, #0]
 8007f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5e:	e03e      	b.n	8007fde <__swsetup_r+0xba>
 8007f60:	4b25      	ldr	r3, [pc, #148]	; (8007ff8 <__swsetup_r+0xd4>)
 8007f62:	429c      	cmp	r4, r3
 8007f64:	d101      	bne.n	8007f6a <__swsetup_r+0x46>
 8007f66:	68ac      	ldr	r4, [r5, #8]
 8007f68:	e7eb      	b.n	8007f42 <__swsetup_r+0x1e>
 8007f6a:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <__swsetup_r+0xd8>)
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	bf08      	it	eq
 8007f70:	68ec      	ldreq	r4, [r5, #12]
 8007f72:	e7e6      	b.n	8007f42 <__swsetup_r+0x1e>
 8007f74:	0758      	lsls	r0, r3, #29
 8007f76:	d512      	bpl.n	8007f9e <__swsetup_r+0x7a>
 8007f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f7a:	b141      	cbz	r1, 8007f8e <__swsetup_r+0x6a>
 8007f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f80:	4299      	cmp	r1, r3
 8007f82:	d002      	beq.n	8007f8a <__swsetup_r+0x66>
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7fd fc7b 	bl	8005880 <_free_r>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	2300      	movs	r3, #0
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f043 0308 	orr.w	r3, r3, #8
 8007fa4:	81a3      	strh	r3, [r4, #12]
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	b94b      	cbnz	r3, 8007fbe <__swsetup_r+0x9a>
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb4:	d003      	beq.n	8007fbe <__swsetup_r+0x9a>
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 fa05 	bl	80083c8 <__smakebuf_r>
 8007fbe:	89a0      	ldrh	r0, [r4, #12]
 8007fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fc4:	f010 0301 	ands.w	r3, r0, #1
 8007fc8:	d00a      	beq.n	8007fe0 <__swsetup_r+0xbc>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60a3      	str	r3, [r4, #8]
 8007fce:	6963      	ldr	r3, [r4, #20]
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	61a3      	str	r3, [r4, #24]
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	b943      	cbnz	r3, 8007fea <__swsetup_r+0xc6>
 8007fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fdc:	d1ba      	bne.n	8007f54 <__swsetup_r+0x30>
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	0781      	lsls	r1, r0, #30
 8007fe2:	bf58      	it	pl
 8007fe4:	6963      	ldrpl	r3, [r4, #20]
 8007fe6:	60a3      	str	r3, [r4, #8]
 8007fe8:	e7f4      	b.n	8007fd4 <__swsetup_r+0xb0>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e7f7      	b.n	8007fde <__swsetup_r+0xba>
 8007fee:	bf00      	nop
 8007ff0:	2000000c 	.word	0x2000000c
 8007ff4:	08008f1c 	.word	0x08008f1c
 8007ff8:	08008f3c 	.word	0x08008f3c
 8007ffc:	08008efc 	.word	0x08008efc

08008000 <abort>:
 8008000:	b508      	push	{r3, lr}
 8008002:	2006      	movs	r0, #6
 8008004:	f000 fa50 	bl	80084a8 <raise>
 8008008:	2001      	movs	r0, #1
 800800a:	f7fa fc5f 	bl	80028cc <_exit>
	...

08008010 <__sflush_r>:
 8008010:	898a      	ldrh	r2, [r1, #12]
 8008012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008016:	4605      	mov	r5, r0
 8008018:	0710      	lsls	r0, r2, #28
 800801a:	460c      	mov	r4, r1
 800801c:	d458      	bmi.n	80080d0 <__sflush_r+0xc0>
 800801e:	684b      	ldr	r3, [r1, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dc05      	bgt.n	8008030 <__sflush_r+0x20>
 8008024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	dc02      	bgt.n	8008030 <__sflush_r+0x20>
 800802a:	2000      	movs	r0, #0
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008032:	2e00      	cmp	r6, #0
 8008034:	d0f9      	beq.n	800802a <__sflush_r+0x1a>
 8008036:	2300      	movs	r3, #0
 8008038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800803c:	682f      	ldr	r7, [r5, #0]
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	d032      	beq.n	80080a8 <__sflush_r+0x98>
 8008042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	075a      	lsls	r2, r3, #29
 8008048:	d505      	bpl.n	8008056 <__sflush_r+0x46>
 800804a:	6863      	ldr	r3, [r4, #4]
 800804c:	1ac0      	subs	r0, r0, r3
 800804e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008050:	b10b      	cbz	r3, 8008056 <__sflush_r+0x46>
 8008052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008054:	1ac0      	subs	r0, r0, r3
 8008056:	2300      	movs	r3, #0
 8008058:	4602      	mov	r2, r0
 800805a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800805c:	6a21      	ldr	r1, [r4, #32]
 800805e:	4628      	mov	r0, r5
 8008060:	47b0      	blx	r6
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	d106      	bne.n	8008076 <__sflush_r+0x66>
 8008068:	6829      	ldr	r1, [r5, #0]
 800806a:	291d      	cmp	r1, #29
 800806c:	d82c      	bhi.n	80080c8 <__sflush_r+0xb8>
 800806e:	4a2a      	ldr	r2, [pc, #168]	; (8008118 <__sflush_r+0x108>)
 8008070:	40ca      	lsrs	r2, r1
 8008072:	07d6      	lsls	r6, r2, #31
 8008074:	d528      	bpl.n	80080c8 <__sflush_r+0xb8>
 8008076:	2200      	movs	r2, #0
 8008078:	6062      	str	r2, [r4, #4]
 800807a:	04d9      	lsls	r1, r3, #19
 800807c:	6922      	ldr	r2, [r4, #16]
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	d504      	bpl.n	800808c <__sflush_r+0x7c>
 8008082:	1c42      	adds	r2, r0, #1
 8008084:	d101      	bne.n	800808a <__sflush_r+0x7a>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b903      	cbnz	r3, 800808c <__sflush_r+0x7c>
 800808a:	6560      	str	r0, [r4, #84]	; 0x54
 800808c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800808e:	602f      	str	r7, [r5, #0]
 8008090:	2900      	cmp	r1, #0
 8008092:	d0ca      	beq.n	800802a <__sflush_r+0x1a>
 8008094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008098:	4299      	cmp	r1, r3
 800809a:	d002      	beq.n	80080a2 <__sflush_r+0x92>
 800809c:	4628      	mov	r0, r5
 800809e:	f7fd fbef 	bl	8005880 <_free_r>
 80080a2:	2000      	movs	r0, #0
 80080a4:	6360      	str	r0, [r4, #52]	; 0x34
 80080a6:	e7c1      	b.n	800802c <__sflush_r+0x1c>
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	2301      	movs	r3, #1
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b0      	blx	r6
 80080b0:	1c41      	adds	r1, r0, #1
 80080b2:	d1c7      	bne.n	8008044 <__sflush_r+0x34>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0c4      	beq.n	8008044 <__sflush_r+0x34>
 80080ba:	2b1d      	cmp	r3, #29
 80080bc:	d001      	beq.n	80080c2 <__sflush_r+0xb2>
 80080be:	2b16      	cmp	r3, #22
 80080c0:	d101      	bne.n	80080c6 <__sflush_r+0xb6>
 80080c2:	602f      	str	r7, [r5, #0]
 80080c4:	e7b1      	b.n	800802a <__sflush_r+0x1a>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080cc:	81a3      	strh	r3, [r4, #12]
 80080ce:	e7ad      	b.n	800802c <__sflush_r+0x1c>
 80080d0:	690f      	ldr	r7, [r1, #16]
 80080d2:	2f00      	cmp	r7, #0
 80080d4:	d0a9      	beq.n	800802a <__sflush_r+0x1a>
 80080d6:	0793      	lsls	r3, r2, #30
 80080d8:	680e      	ldr	r6, [r1, #0]
 80080da:	bf08      	it	eq
 80080dc:	694b      	ldreq	r3, [r1, #20]
 80080de:	600f      	str	r7, [r1, #0]
 80080e0:	bf18      	it	ne
 80080e2:	2300      	movne	r3, #0
 80080e4:	eba6 0807 	sub.w	r8, r6, r7
 80080e8:	608b      	str	r3, [r1, #8]
 80080ea:	f1b8 0f00 	cmp.w	r8, #0
 80080ee:	dd9c      	ble.n	800802a <__sflush_r+0x1a>
 80080f0:	6a21      	ldr	r1, [r4, #32]
 80080f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080f4:	4643      	mov	r3, r8
 80080f6:	463a      	mov	r2, r7
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b0      	blx	r6
 80080fc:	2800      	cmp	r0, #0
 80080fe:	dc06      	bgt.n	800810e <__sflush_r+0xfe>
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	e78e      	b.n	800802c <__sflush_r+0x1c>
 800810e:	4407      	add	r7, r0
 8008110:	eba8 0800 	sub.w	r8, r8, r0
 8008114:	e7e9      	b.n	80080ea <__sflush_r+0xda>
 8008116:	bf00      	nop
 8008118:	20400001 	.word	0x20400001

0800811c <_fflush_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	690b      	ldr	r3, [r1, #16]
 8008120:	4605      	mov	r5, r0
 8008122:	460c      	mov	r4, r1
 8008124:	b913      	cbnz	r3, 800812c <_fflush_r+0x10>
 8008126:	2500      	movs	r5, #0
 8008128:	4628      	mov	r0, r5
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	b118      	cbz	r0, 8008136 <_fflush_r+0x1a>
 800812e:	6983      	ldr	r3, [r0, #24]
 8008130:	b90b      	cbnz	r3, 8008136 <_fflush_r+0x1a>
 8008132:	f000 f887 	bl	8008244 <__sinit>
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <_fflush_r+0x6c>)
 8008138:	429c      	cmp	r4, r3
 800813a:	d11b      	bne.n	8008174 <_fflush_r+0x58>
 800813c:	686c      	ldr	r4, [r5, #4]
 800813e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0ef      	beq.n	8008126 <_fflush_r+0xa>
 8008146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008148:	07d0      	lsls	r0, r2, #31
 800814a:	d404      	bmi.n	8008156 <_fflush_r+0x3a>
 800814c:	0599      	lsls	r1, r3, #22
 800814e:	d402      	bmi.n	8008156 <_fflush_r+0x3a>
 8008150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008152:	f7ff fcd0 	bl	8007af6 <__retarget_lock_acquire_recursive>
 8008156:	4628      	mov	r0, r5
 8008158:	4621      	mov	r1, r4
 800815a:	f7ff ff59 	bl	8008010 <__sflush_r>
 800815e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008160:	07da      	lsls	r2, r3, #31
 8008162:	4605      	mov	r5, r0
 8008164:	d4e0      	bmi.n	8008128 <_fflush_r+0xc>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	059b      	lsls	r3, r3, #22
 800816a:	d4dd      	bmi.n	8008128 <_fflush_r+0xc>
 800816c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816e:	f7ff fcc3 	bl	8007af8 <__retarget_lock_release_recursive>
 8008172:	e7d9      	b.n	8008128 <_fflush_r+0xc>
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <_fflush_r+0x70>)
 8008176:	429c      	cmp	r4, r3
 8008178:	d101      	bne.n	800817e <_fflush_r+0x62>
 800817a:	68ac      	ldr	r4, [r5, #8]
 800817c:	e7df      	b.n	800813e <_fflush_r+0x22>
 800817e:	4b04      	ldr	r3, [pc, #16]	; (8008190 <_fflush_r+0x74>)
 8008180:	429c      	cmp	r4, r3
 8008182:	bf08      	it	eq
 8008184:	68ec      	ldreq	r4, [r5, #12]
 8008186:	e7da      	b.n	800813e <_fflush_r+0x22>
 8008188:	08008f1c 	.word	0x08008f1c
 800818c:	08008f3c 	.word	0x08008f3c
 8008190:	08008efc 	.word	0x08008efc

08008194 <std>:
 8008194:	2300      	movs	r3, #0
 8008196:	b510      	push	{r4, lr}
 8008198:	4604      	mov	r4, r0
 800819a:	e9c0 3300 	strd	r3, r3, [r0]
 800819e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081a2:	6083      	str	r3, [r0, #8]
 80081a4:	8181      	strh	r1, [r0, #12]
 80081a6:	6643      	str	r3, [r0, #100]	; 0x64
 80081a8:	81c2      	strh	r2, [r0, #14]
 80081aa:	6183      	str	r3, [r0, #24]
 80081ac:	4619      	mov	r1, r3
 80081ae:	2208      	movs	r2, #8
 80081b0:	305c      	adds	r0, #92	; 0x5c
 80081b2:	f7fd fb5d 	bl	8005870 <memset>
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <std+0x38>)
 80081b8:	6263      	str	r3, [r4, #36]	; 0x24
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <std+0x3c>)
 80081bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <std+0x40>)
 80081c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <std+0x44>)
 80081c4:	6224      	str	r4, [r4, #32]
 80081c6:	6323      	str	r3, [r4, #48]	; 0x30
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	bf00      	nop
 80081cc:	080084e1 	.word	0x080084e1
 80081d0:	08008503 	.word	0x08008503
 80081d4:	0800853b 	.word	0x0800853b
 80081d8:	0800855f 	.word	0x0800855f

080081dc <_cleanup_r>:
 80081dc:	4901      	ldr	r1, [pc, #4]	; (80081e4 <_cleanup_r+0x8>)
 80081de:	f000 b8af 	b.w	8008340 <_fwalk_reent>
 80081e2:	bf00      	nop
 80081e4:	0800811d 	.word	0x0800811d

080081e8 <__sfmoreglue>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	2268      	movs	r2, #104	; 0x68
 80081ec:	1e4d      	subs	r5, r1, #1
 80081ee:	4355      	muls	r5, r2
 80081f0:	460e      	mov	r6, r1
 80081f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081f6:	f7fd fbaf 	bl	8005958 <_malloc_r>
 80081fa:	4604      	mov	r4, r0
 80081fc:	b140      	cbz	r0, 8008210 <__sfmoreglue+0x28>
 80081fe:	2100      	movs	r1, #0
 8008200:	e9c0 1600 	strd	r1, r6, [r0]
 8008204:	300c      	adds	r0, #12
 8008206:	60a0      	str	r0, [r4, #8]
 8008208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800820c:	f7fd fb30 	bl	8005870 <memset>
 8008210:	4620      	mov	r0, r4
 8008212:	bd70      	pop	{r4, r5, r6, pc}

08008214 <__sfp_lock_acquire>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__sfp_lock_acquire+0x8>)
 8008216:	f7ff bc6e 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	200003d5 	.word	0x200003d5

08008220 <__sfp_lock_release>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__sfp_lock_release+0x8>)
 8008222:	f7ff bc69 	b.w	8007af8 <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	200003d5 	.word	0x200003d5

0800822c <__sinit_lock_acquire>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__sinit_lock_acquire+0x8>)
 800822e:	f7ff bc62 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 8008232:	bf00      	nop
 8008234:	200003d6 	.word	0x200003d6

08008238 <__sinit_lock_release>:
 8008238:	4801      	ldr	r0, [pc, #4]	; (8008240 <__sinit_lock_release+0x8>)
 800823a:	f7ff bc5d 	b.w	8007af8 <__retarget_lock_release_recursive>
 800823e:	bf00      	nop
 8008240:	200003d6 	.word	0x200003d6

08008244 <__sinit>:
 8008244:	b510      	push	{r4, lr}
 8008246:	4604      	mov	r4, r0
 8008248:	f7ff fff0 	bl	800822c <__sinit_lock_acquire>
 800824c:	69a3      	ldr	r3, [r4, #24]
 800824e:	b11b      	cbz	r3, 8008258 <__sinit+0x14>
 8008250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008254:	f7ff bff0 	b.w	8008238 <__sinit_lock_release>
 8008258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800825c:	6523      	str	r3, [r4, #80]	; 0x50
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <__sinit+0x68>)
 8008260:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <__sinit+0x6c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	62a2      	str	r2, [r4, #40]	; 0x28
 8008266:	42a3      	cmp	r3, r4
 8008268:	bf04      	itt	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	61a3      	streq	r3, [r4, #24]
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f820 	bl	80082b4 <__sfp>
 8008274:	6060      	str	r0, [r4, #4]
 8008276:	4620      	mov	r0, r4
 8008278:	f000 f81c 	bl	80082b4 <__sfp>
 800827c:	60a0      	str	r0, [r4, #8]
 800827e:	4620      	mov	r0, r4
 8008280:	f000 f818 	bl	80082b4 <__sfp>
 8008284:	2200      	movs	r2, #0
 8008286:	60e0      	str	r0, [r4, #12]
 8008288:	2104      	movs	r1, #4
 800828a:	6860      	ldr	r0, [r4, #4]
 800828c:	f7ff ff82 	bl	8008194 <std>
 8008290:	68a0      	ldr	r0, [r4, #8]
 8008292:	2201      	movs	r2, #1
 8008294:	2109      	movs	r1, #9
 8008296:	f7ff ff7d 	bl	8008194 <std>
 800829a:	68e0      	ldr	r0, [r4, #12]
 800829c:	2202      	movs	r2, #2
 800829e:	2112      	movs	r1, #18
 80082a0:	f7ff ff78 	bl	8008194 <std>
 80082a4:	2301      	movs	r3, #1
 80082a6:	61a3      	str	r3, [r4, #24]
 80082a8:	e7d2      	b.n	8008250 <__sinit+0xc>
 80082aa:	bf00      	nop
 80082ac:	08008b84 	.word	0x08008b84
 80082b0:	080081dd 	.word	0x080081dd

080082b4 <__sfp>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	4607      	mov	r7, r0
 80082b8:	f7ff ffac 	bl	8008214 <__sfp_lock_acquire>
 80082bc:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <__sfp+0x84>)
 80082be:	681e      	ldr	r6, [r3, #0]
 80082c0:	69b3      	ldr	r3, [r6, #24]
 80082c2:	b913      	cbnz	r3, 80082ca <__sfp+0x16>
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff ffbd 	bl	8008244 <__sinit>
 80082ca:	3648      	adds	r6, #72	; 0x48
 80082cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	d503      	bpl.n	80082dc <__sfp+0x28>
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	b30b      	cbz	r3, 800831c <__sfp+0x68>
 80082d8:	6836      	ldr	r6, [r6, #0]
 80082da:	e7f7      	b.n	80082cc <__sfp+0x18>
 80082dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082e0:	b9d5      	cbnz	r5, 8008318 <__sfp+0x64>
 80082e2:	4b16      	ldr	r3, [pc, #88]	; (800833c <__sfp+0x88>)
 80082e4:	60e3      	str	r3, [r4, #12]
 80082e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ea:	6665      	str	r5, [r4, #100]	; 0x64
 80082ec:	f7ff fc02 	bl	8007af4 <__retarget_lock_init_recursive>
 80082f0:	f7ff ff96 	bl	8008220 <__sfp_lock_release>
 80082f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082fc:	6025      	str	r5, [r4, #0]
 80082fe:	61a5      	str	r5, [r4, #24]
 8008300:	2208      	movs	r2, #8
 8008302:	4629      	mov	r1, r5
 8008304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008308:	f7fd fab2 	bl	8005870 <memset>
 800830c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008314:	4620      	mov	r0, r4
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008318:	3468      	adds	r4, #104	; 0x68
 800831a:	e7d9      	b.n	80082d0 <__sfp+0x1c>
 800831c:	2104      	movs	r1, #4
 800831e:	4638      	mov	r0, r7
 8008320:	f7ff ff62 	bl	80081e8 <__sfmoreglue>
 8008324:	4604      	mov	r4, r0
 8008326:	6030      	str	r0, [r6, #0]
 8008328:	2800      	cmp	r0, #0
 800832a:	d1d5      	bne.n	80082d8 <__sfp+0x24>
 800832c:	f7ff ff78 	bl	8008220 <__sfp_lock_release>
 8008330:	230c      	movs	r3, #12
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	e7ee      	b.n	8008314 <__sfp+0x60>
 8008336:	bf00      	nop
 8008338:	08008b84 	.word	0x08008b84
 800833c:	ffff0001 	.word	0xffff0001

08008340 <_fwalk_reent>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	4606      	mov	r6, r0
 8008346:	4688      	mov	r8, r1
 8008348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800834c:	2700      	movs	r7, #0
 800834e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008352:	f1b9 0901 	subs.w	r9, r9, #1
 8008356:	d505      	bpl.n	8008364 <_fwalk_reent+0x24>
 8008358:	6824      	ldr	r4, [r4, #0]
 800835a:	2c00      	cmp	r4, #0
 800835c:	d1f7      	bne.n	800834e <_fwalk_reent+0xe>
 800835e:	4638      	mov	r0, r7
 8008360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008364:	89ab      	ldrh	r3, [r5, #12]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d907      	bls.n	800837a <_fwalk_reent+0x3a>
 800836a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800836e:	3301      	adds	r3, #1
 8008370:	d003      	beq.n	800837a <_fwalk_reent+0x3a>
 8008372:	4629      	mov	r1, r5
 8008374:	4630      	mov	r0, r6
 8008376:	47c0      	blx	r8
 8008378:	4307      	orrs	r7, r0
 800837a:	3568      	adds	r5, #104	; 0x68
 800837c:	e7e9      	b.n	8008352 <_fwalk_reent+0x12>

0800837e <__swhatbuf_r>:
 800837e:	b570      	push	{r4, r5, r6, lr}
 8008380:	460e      	mov	r6, r1
 8008382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008386:	2900      	cmp	r1, #0
 8008388:	b096      	sub	sp, #88	; 0x58
 800838a:	4614      	mov	r4, r2
 800838c:	461d      	mov	r5, r3
 800838e:	da08      	bge.n	80083a2 <__swhatbuf_r+0x24>
 8008390:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	602a      	str	r2, [r5, #0]
 8008398:	061a      	lsls	r2, r3, #24
 800839a:	d410      	bmi.n	80083be <__swhatbuf_r+0x40>
 800839c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083a0:	e00e      	b.n	80083c0 <__swhatbuf_r+0x42>
 80083a2:	466a      	mov	r2, sp
 80083a4:	f000 f902 	bl	80085ac <_fstat_r>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dbf1      	blt.n	8008390 <__swhatbuf_r+0x12>
 80083ac:	9a01      	ldr	r2, [sp, #4]
 80083ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083b6:	425a      	negs	r2, r3
 80083b8:	415a      	adcs	r2, r3
 80083ba:	602a      	str	r2, [r5, #0]
 80083bc:	e7ee      	b.n	800839c <__swhatbuf_r+0x1e>
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	2000      	movs	r0, #0
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	b016      	add	sp, #88	; 0x58
 80083c6:	bd70      	pop	{r4, r5, r6, pc}

080083c8 <__smakebuf_r>:
 80083c8:	898b      	ldrh	r3, [r1, #12]
 80083ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083cc:	079d      	lsls	r5, r3, #30
 80083ce:	4606      	mov	r6, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	d507      	bpl.n	80083e4 <__smakebuf_r+0x1c>
 80083d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	6123      	str	r3, [r4, #16]
 80083dc:	2301      	movs	r3, #1
 80083de:	6163      	str	r3, [r4, #20]
 80083e0:	b002      	add	sp, #8
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	ab01      	add	r3, sp, #4
 80083e6:	466a      	mov	r2, sp
 80083e8:	f7ff ffc9 	bl	800837e <__swhatbuf_r>
 80083ec:	9900      	ldr	r1, [sp, #0]
 80083ee:	4605      	mov	r5, r0
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7fd fab1 	bl	8005958 <_malloc_r>
 80083f6:	b948      	cbnz	r0, 800840c <__smakebuf_r+0x44>
 80083f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fc:	059a      	lsls	r2, r3, #22
 80083fe:	d4ef      	bmi.n	80083e0 <__smakebuf_r+0x18>
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	e7e3      	b.n	80083d4 <__smakebuf_r+0xc>
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <__smakebuf_r+0x7c>)
 800840e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	6020      	str	r0, [r4, #0]
 8008414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	6163      	str	r3, [r4, #20]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	6120      	str	r0, [r4, #16]
 8008422:	b15b      	cbz	r3, 800843c <__smakebuf_r+0x74>
 8008424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f8d1 	bl	80085d0 <_isatty_r>
 800842e:	b128      	cbz	r0, 800843c <__smakebuf_r+0x74>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f023 0303 	bic.w	r3, r3, #3
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	89a0      	ldrh	r0, [r4, #12]
 800843e:	4305      	orrs	r5, r0
 8008440:	81a5      	strh	r5, [r4, #12]
 8008442:	e7cd      	b.n	80083e0 <__smakebuf_r+0x18>
 8008444:	080081dd 	.word	0x080081dd

08008448 <_malloc_usable_size_r>:
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f18      	subs	r0, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbc      	itt	lt
 8008452:	580b      	ldrlt	r3, [r1, r0]
 8008454:	18c0      	addlt	r0, r0, r3
 8008456:	4770      	bx	lr

08008458 <_raise_r>:
 8008458:	291f      	cmp	r1, #31
 800845a:	b538      	push	{r3, r4, r5, lr}
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	d904      	bls.n	800846c <_raise_r+0x14>
 8008462:	2316      	movs	r3, #22
 8008464:	6003      	str	r3, [r0, #0]
 8008466:	f04f 30ff 	mov.w	r0, #4294967295
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800846e:	b112      	cbz	r2, 8008476 <_raise_r+0x1e>
 8008470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008474:	b94b      	cbnz	r3, 800848a <_raise_r+0x32>
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f830 	bl	80084dc <_getpid_r>
 800847c:	462a      	mov	r2, r5
 800847e:	4601      	mov	r1, r0
 8008480:	4620      	mov	r0, r4
 8008482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008486:	f000 b817 	b.w	80084b8 <_kill_r>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d00a      	beq.n	80084a4 <_raise_r+0x4c>
 800848e:	1c59      	adds	r1, r3, #1
 8008490:	d103      	bne.n	800849a <_raise_r+0x42>
 8008492:	2316      	movs	r3, #22
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	2001      	movs	r0, #1
 8008498:	e7e7      	b.n	800846a <_raise_r+0x12>
 800849a:	2400      	movs	r4, #0
 800849c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084a0:	4628      	mov	r0, r5
 80084a2:	4798      	blx	r3
 80084a4:	2000      	movs	r0, #0
 80084a6:	e7e0      	b.n	800846a <_raise_r+0x12>

080084a8 <raise>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <raise+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f7ff bfd3 	b.w	8008458 <_raise_r>
 80084b2:	bf00      	nop
 80084b4:	2000000c 	.word	0x2000000c

080084b8 <_kill_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d07      	ldr	r5, [pc, #28]	; (80084d8 <_kill_r+0x20>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	f7fa f9f1 	bl	80028ac <_kill>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d102      	bne.n	80084d4 <_kill_r+0x1c>
 80084ce:	682b      	ldr	r3, [r5, #0]
 80084d0:	b103      	cbz	r3, 80084d4 <_kill_r+0x1c>
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	200003d0 	.word	0x200003d0

080084dc <_getpid_r>:
 80084dc:	f7fa b9de 	b.w	800289c <_getpid>

080084e0 <__sread>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	460c      	mov	r4, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	f000 f894 	bl	8008614 <_read_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	bfab      	itete	ge
 80084f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084f2:	89a3      	ldrhlt	r3, [r4, #12]
 80084f4:	181b      	addge	r3, r3, r0
 80084f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084fa:	bfac      	ite	ge
 80084fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084fe:	81a3      	strhlt	r3, [r4, #12]
 8008500:	bd10      	pop	{r4, pc}

08008502 <__swrite>:
 8008502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	461f      	mov	r7, r3
 8008508:	898b      	ldrh	r3, [r1, #12]
 800850a:	05db      	lsls	r3, r3, #23
 800850c:	4605      	mov	r5, r0
 800850e:	460c      	mov	r4, r1
 8008510:	4616      	mov	r6, r2
 8008512:	d505      	bpl.n	8008520 <__swrite+0x1e>
 8008514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008518:	2302      	movs	r3, #2
 800851a:	2200      	movs	r2, #0
 800851c:	f000 f868 	bl	80085f0 <_lseek_r>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	f000 b817 	b.w	8008568 <_write_r>

0800853a <__sseek>:
 800853a:	b510      	push	{r4, lr}
 800853c:	460c      	mov	r4, r1
 800853e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008542:	f000 f855 	bl	80085f0 <_lseek_r>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	bf15      	itete	ne
 800854c:	6560      	strne	r0, [r4, #84]	; 0x54
 800854e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008556:	81a3      	strheq	r3, [r4, #12]
 8008558:	bf18      	it	ne
 800855a:	81a3      	strhne	r3, [r4, #12]
 800855c:	bd10      	pop	{r4, pc}

0800855e <__sclose>:
 800855e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008562:	f000 b813 	b.w	800858c <_close_r>
	...

08008568 <_write_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	; (8008588 <_write_r+0x20>)
 800856c:	4604      	mov	r4, r0
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7fa f9cf 	bl	800291a <_write>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_write_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_write_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	200003d0 	.word	0x200003d0

0800858c <_close_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d06      	ldr	r5, [pc, #24]	; (80085a8 <_close_r+0x1c>)
 8008590:	2300      	movs	r3, #0
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	602b      	str	r3, [r5, #0]
 8008598:	f7fa f9db 	bl	8002952 <_close>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_close_r+0x1a>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_close_r+0x1a>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200003d0 	.word	0x200003d0

080085ac <_fstat_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	; (80085cc <_fstat_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7fa f9d6 	bl	800296a <_fstat>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_fstat_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_fstat_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	200003d0 	.word	0x200003d0

080085d0 <_isatty_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_isatty_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7fa f9d5 	bl	800298a <_isatty>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_isatty_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_isatty_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	200003d0 	.word	0x200003d0

080085f0 <_lseek_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d07      	ldr	r5, [pc, #28]	; (8008610 <_lseek_r+0x20>)
 80085f4:	4604      	mov	r4, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	602a      	str	r2, [r5, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	f7fa f9ce 	bl	80029a0 <_lseek>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_lseek_r+0x1e>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_lseek_r+0x1e>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	200003d0 	.word	0x200003d0

08008614 <_read_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d07      	ldr	r5, [pc, #28]	; (8008634 <_read_r+0x20>)
 8008618:	4604      	mov	r4, r0
 800861a:	4608      	mov	r0, r1
 800861c:	4611      	mov	r1, r2
 800861e:	2200      	movs	r2, #0
 8008620:	602a      	str	r2, [r5, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	f7fa f95c 	bl	80028e0 <_read>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_read_r+0x1e>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_read_r+0x1e>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	200003d0 	.word	0x200003d0

08008638 <_init>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr

08008644 <_fini>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr
